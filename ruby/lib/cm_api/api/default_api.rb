require "uri"

module CMApi
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Fetch audit events from Cloudera Manager (CM) and CM managed services\nlike HDFS, HBase, Impala, Hive, and Sentry.\n&lt;p&gt;\nBy default, this call will fetch the first 100 audit events (sorted from most\nrecent to oldest) corresponding to a 1 day window based on provided end time\n(which defaults to the  current CM server time). The &lt;em&gt;startTime&lt;/em&gt; and\n&lt;em&gt;endTime&lt;/em&gt; parameters can be used to control the window being queried.\n&lt;p&gt;\nAudit events for CM managed services are only retrieved if Cloudera\nNavigator server is running.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :max_results Maximum number of audits to return
    # @option opts [String] :result_offset Offset of audits to return
    # @option opts [String] :start_time Start of the period to query in ISO 8601 format (defaults\nto 1 day ago relative to endTime).
    # @option opts [String] :end_time End of the period to query in ISO 8601 format (defaults to\ncurrent time).
    # @option opts [String] :query The query to filter out audits in the system. It accepts\nquerying the intersection of a list of constraints,\njoined together with semicolons (without spaces). For example:\n&lt;/p&gt;\n&lt;dl&gt;\n&lt;dt&gt;command==listStatus&lt;/dt&gt;\n&lt;dd&gt;looks for audits with listStatus command.&lt;/dd&gt;\n&lt;dt&gt;command==listStatus;username!=foo&lt;/dt&gt;\n&lt;dd&gt;looks for audits with listStatus command but excludes\naudits generated by foo username&lt;/dd&gt;\n&lt;dt&gt;command==listStatus;source==*oozie*&lt;/dt&gt;\n&lt;dd&gt;looks for audits with listStatus command and source that\ncontains the string &#39;oozie&#39;.\n&lt;/dd&gt;\n&lt;/dl&gt;\n\nFollowing are valid selectors for the query (if applicable to the\naudit):\n&lt;table&gt;\n&lt;tr&gt;\n&lt;th&gt; Selector &lt;/th&gt;\n&lt;th&gt; Description &lt;/th&gt;\n&lt;th&gt; SCM &lt;/th&gt;\n&lt;th&gt; HDFS &lt;/th&gt;\n&lt;th&gt; HBase &lt;/th&gt;\n&lt;th&gt; Hive &lt;/th&gt;\n&lt;th&gt; Impala &lt;/th&gt;\n&lt;th&gt; Sentry &lt;/th&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; service &lt;/td&gt;\n&lt;td&gt; Cloudera Manager Service &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; operation &lt;/td&gt;\n&lt;td&gt; Operation name &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; username &lt;/td&gt;\n&lt;td&gt; User name &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; impersonator&lt;/td&gt;\n&lt;td&gt; Impersonator &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; ip_address &lt;/td&gt;\n&lt;td&gt; IP Address &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; allowed &lt;/td&gt;\n&lt;td&gt; Whether the request was allowed or denied &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; qualifier&lt;/td&gt;\n&lt;td&gt; Column qualifier &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; source &lt;/td&gt;\n&lt;td&gt; Source resource of the operation  &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; destination &lt;/td&gt;\n&lt;td&gt; Destination resource of the operation &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; hostIpAddress &lt;/td&gt;\n&lt;td&gt; Host IP Address &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; role &lt;/td&gt;\n&lt;td&gt; Cloudera Manager Role &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; family &lt;/td&gt;\n&lt;td&gt; Column family &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; database_name &lt;/td&gt;\n&lt;td&gt; Database name &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; table_name &lt;/td&gt;\n&lt;td&gt; Table name &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; object_type &lt;/td&gt;\n&lt;td&gt; Type of object being handled &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; operation_text &lt;/td&gt;\n&lt;td&gt; Command/query text &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;p&gt;\nThe only supported operator is &lt;em&gt;\&quot;;\&quot;&lt;/em&gt; (Boolean AND). Boolean OR is\nnot supported.\n&lt;p&gt;\nThe supported comparators are &lt;em&gt;==&lt;/em&gt; and &lt;em&gt;!=&lt;/em&gt;\nNote that \&quot;LIKE\&quot; comparison is supported using the wild card syntax,\nfor example &lt;em&gt;foo==*value*&lt;/em&gt;. Asterisk is interpreted as a wild\ncard character and must not be part of the value. (LIKE comparison\nqueries are converted to standard SQL LIKE syntax, so any % (%25)\ncharacter in a value that also contains a wild card will be\ninterpreted as a wild card.)\n&lt;p/&gt;\nAvailable since API v8. A subset of these features is available since v4.
    # @return [nil]
    def api_v11_audits_get(opts = {})
      api_v11_audits_get_with_http_info(opts)
      return nil
    end

    # 
    # Fetch audit events from Cloudera Manager (CM) and CM managed services\nlike HDFS, HBase, Impala, Hive, and Sentry.\n&lt;p&gt;\nBy default, this call will fetch the first 100 audit events (sorted from most\nrecent to oldest) corresponding to a 1 day window based on provided end time\n(which defaults to the  current CM server time). The &lt;em&gt;startTime&lt;/em&gt; and\n&lt;em&gt;endTime&lt;/em&gt; parameters can be used to control the window being queried.\n&lt;p&gt;\nAudit events for CM managed services are only retrieved if Cloudera\nNavigator server is running.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :max_results Maximum number of audits to return
    # @option opts [String] :result_offset Offset of audits to return
    # @option opts [String] :start_time Start of the period to query in ISO 8601 format (defaults\nto 1 day ago relative to endTime).
    # @option opts [String] :end_time End of the period to query in ISO 8601 format (defaults to\ncurrent time).
    # @option opts [String] :query The query to filter out audits in the system. It accepts\nquerying the intersection of a list of constraints,\njoined together with semicolons (without spaces). For example:\n&lt;/p&gt;\n&lt;dl&gt;\n&lt;dt&gt;command==listStatus&lt;/dt&gt;\n&lt;dd&gt;looks for audits with listStatus command.&lt;/dd&gt;\n&lt;dt&gt;command==listStatus;username!=foo&lt;/dt&gt;\n&lt;dd&gt;looks for audits with listStatus command but excludes\naudits generated by foo username&lt;/dd&gt;\n&lt;dt&gt;command==listStatus;source==*oozie*&lt;/dt&gt;\n&lt;dd&gt;looks for audits with listStatus command and source that\ncontains the string &#39;oozie&#39;.\n&lt;/dd&gt;\n&lt;/dl&gt;\n\nFollowing are valid selectors for the query (if applicable to the\naudit):\n&lt;table&gt;\n&lt;tr&gt;\n&lt;th&gt; Selector &lt;/th&gt;\n&lt;th&gt; Description &lt;/th&gt;\n&lt;th&gt; SCM &lt;/th&gt;\n&lt;th&gt; HDFS &lt;/th&gt;\n&lt;th&gt; HBase &lt;/th&gt;\n&lt;th&gt; Hive &lt;/th&gt;\n&lt;th&gt; Impala &lt;/th&gt;\n&lt;th&gt; Sentry &lt;/th&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; service &lt;/td&gt;\n&lt;td&gt; Cloudera Manager Service &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; operation &lt;/td&gt;\n&lt;td&gt; Operation name &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; username &lt;/td&gt;\n&lt;td&gt; User name &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; impersonator&lt;/td&gt;\n&lt;td&gt; Impersonator &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; ip_address &lt;/td&gt;\n&lt;td&gt; IP Address &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; allowed &lt;/td&gt;\n&lt;td&gt; Whether the request was allowed or denied &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; qualifier&lt;/td&gt;\n&lt;td&gt; Column qualifier &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; source &lt;/td&gt;\n&lt;td&gt; Source resource of the operation  &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; destination &lt;/td&gt;\n&lt;td&gt; Destination resource of the operation &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; hostIpAddress &lt;/td&gt;\n&lt;td&gt; Host IP Address &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; role &lt;/td&gt;\n&lt;td&gt; Cloudera Manager Role &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; family &lt;/td&gt;\n&lt;td&gt; Column family &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; database_name &lt;/td&gt;\n&lt;td&gt; Database name &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; table_name &lt;/td&gt;\n&lt;td&gt; Table name &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; object_type &lt;/td&gt;\n&lt;td&gt; Type of object being handled &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt; operation_text &lt;/td&gt;\n&lt;td&gt; Command/query text &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;td&gt; x &lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;p&gt;\nThe only supported operator is &lt;em&gt;\&quot;;\&quot;&lt;/em&gt; (Boolean AND). Boolean OR is\nnot supported.\n&lt;p&gt;\nThe supported comparators are &lt;em&gt;==&lt;/em&gt; and &lt;em&gt;!=&lt;/em&gt;\nNote that \&quot;LIKE\&quot; comparison is supported using the wild card syntax,\nfor example &lt;em&gt;foo==*value*&lt;/em&gt;. Asterisk is interpreted as a wild\ncard character and must not be part of the value. (LIKE comparison\nqueries are converted to standard SQL LIKE syntax, so any % (%25)\ncharacter in a value that also contains a wild card will be\ninterpreted as a wild card.)\n&lt;p/&gt;\nAvailable since API v8. A subset of these features is available since v4.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_audits_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_audits_get ..."
      end
      
      # resource path
      path = "/api/v11/audits".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'maxResults'] = opts[:'max_results'] if opts[:'max_results']
      query_params[:'resultOffset'] = opts[:'result_offset'] if opts[:'result_offset']
      query_params[:'startTime'] = opts[:'start_time'] if opts[:'start_time']
      query_params[:'endTime'] = opts[:'end_time'] if opts[:'end_time']
      query_params[:'query'] = opts[:'query'] if opts[:'query']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_audits_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :max_results 
    # @option opts [String] :result_offset 
    # @option opts [String] :start_time 
    # @option opts [String] :end_time 
    # @option opts [String] :query 
    # @return [nil]
    def api_v11_audits_stream_get(opts = {})
      api_v11_audits_stream_get_with_http_info(opts)
      return nil
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :max_results 
    # @option opts [String] :result_offset 
    # @option opts [String] :start_time 
    # @option opts [String] :end_time 
    # @option opts [String] :query 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_audits_stream_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_audits_stream_get ..."
      end
      
      # resource path
      path = "/api/v11/audits/stream".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'maxResults'] = opts[:'max_results'] if opts[:'max_results']
      query_params[:'resultOffset'] = opts[:'result_offset'] if opts[:'result_offset']
      query_params[:'startTime'] = opts[:'start_time'] if opts[:'start_time']
      query_params[:'endTime'] = opts[:'end_time'] if opts[:'end_time']
      query_params[:'query'] = opts[:'query'] if opts[:'query']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_audits_stream_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Executes a batch of API requests in one database transaction. If any\nrequest fails, execution halts and the transaction is rolled back.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_batch_post(opts = {})
      api_v11_batch_post_with_http_info(opts)
      return nil
    end

    # 
    # Executes a batch of API requests in one database transaction. If any\nrequest fails, execution halts and the transaction is rolled back.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_batch_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_batch_post ..."
      end
      
      # resource path
      path = "/api/v11/batch".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Lists all known clusters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view 
    # @return [nil]
    def api_v11_clusters_get(opts = {})
      api_v11_clusters_get_with_http_info(opts)
      return nil
    end

    # 
    # Lists all known clusters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_get ..."
      end
      
      # resource path
      path = "/api/v11/clusters".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates a collection of clusters.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_post(opts = {})
      api_v11_clusters_post_with_http_info(opts)
      return nil
    end

    # 
    # Creates a collection of clusters.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_post ..."
      end
      
      # resource path
      path = "/api/v11/clusters".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Reads information about a cluster.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_get(cluster_name, opts = {})
      api_v11_clusters_cluster_name_get_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Reads information about a cluster.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_get_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_get ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update an existing cluster.\n&lt;p&gt;\nTo update the CDH version, provide the new value in the \&quot;fullVersion\&quot;\nproperty. Setting a correct version that matches the actual installed software\nwill ensure the correct version-specific features, such as services, roles,\ncommands, and configurations. This need not be manually set for clusters\nusing parcels. In general this action is only necessary after the CDH\npackages have been manually updated. Note that a downgrade may be rejected\nif it would render existing services or roles unusable. For major upgrade,\nthe \&quot;upgradeService\&quot; cluster command should be used instead.&lt;/p&gt;\n&lt;p&gt;\nTo rename the cluster, provide the new name in the \&quot;displayName\&quot;\nproperty for API &gt;= 6, or in the \&quot;name\&quot; property for API &lt;=5.\n&lt;p&gt;\nAvailable since API v2.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_put(cluster_name, opts = {})
      api_v11_clusters_cluster_name_put_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Update an existing cluster.\n&lt;p&gt;\nTo update the CDH version, provide the new value in the \&quot;fullVersion\&quot;\nproperty. Setting a correct version that matches the actual installed software\nwill ensure the correct version-specific features, such as services, roles,\ncommands, and configurations. This need not be manually set for clusters\nusing parcels. In general this action is only necessary after the CDH\npackages have been manually updated. Note that a downgrade may be rejected\nif it would render existing services or roles unusable. For major upgrade,\nthe \&quot;upgradeService\&quot; cluster command should be used instead.&lt;/p&gt;\n&lt;p&gt;\nTo rename the cluster, provide the new name in the \&quot;displayName\&quot;\nproperty for API &gt;= 6, or in the \&quot;name\&quot; property for API &lt;=5.\n&lt;p&gt;\nAvailable since API v2.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_put_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_put ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_put" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Deletes a cluster.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_delete(cluster_name, opts = {})
      api_v11_clusters_cluster_name_delete_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Deletes a cluster.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_delete_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_delete ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_delete" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Automatically assign roles to hosts and create the roles for all the services in a cluster.\n&lt;p&gt;\nAssignments are done based on services and hosts in the cluster, and hardware specifications.\nIf no hosts are added to the cluster, an exception will be thrown preventing any\nrole assignments.\nExisting roles will be taken into account and their assignments will be\nnot be modified.\n&lt;p&gt;\nAvailable since API v6.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_auto_assign_roles_put(cluster_name, opts = {})
      api_v11_clusters_cluster_name_auto_assign_roles_put_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Automatically assign roles to hosts and create the roles for all the services in a cluster.\n&lt;p&gt;\nAssignments are done based on services and hosts in the cluster, and hardware specifications.\nIf no hosts are added to the cluster, an exception will be thrown preventing any\nrole assignments.\nExisting roles will be taken into account and their assignments will be\nnot be modified.\n&lt;p&gt;\nAvailable since API v6.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_auto_assign_roles_put_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_auto_assign_roles_put ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_auto_assign_roles_put" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/autoAssignRoles".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_auto_assign_roles_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Automatically configures roles and services in a cluster.\n&lt;p&gt;\nOverwrites some existing configurations. Might create new role config groups.\nOnly default role config groups must exist before calling this endpoint.\nOther role config groups must not exist. If they do, an exception will be thrown\npreventing any configuration.\nIgnores the Cloudera Management Service even if colocated with roles of this\ncluster. To avoid over-committing the heap on hosts, assign hosts to this cluster\nthat are not being used by the Cloudera Management Service.\n&lt;p&gt;\nAvailable since API v6.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_auto_configure_put(cluster_name, opts = {})
      api_v11_clusters_cluster_name_auto_configure_put_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Automatically configures roles and services in a cluster.\n&lt;p&gt;\nOverwrites some existing configurations. Might create new role config groups.\nOnly default role config groups must exist before calling this endpoint.\nOther role config groups must not exist. If they do, an exception will be thrown\npreventing any configuration.\nIgnores the Cloudera Management Service even if colocated with roles of this\ncluster. To avoid over-committing the heap on hosts, assign hosts to this cluster\nthat are not being used by the Cloudera Management Service.\n&lt;p&gt;\nAvailable since API v6.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_auto_configure_put_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_auto_configure_put ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_auto_configure_put" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/autoConfigure".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_auto_configure_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Download a zip-compressed archive of the client configuration, of a\nspecific cluster. Currently, this only includes Kerberos Client\nConfiguration (krb5.conf). For client configuration of services, use the\nclientConfig endpoint of the services resource. This resource does not\nrequire any authentication.
    # @param cluster_name The cluster name.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_client_config_get(cluster_name, opts = {})
      api_v11_clusters_cluster_name_client_config_get_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Download a zip-compressed archive of the client configuration, of a\nspecific cluster. Currently, this only includes Kerberos Client\nConfiguration (krb5.conf). For client configuration of services, use the\nclientConfig endpoint of the services resource. This resource does not\nrequire any authentication.
    # @param cluster_name The cluster name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_client_config_get_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_client_config_get ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_client_config_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/clientConfig".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_client_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # List active cluster commands.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_get(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_get_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # List active cluster commands.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_get_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_get ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Command to configure the cluster to use Kerberos for authentication.\n\nThis command will configure all relevant services on a cluster for\nKerberos usage.  This command will trigger a GenerateCredentials command\nto create Kerberos keytabs for all roles in the cluster.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_configure_for_kerberos_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_configure_for_kerberos_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Command to configure the cluster to use Kerberos for authentication.\n\nThis command will configure all relevant services on a cluster for\nKerberos usage.  This command will trigger a GenerateCredentials command\nto create Kerberos keytabs for all roles in the cluster.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_configure_for_kerberos_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_configure_for_kerberos_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_configure_for_kerberos_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/configureForKerberos".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_configure_for_kerberos_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Deploy the cluster-wide client configuration.\n\n&lt;p&gt;For each service in the cluster, deploy the service&#39;s client configuration\nto all the hosts that the service runs on.&lt;/p&gt;\n\n&lt;p&gt;Available since API v2.&lt;/p&gt;
    # @param cluster_name The name of the cluster
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_deploy_client_config_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_deploy_client_config_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Deploy the cluster-wide client configuration.\n\n&lt;p&gt;For each service in the cluster, deploy the service&#39;s client configuration\nto all the hosts that the service runs on.&lt;/p&gt;\n\n&lt;p&gt;Available since API v2.&lt;/p&gt;
    # @param cluster_name The name of the cluster
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_deploy_client_config_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_deploy_client_config_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_deploy_client_config_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/deployClientConfig".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_deploy_client_config_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Deploy the Cluster&#39;s Kerberos client configuration.\n\n&lt;p&gt;\nDeploy krb5.conf to hosts in a cluster. Does not deploy to decommissioned\nhosts or hosts with active processes.\n&lt;/p&gt;\n\n&lt;p&gt;\nAvailable since API v7.\n&lt;/p&gt;
    # @param cluster_name The name of the cluster
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_deploy_cluster_client_config_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_deploy_cluster_client_config_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Deploy the Cluster&#39;s Kerberos client configuration.\n\n&lt;p&gt;\nDeploy krb5.conf to hosts in a cluster. Does not deploy to decommissioned\nhosts or hosts with active processes.\n&lt;/p&gt;\n\n&lt;p&gt;\nAvailable since API v7.\n&lt;/p&gt;
    # @param cluster_name The name of the cluster
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_deploy_cluster_client_config_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_deploy_cluster_client_config_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_deploy_cluster_client_config_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/deployClusterClientConfig".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_deploy_cluster_client_config_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Put the cluster into maintenance mode. This is a synchronous command.\nThe result is known immediately upon return.\n\n&lt;p&gt;Available since API v2.&lt;/p&gt;
    # @param cluster_name The name of the cluster
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_enter_maintenance_mode_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_enter_maintenance_mode_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Put the cluster into maintenance mode. This is a synchronous command.\nThe result is known immediately upon return.\n\n&lt;p&gt;Available since API v2.&lt;/p&gt;
    # @param cluster_name The name of the cluster
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_enter_maintenance_mode_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_enter_maintenance_mode_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_enter_maintenance_mode_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/enterMaintenanceMode".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_enter_maintenance_mode_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Take the cluster out of maintenance mode. This is a synchronous command.\nThe result is known immediately upon return.\n\n&lt;p&gt;Available since API v2.&lt;/p&gt;
    # @param cluster_name The name of the cluster
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_exit_maintenance_mode_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_exit_maintenance_mode_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Take the cluster out of maintenance mode. This is a synchronous command.\nThe result is known immediately upon return.\n\n&lt;p&gt;Available since API v2.&lt;/p&gt;
    # @param cluster_name The name of the cluster
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_exit_maintenance_mode_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_exit_maintenance_mode_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_exit_maintenance_mode_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/exitMaintenanceMode".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_exit_maintenance_mode_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Prepare and start services in a cluster.\n\n&lt;p&gt;\nPerform all the steps needed to prepare each service in a cluster and start the services\nin order.\n&lt;/p&gt;\n\n&lt;p&gt;\nAvailable since API v7.\n&lt;/p&gt;
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_first_run_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_first_run_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Prepare and start services in a cluster.\n\n&lt;p&gt;\nPerform all the steps needed to prepare each service in a cluster and start the services\nin order.\n&lt;/p&gt;\n\n&lt;p&gt;\nAvailable since API v7.\n&lt;/p&gt;
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_first_run_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_first_run_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_first_run_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/firstRun".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_first_run_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Runs the host inspector on the configured hosts in the specified cluster.\n\nAvailable since V8.
    # @param cluster_name The name of the cluster
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_inspect_hosts_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_inspect_hosts_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Runs the host inspector on the configured hosts in the specified cluster.\n\nAvailable since V8.
    # @param cluster_name The name of the cluster
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_inspect_hosts_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_inspect_hosts_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_inspect_hosts_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/inspectHosts".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_inspect_hosts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates all refreshable configuration files for services with\nDynamic Resource Pools.\n&lt;p&gt;\nAvailable since API v6.
    # @param cluster_name The name of the cluster
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_pools_refresh_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_pools_refresh_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Updates all refreshable configuration files for services with\nDynamic Resource Pools.\n&lt;p&gt;\nAvailable since API v6.
    # @param cluster_name The name of the cluster
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_pools_refresh_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_pools_refresh_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_pools_refresh_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/poolsRefresh".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_pools_refresh_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates all refreshable configuration files in the cluster. Will not\nrestart any roles.\n&lt;p&gt;\nAvailable since API v6.
    # @param cluster_name The name of the cluster
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_refresh_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_refresh_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Updates all refreshable configuration files in the cluster. Will not\nrestart any roles.\n&lt;p&gt;\nAvailable since API v6.
    # @param cluster_name The name of the cluster
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_refresh_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_refresh_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_refresh_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/refresh".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_refresh_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Restart all services in the cluster.\n&lt;p&gt;\nServices are restarted in the appropriate order given their dependencies.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_restart_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_restart_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Restart all services in the cluster.\n&lt;p&gt;\nServices are restarted in the appropriate order given their dependencies.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_restart_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_restart_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_restart_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/restart".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_restart_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Command to do a \&quot;best-effort\&quot; rolling restart of the given cluster,\ni.e. it does plain restart of services that cannot be rolling restarted,\nfollowed by first rolling restarting non-slaves and then rolling restarting\nthe slave roles of services that can be rolling restarted. The slave restarts\nare done host-by-host.\n&lt;p&gt;\nAvailable since API v4. Only available with Cloudera Manager Enterprise\nEdition.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_rolling_restart_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_rolling_restart_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Command to do a \&quot;best-effort\&quot; rolling restart of the given cluster,\ni.e. it does plain restart of services that cannot be rolling restarted,\nfollowed by first rolling restarting non-slaves and then rolling restarting\nthe slave roles of services that can be rolling restarted. The slave restarts\nare done host-by-host.\n&lt;p&gt;\nAvailable since API v4. Only available with Cloudera Manager Enterprise\nEdition.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_rolling_restart_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_rolling_restart_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_rolling_restart_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/rollingRestart".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_rolling_restart_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Command to do a rolling upgrade of specific services in the given cluster\n\nThis command does not handle any services that don&#39;t support rolling\nupgrades. The command will throw an error and not start if upgrade of any\nsuch service is requested.\n\nThis command does not upgrade the full CDH Cluster. You should normally\nuse the upgradeCDH Command for upgrading the cluster. This is primarily\nhelpful if you need to need to recover from an upgrade failure or for\nadvanced users to script an alternative to the upgradeCdhCommand.\n\nThis command expects the binaries to be available on hosts and activated.\nIt does not change any binaries on the hosts.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_rolling_upgrade_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_rolling_upgrade_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Command to do a rolling upgrade of specific services in the given cluster\n\nThis command does not handle any services that don&#39;t support rolling\nupgrades. The command will throw an error and not start if upgrade of any\nsuch service is requested.\n\nThis command does not upgrade the full CDH Cluster. You should normally\nuse the upgradeCDH Command for upgrading the cluster. This is primarily\nhelpful if you need to need to recover from an upgrade failure or for\nadvanced users to script an alternative to the upgradeCdhCommand.\n\nThis command expects the binaries to be available on hosts and activated.\nIt does not change any binaries on the hosts.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_rolling_upgrade_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_rolling_upgrade_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_rolling_upgrade_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/rollingUpgrade".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_rolling_upgrade_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Start all services in the cluster.\n&lt;p&gt;\nServices are started in the appropriate order given their dependencies.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_start_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_start_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Start all services in the cluster.\n&lt;p&gt;\nServices are started in the appropriate order given their dependencies.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_start_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_start_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_start_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/start".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_start_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Stop all services in the cluster.\n&lt;p&gt;\nServices are stopped in the appropriate order given their dependencies.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_stop_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_stop_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Stop all services in the cluster.\n&lt;p&gt;\nServices are stopped in the appropriate order given their dependencies.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_stop_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_stop_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_stop_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/stop".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_stop_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Perform CDH upgrade to the specified version.\n&lt;p&gt;\nAllows the following upgrades:\n&lt;ul&gt;\n&lt;li&gt;Major upgrades from any CDH 4 to any CDH 5&lt;/li&gt;\n&lt;li&gt;Minor upgrades from any CDH 5 to any CDH 5&lt;/li&gt;\n&lt;li&gt;Maintenance upgrades or downgrades (a.b.x to a.b.y)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;\nIf using packages, CDH packages on all hosts of the cluster must be\nmanually upgraded before this command is issued.\n&lt;p&gt;\nThe command will upgrade the services and their configuration to the\nversion available in the CDH5 distribution.\n&lt;p&gt;\nUnless rolling upgrade options are provided, the entire cluster will\nexperience downtime. If rolling upgrade options are provided, command will\ndo a \&quot;best-effort\&quot; rolling upgrade of the given cluster, i.e. it does\nplain upgrade of services that cannot be rolling upgraded, followed by\nfirst rolling upgrading non-slaves and then rolling restarting the slave\nroles of services that can be rolling restarted. The slave restarts are\ndone host-by-host.\n&lt;p&gt;\nAvailable since v9. Rolling upgrade is only available with Cloudera\nManager Enterprise Edition. A more limited upgrade variant available since\nv6.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_upgrade_cdh_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_upgrade_cdh_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Perform CDH upgrade to the specified version.\n&lt;p&gt;\nAllows the following upgrades:\n&lt;ul&gt;\n&lt;li&gt;Major upgrades from any CDH 4 to any CDH 5&lt;/li&gt;\n&lt;li&gt;Minor upgrades from any CDH 5 to any CDH 5&lt;/li&gt;\n&lt;li&gt;Maintenance upgrades or downgrades (a.b.x to a.b.y)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;\nIf using packages, CDH packages on all hosts of the cluster must be\nmanually upgraded before this command is issued.\n&lt;p&gt;\nThe command will upgrade the services and their configuration to the\nversion available in the CDH5 distribution.\n&lt;p&gt;\nUnless rolling upgrade options are provided, the entire cluster will\nexperience downtime. If rolling upgrade options are provided, command will\ndo a \&quot;best-effort\&quot; rolling upgrade of the given cluster, i.e. it does\nplain upgrade of services that cannot be rolling upgraded, followed by\nfirst rolling upgrading non-slaves and then rolling restarting the slave\nroles of services that can be rolling restarted. The slave restarts are\ndone host-by-host.\n&lt;p&gt;\nAvailable since v9. Rolling upgrade is only available with Cloudera\nManager Enterprise Edition. A more limited upgrade variant available since\nv6.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_upgrade_cdh_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_upgrade_cdh_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_upgrade_cdh_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/upgradeCdh".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_upgrade_cdh_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Upgrades the services in the cluster to the CDH5 version.\n&lt;p&gt;\nThis command requires that the CDH packages in the hosts used by the\ncluster be upgraded to CDH5 before this command is issued. Once issued,\nthis command will stop all running services before proceeding.\n&lt;p&gt;\nIf parcels are used instead of CDH system packages then the following\nsteps need to happen in order:\n&lt;ol&gt;\n&lt;li&gt;Stop all services manually&lt;/li&gt;\n&lt;li&gt;Activate parcel&lt;/li&gt;\n&lt;li&gt;Run this upgrade command&lt;/li&gt;\n&lt;/ol&gt;\nThe command will upgrade the services and their configuration to the\nversion available in the CDH5 distribution.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_commands_upgrade_services_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_commands_upgrade_services_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Upgrades the services in the cluster to the CDH5 version.\n&lt;p&gt;\nThis command requires that the CDH packages in the hosts used by the\ncluster be upgraded to CDH5 before this command is issued. Once issued,\nthis command will stop all running services before proceeding.\n&lt;p&gt;\nIf parcels are used instead of CDH system packages then the following\nsteps need to happen in order:\n&lt;ol&gt;\n&lt;li&gt;Stop all services manually&lt;/li&gt;\n&lt;li&gt;Activate parcel&lt;/li&gt;\n&lt;li&gt;Run this upgrade command&lt;/li&gt;\n&lt;/ol&gt;\nThe command will upgrade the services and their configuration to the\nversion available in the CDH5 distribution.
    # @param cluster_name The name of the cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_commands_upgrade_services_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_commands_upgrade_services_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_commands_upgrade_services_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/commands/upgradeServices".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_commands_upgrade_services_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Lists all host templates in a cluster.\n&lt;p&gt;\nAvailable since API v3.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_host_templates_get(cluster_name, opts = {})
      api_v11_clusters_cluster_name_host_templates_get_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Lists all host templates in a cluster.\n&lt;p&gt;\nAvailable since API v3.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_host_templates_get_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_host_templates_get ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_host_templates_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/hostTemplates".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_host_templates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates new host templates.\n&lt;p&gt;\nHost template names must be unique across clusters.\n&lt;p&gt;\nAvailable since API v3.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_host_templates_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_host_templates_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Creates new host templates.\n&lt;p&gt;\nHost template names must be unique across clusters.\n&lt;p&gt;\nAvailable since API v3.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_host_templates_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_host_templates_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_host_templates_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/hostTemplates".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_host_templates_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieves information about a host template.\n&lt;p&gt;\nAvailable since API v3.
    # @param host_template_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_host_templates_host_template_name_get(host_template_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_host_templates_host_template_name_get_with_http_info(host_template_name, cluster_name, opts)
      return nil
    end

    # 
    # Retrieves information about a host template.\n&lt;p&gt;\nAvailable since API v3.
    # @param host_template_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_host_templates_host_template_name_get_with_http_info(host_template_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_host_templates_host_template_name_get ..."
      end
      
      # verify the required parameter 'host_template_name' is set
      fail "Missing the required parameter 'host_template_name' when calling api_v11_clusters_cluster_name_host_templates_host_template_name_get" if host_template_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_host_templates_host_template_name_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/hostTemplates/{hostTemplateName}".sub('{format}','json').sub('{' + 'hostTemplateName' + '}', host_template_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_host_templates_host_template_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates an existing host template.\n&lt;p&gt;\nCan be used to update the role config groups in a host template\nor rename it.\n&lt;p&gt;\nAvailable since API v3.
    # @param host_template_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_host_templates_host_template_name_put(host_template_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_host_templates_host_template_name_put_with_http_info(host_template_name, cluster_name, opts)
      return nil
    end

    # 
    # Updates an existing host template.\n&lt;p&gt;\nCan be used to update the role config groups in a host template\nor rename it.\n&lt;p&gt;\nAvailable since API v3.
    # @param host_template_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_host_templates_host_template_name_put_with_http_info(host_template_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_host_templates_host_template_name_put ..."
      end
      
      # verify the required parameter 'host_template_name' is set
      fail "Missing the required parameter 'host_template_name' when calling api_v11_clusters_cluster_name_host_templates_host_template_name_put" if host_template_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_host_templates_host_template_name_put" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/hostTemplates/{hostTemplateName}".sub('{format}','json').sub('{' + 'hostTemplateName' + '}', host_template_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_host_templates_host_template_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Deletes a host template.\n&lt;p&gt;\nAvailable since API v3.
    # @param host_template_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_host_templates_host_template_name_delete(host_template_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_host_templates_host_template_name_delete_with_http_info(host_template_name, cluster_name, opts)
      return nil
    end

    # 
    # Deletes a host template.\n&lt;p&gt;\nAvailable since API v3.
    # @param host_template_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_host_templates_host_template_name_delete_with_http_info(host_template_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_host_templates_host_template_name_delete ..."
      end
      
      # verify the required parameter 'host_template_name' is set
      fail "Missing the required parameter 'host_template_name' when calling api_v11_clusters_cluster_name_host_templates_host_template_name_delete" if host_template_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_host_templates_host_template_name_delete" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/hostTemplates/{hostTemplateName}".sub('{format}','json').sub('{' + 'hostTemplateName' + '}', host_template_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_host_templates_host_template_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Applies a host template to a collection of hosts. This will create a role\nfor each role config group on each of the hosts.\n&lt;p&gt;\nThe provided hosts must not have any existing roles on them and if the\ncluster is not using parcels, the hosts must have a CDH version matching\nthat of the cluster version.\n&lt;p&gt;\nAvailable since API v3.
    # @param host_template_name Host template to apply.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_roles Whether to start the newly created roles or not.
    # @return [nil]
    def api_v11_clusters_cluster_name_host_templates_host_template_name_commands_apply_host_template_post(host_template_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_host_templates_host_template_name_commands_apply_host_template_post_with_http_info(host_template_name, cluster_name, opts)
      return nil
    end

    # 
    # Applies a host template to a collection of hosts. This will create a role\nfor each role config group on each of the hosts.\n&lt;p&gt;\nThe provided hosts must not have any existing roles on them and if the\ncluster is not using parcels, the hosts must have a CDH version matching\nthat of the cluster version.\n&lt;p&gt;\nAvailable since API v3.
    # @param host_template_name Host template to apply.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_roles Whether to start the newly created roles or not.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_host_templates_host_template_name_commands_apply_host_template_post_with_http_info(host_template_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_host_templates_host_template_name_commands_apply_host_template_post ..."
      end
      
      # verify the required parameter 'host_template_name' is set
      fail "Missing the required parameter 'host_template_name' when calling api_v11_clusters_cluster_name_host_templates_host_template_name_commands_apply_host_template_post" if host_template_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_host_templates_host_template_name_commands_apply_host_template_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/hostTemplates/{hostTemplateName}/commands/applyHostTemplate".sub('{format}','json').sub('{' + 'hostTemplateName' + '}', host_template_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'startRoles'] = opts[:'start_roles'] if opts[:'start_roles']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_host_templates_host_template_name_commands_apply_host_template_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_hosts_get(cluster_name, opts = {})
      api_v11_clusters_cluster_name_hosts_get_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_hosts_get_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_hosts_get ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_hosts_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/hosts".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_hosts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_hosts_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_hosts_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_hosts_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_hosts_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_hosts_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/hosts".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_hosts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_hosts_delete(cluster_name, opts = {})
      api_v11_clusters_cluster_name_hosts_delete_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_hosts_delete_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_hosts_delete ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_hosts_delete" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/hosts".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_hosts_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param cluster_name 
    # @param host_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_hosts_host_id_delete(cluster_name, host_id, opts = {})
      api_v11_clusters_cluster_name_hosts_host_id_delete_with_http_info(cluster_name, host_id, opts)
      return nil
    end

    # 
    # 
    # @param cluster_name 
    # @param host_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_hosts_host_id_delete_with_http_info(cluster_name, host_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_hosts_host_id_delete ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_hosts_host_id_delete" if cluster_name.nil?
      
      # verify the required parameter 'host_id' is set
      fail "Missing the required parameter 'host_id' when calling api_v11_clusters_cluster_name_hosts_host_id_delete" if host_id.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/hosts/{hostId}".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s).sub('{' + 'hostId' + '}', host_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_hosts_host_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Lists all parcels that the cluster has access to.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view 
    # @return [nil]
    def api_v11_clusters_cluster_name_parcels_get(cluster_name, opts = {})
      api_v11_clusters_cluster_name_parcels_get_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Lists all parcels that the cluster has access to.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_parcels_get_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_parcels_get ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_parcels_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/parcels".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_parcels_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieves detailed information about a parcel.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_get(product, version, cluster_name, opts = {})
      api_v11_clusters_cluster_name_parcels_products_product_versions_version_get_with_http_info(product, version, cluster_name, opts)
      return nil
    end

    # 
    # Retrieves detailed information about a parcel.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_get_with_http_info(product, version, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_get ..."
      end
      
      # verify the required parameter 'product' is set
      fail "Missing the required parameter 'product' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_get" if product.nil?
      
      # verify the required parameter 'version' is set
      fail "Missing the required parameter 'version' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_get" if version.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/parcels/products/{product}/versions/{version}".sub('{format}','json').sub('{' + 'product' + '}', product.to_s).sub('{' + 'version' + '}', version.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # A synchronous command that activates the parcel on the cluster.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_activate_post(product, version, cluster_name, opts = {})
      api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_activate_post_with_http_info(product, version, cluster_name, opts)
      return nil
    end

    # 
    # A synchronous command that activates the parcel on the cluster.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_activate_post_with_http_info(product, version, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_activate_post ..."
      end
      
      # verify the required parameter 'product' is set
      fail "Missing the required parameter 'product' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_activate_post" if product.nil?
      
      # verify the required parameter 'version' is set
      fail "Missing the required parameter 'version' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_activate_post" if version.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_activate_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/activate".sub('{format}','json').sub('{' + 'product' + '}', product.to_s).sub('{' + 'version' + '}', version.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_activate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # A synchronous command that cancels the parcel distribution.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_distribution_post(product, version, cluster_name, opts = {})
      api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_distribution_post_with_http_info(product, version, cluster_name, opts)
      return nil
    end

    # 
    # A synchronous command that cancels the parcel distribution.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_distribution_post_with_http_info(product, version, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_distribution_post ..."
      end
      
      # verify the required parameter 'product' is set
      fail "Missing the required parameter 'product' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_distribution_post" if product.nil?
      
      # verify the required parameter 'version' is set
      fail "Missing the required parameter 'version' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_distribution_post" if version.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_distribution_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/cancelDistribution".sub('{format}','json').sub('{' + 'product' + '}', product.to_s).sub('{' + 'version' + '}', version.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_distribution_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # A synchronous command that cancels the parcel download.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_download_post(product, version, cluster_name, opts = {})
      api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_download_post_with_http_info(product, version, cluster_name, opts)
      return nil
    end

    # 
    # A synchronous command that cancels the parcel download.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_download_post_with_http_info(product, version, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_download_post ..."
      end
      
      # verify the required parameter 'product' is set
      fail "Missing the required parameter 'product' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_download_post" if product.nil?
      
      # verify the required parameter 'version' is set
      fail "Missing the required parameter 'version' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_download_post" if version.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_download_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/cancelDownload".sub('{format}','json').sub('{' + 'product' + '}', product.to_s).sub('{' + 'version' + '}', version.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_cancel_download_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # A synchronous command that deactivates the parcel on the cluster.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_deactivate_post(product, version, cluster_name, opts = {})
      api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_deactivate_post_with_http_info(product, version, cluster_name, opts)
      return nil
    end

    # 
    # A synchronous command that deactivates the parcel on the cluster.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_deactivate_post_with_http_info(product, version, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_deactivate_post ..."
      end
      
      # verify the required parameter 'product' is set
      fail "Missing the required parameter 'product' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_deactivate_post" if product.nil?
      
      # verify the required parameter 'version' is set
      fail "Missing the required parameter 'version' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_deactivate_post" if version.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_deactivate_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/deactivate".sub('{format}','json').sub('{' + 'product' + '}', product.to_s).sub('{' + 'version' + '}', version.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_deactivate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # A synchronous command that removes the downloaded parcel.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_remove_download_post(product, version, cluster_name, opts = {})
      api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_remove_download_post_with_http_info(product, version, cluster_name, opts)
      return nil
    end

    # 
    # A synchronous command that removes the downloaded parcel.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_remove_download_post_with_http_info(product, version, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_remove_download_post ..."
      end
      
      # verify the required parameter 'product' is set
      fail "Missing the required parameter 'product' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_remove_download_post" if product.nil?
      
      # verify the required parameter 'version' is set
      fail "Missing the required parameter 'version' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_remove_download_post" if version.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_remove_download_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/removeDownload".sub('{format}','json').sub('{' + 'product' + '}', product.to_s).sub('{' + 'version' + '}', version.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_remove_download_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # A synchronous command that starts the distribution of the parcel\nto the cluster.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.\nIn order to see the progress of the distribution, a call\nto ParcelResource#readParcel() needs to be made.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_distribution_post(product, version, cluster_name, opts = {})
      api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_distribution_post_with_http_info(product, version, cluster_name, opts)
      return nil
    end

    # 
    # A synchronous command that starts the distribution of the parcel\nto the cluster.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.\nIn order to see the progress of the distribution, a call\nto ParcelResource#readParcel() needs to be made.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_distribution_post_with_http_info(product, version, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_distribution_post ..."
      end
      
      # verify the required parameter 'product' is set
      fail "Missing the required parameter 'product' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_distribution_post" if product.nil?
      
      # verify the required parameter 'version' is set
      fail "Missing the required parameter 'version' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_distribution_post" if version.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_distribution_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/startDistribution".sub('{format}','json').sub('{' + 'product' + '}', product.to_s).sub('{' + 'version' + '}', version.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_distribution_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # A synchronous command that starts the parcel download.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.\nIn order to see the progress of the download, a call\nto ParcelResource#readParcel() needs to be made.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_download_post(product, version, cluster_name, opts = {})
      api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_download_post_with_http_info(product, version, cluster_name, opts)
      return nil
    end

    # 
    # A synchronous command that starts the parcel download.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.\nIn order to see the progress of the download, a call\nto ParcelResource#readParcel() needs to be made.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_download_post_with_http_info(product, version, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_download_post ..."
      end
      
      # verify the required parameter 'product' is set
      fail "Missing the required parameter 'product' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_download_post" if product.nil?
      
      # verify the required parameter 'version' is set
      fail "Missing the required parameter 'version' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_download_post" if version.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_download_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/startDownload".sub('{format}','json').sub('{' + 'product' + '}', product.to_s).sub('{' + 'version' + '}', version.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_download_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # A synchronous command that removes the distribution from the hosts in\nthe cluster.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.\nIn order to see the progress of the removal, a call\nto ParcelResource#readParcel() needs to be made.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_removal_of_distribution_post(product, version, cluster_name, opts = {})
      api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_removal_of_distribution_post_with_http_info(product, version, cluster_name, opts)
      return nil
    end

    # 
    # A synchronous command that removes the distribution from the hosts in\nthe cluster.\n&lt;p&gt;\nSince it is synchronous, the result is known immediately upon return.\nIn order to see the progress of the removal, a call\nto ParcelResource#readParcel() needs to be made.
    # @param product 
    # @param version 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_removal_of_distribution_post_with_http_info(product, version, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_removal_of_distribution_post ..."
      end
      
      # verify the required parameter 'product' is set
      fail "Missing the required parameter 'product' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_removal_of_distribution_post" if product.nil?
      
      # verify the required parameter 'version' is set
      fail "Missing the required parameter 'version' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_removal_of_distribution_post" if version.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_removal_of_distribution_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/startRemovalOfDistribution".sub('{format}','json').sub('{' + 'product' + '}', product.to_s).sub('{' + 'version' + '}', version.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_parcels_products_product_versions_version_commands_start_removal_of_distribution_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve details parcel usage information for the cluster. This describes\nwhich processes, roles and hosts are using which parcels.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_parcels_usage_get(cluster_name, opts = {})
      api_v11_clusters_cluster_name_parcels_usage_get_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Retrieve details parcel usage information for the cluster. This describes\nwhich processes, roles and hosts are using which parcels.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_parcels_usage_get_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_parcels_usage_get ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_parcels_usage_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/parcels/usage".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_parcels_usage_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # List the supported service types for a cluster.
    # @param cluster_name The cluster.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_service_types_get(cluster_name, opts = {})
      api_v11_clusters_cluster_name_service_types_get_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # List the supported service types for a cluster.
    # @param cluster_name The cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_service_types_get_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_service_types_get ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_service_types_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/serviceTypes".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_service_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Lists all services registered in the cluster.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view 
    # @return [nil]
    def api_v11_clusters_cluster_name_services_get(cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_get_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Lists all services registered in the cluster.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_get_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_get ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates a list of services.\n&lt;p&gt;\nThere are typically two service creation strategies:\n&lt;ol&gt;\n&lt;li&gt;\nThe caller may choose to set up a new service piecemeal, by first\ncreating the service itself (without any roles or configuration),\nand then create the roles, and then specify configuration.\n&lt;/li&gt;\n&lt;li&gt;\nAlternatively, the caller can pack\nall the information in one call, by fully specifying the fields in\nthe com.cloudera.api.model.ApiService object, with\n&lt;ul&gt;\n&lt;li&gt;service config and role type config, and&lt;/li&gt;\n&lt;li&gt;role to host assignment.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;table&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Cluster Version&lt;/th&gt;\n&lt;th&gt;Available Service Types&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;CDH4&lt;/td&gt;\n&lt;td&gt;HDFS, MAPREDUCE, HBASE, OOZIE, ZOOKEEPER, HUE, YARN, IMPALA, FLUME, HIVE, SOLR, SQOOP, KS_INDEXER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;CDH5&lt;/td&gt;\n&lt;td&gt;HDFS, MAPREDUCE, HBASE, OOZIE, ZOOKEEPER, HUE, YARN, IMPALA,\nFLUME, HIVE, SOLR, SQOOP, KS_INDEXER, SQOOP_CLIENT, SENTRY,\nACCUMULO16, KMS, SPARK_ON_YARN\n&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n\nAs of V6, GET /{clusterName}/serviceTypes should be used to get\nthe service types available to the cluster.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_post(cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_post_with_http_info(cluster_name, opts)
      return nil
    end

    # 
    # Creates a list of services.\n&lt;p&gt;\nThere are typically two service creation strategies:\n&lt;ol&gt;\n&lt;li&gt;\nThe caller may choose to set up a new service piecemeal, by first\ncreating the service itself (without any roles or configuration),\nand then create the roles, and then specify configuration.\n&lt;/li&gt;\n&lt;li&gt;\nAlternatively, the caller can pack\nall the information in one call, by fully specifying the fields in\nthe com.cloudera.api.model.ApiService object, with\n&lt;ul&gt;\n&lt;li&gt;service config and role type config, and&lt;/li&gt;\n&lt;li&gt;role to host assignment.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;table&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Cluster Version&lt;/th&gt;\n&lt;th&gt;Available Service Types&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;CDH4&lt;/td&gt;\n&lt;td&gt;HDFS, MAPREDUCE, HBASE, OOZIE, ZOOKEEPER, HUE, YARN, IMPALA, FLUME, HIVE, SOLR, SQOOP, KS_INDEXER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;CDH5&lt;/td&gt;\n&lt;td&gt;HDFS, MAPREDUCE, HBASE, OOZIE, ZOOKEEPER, HUE, YARN, IMPALA,\nFLUME, HIVE, SOLR, SQOOP, KS_INDEXER, SQOOP_CLIENT, SENTRY,\nACCUMULO16, KMS, SPARK_ON_YARN\n&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n\nAs of V6, GET /{clusterName}/serviceTypes should be used to get\nthe service types available to the cluster.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_post_with_http_info(cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_post ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieves details information about a service.
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Retrieves details information about a service.
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates service information.\n&lt;p/&gt;\nThis method will update only writable fields of the service information.\nCurrently this only includes the service display name.\n&lt;p/&gt;\nAvailable since API v3.
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_put(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_put_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Updates service information.\n&lt;p/&gt;\nThis method will update only writable fields of the service information.\nCurrently this only includes the service display name.\n&lt;p/&gt;\nAvailable since API v3.
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_put_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_put ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_put" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_put" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Deletes a service from the system.
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_delete(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_delete_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Deletes a service from the system.
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_delete_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_delete ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_delete" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_delete" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Read all activities in the system
    # @param cluster_name The name of the cluster
    # @param service_name The name of the service
    # @param service_name2 
    # @param cluster_name2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :max_results The maximum number of activities to return.
    # @option opts [String] :result_offset Specified the offset of activities to return.
    # @option opts [String] :query The query to perform to find activities in the system. By default,\nthis call returns top level (i.e. root) activities that have currently\nstarted.\n&lt;p&gt;\nThe query specifies the intersection of a list of constraints,\njoined together with semicolons (without spaces). For example:\n&lt;/p&gt;\n&lt;dl&gt;\n&lt;dt&gt;status==started;parent==&lt;/dt&gt;\n&lt;dd&gt;looks for running root activities. This is also the\ndefault query.&lt;/dd&gt;\n&lt;dt&gt;status==failed;finishTime=gt=2012-04-01T20:30:00.000Z&lt;/dt&gt;\n&lt;dd&gt;looks for failed activities after the given date time.&lt;/dd&gt;\n&lt;dt&gt;name==Pi Estimator;startTime=gt=2012-04-01T20:30:00.000Z&lt;/dt&gt;\n&lt;dd&gt;looks for activities started after the given date time,\nwith the name of \&quot;Pi Estimator\&quot;.&lt;/dd&gt;\n&lt;dt&gt;startTime=lt=2012-01-02T00:00:00.000Z;finishTime=ge=2012-01-01T00:00:00.000Z&lt;/dt&gt;\n&lt;dd&gt;looks for activities that are active on 2012 New Year&#39;s Day.\nNote that they may start before or finish after that day.&lt;/dd&gt;\n&lt;dt&gt;status==failed;parent==000014-20120425161321-oozie-joe&lt;/dt&gt;\n&lt;dd&gt;looks for failed child activities of the given parent\nactivity id.&lt;/dd&gt;\n&lt;dt&gt;status==started;metrics.cpu_user=gt=10&lt;/dt&gt;\n&lt;dd&gt;looks for started activities that are using more than 10 cores\nper second.&lt;/dd&gt;\n&lt;dt&gt;type==hive;metrics.user==bc;finishTime=gt=2012-04-01T20:30:00.000Z&lt;/dt&gt;\n&lt;dd&gt;looks for all hive queries submitted by user bc after the\ngiven date time.&lt;/dd&gt;\n&lt;/dl&gt;\n\nYou may query any fields present in the ApiActivity object. You can\nalso query by activity metric values using the &lt;em&gt;metrics.*&lt;/em&gt;\nsyntax. Values for date time fields should be ISO8601 timestamps.\n&lt;p&gt;\nThe valid comparators are &lt;em&gt;==&lt;/em&gt;, &lt;em&gt;!=&lt;/em&gt;, &lt;em&gt;=lt=&lt;/em&gt;,\n&lt;em&gt;=le=&lt;/em&gt;, &lt;em&gt;=ge=&lt;/em&gt;, and &lt;em&gt;=gt=&lt;/em&gt;.\nThey stand for \&quot;==\&quot;, \&quot;!=\&quot;, \&quot;&amp;lt;\&quot;, \&quot;&amp;lt;=\&quot;,\n\&quot;&amp;gt;=\&quot;, \&quot;&amp;gt;\&quot; respectively.
    # @option opts [String] :view The view of the activities to materialize
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_activities_get(cluster_name, service_name, service_name2, cluster_name2, opts = {})
      api_v11_clusters_cluster_name_services_service_name_activities_get_with_http_info(cluster_name, service_name, service_name2, cluster_name2, opts)
      return nil
    end

    # 
    # Read all activities in the system
    # @param cluster_name The name of the cluster
    # @param service_name The name of the service
    # @param service_name2 
    # @param cluster_name2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :max_results The maximum number of activities to return.
    # @option opts [String] :result_offset Specified the offset of activities to return.
    # @option opts [String] :query The query to perform to find activities in the system. By default,\nthis call returns top level (i.e. root) activities that have currently\nstarted.\n&lt;p&gt;\nThe query specifies the intersection of a list of constraints,\njoined together with semicolons (without spaces). For example:\n&lt;/p&gt;\n&lt;dl&gt;\n&lt;dt&gt;status==started;parent==&lt;/dt&gt;\n&lt;dd&gt;looks for running root activities. This is also the\ndefault query.&lt;/dd&gt;\n&lt;dt&gt;status==failed;finishTime=gt=2012-04-01T20:30:00.000Z&lt;/dt&gt;\n&lt;dd&gt;looks for failed activities after the given date time.&lt;/dd&gt;\n&lt;dt&gt;name==Pi Estimator;startTime=gt=2012-04-01T20:30:00.000Z&lt;/dt&gt;\n&lt;dd&gt;looks for activities started after the given date time,\nwith the name of \&quot;Pi Estimator\&quot;.&lt;/dd&gt;\n&lt;dt&gt;startTime=lt=2012-01-02T00:00:00.000Z;finishTime=ge=2012-01-01T00:00:00.000Z&lt;/dt&gt;\n&lt;dd&gt;looks for activities that are active on 2012 New Year&#39;s Day.\nNote that they may start before or finish after that day.&lt;/dd&gt;\n&lt;dt&gt;status==failed;parent==000014-20120425161321-oozie-joe&lt;/dt&gt;\n&lt;dd&gt;looks for failed child activities of the given parent\nactivity id.&lt;/dd&gt;\n&lt;dt&gt;status==started;metrics.cpu_user=gt=10&lt;/dt&gt;\n&lt;dd&gt;looks for started activities that are using more than 10 cores\nper second.&lt;/dd&gt;\n&lt;dt&gt;type==hive;metrics.user==bc;finishTime=gt=2012-04-01T20:30:00.000Z&lt;/dt&gt;\n&lt;dd&gt;looks for all hive queries submitted by user bc after the\ngiven date time.&lt;/dd&gt;\n&lt;/dl&gt;\n\nYou may query any fields present in the ApiActivity object. You can\nalso query by activity metric values using the &lt;em&gt;metrics.*&lt;/em&gt;\nsyntax. Values for date time fields should be ISO8601 timestamps.\n&lt;p&gt;\nThe valid comparators are &lt;em&gt;==&lt;/em&gt;, &lt;em&gt;!=&lt;/em&gt;, &lt;em&gt;=lt=&lt;/em&gt;,\n&lt;em&gt;=le=&lt;/em&gt;, &lt;em&gt;=ge=&lt;/em&gt;, and &lt;em&gt;=gt=&lt;/em&gt;.\nThey stand for \&quot;==\&quot;, \&quot;!=\&quot;, \&quot;&amp;lt;\&quot;, \&quot;&amp;lt;=\&quot;,\n\&quot;&amp;gt;=\&quot;, \&quot;&amp;gt;\&quot; respectively.
    # @option opts [String] :view The view of the activities to materialize
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_activities_get_with_http_info(cluster_name, service_name, service_name2, cluster_name2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_activities_get ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_activities_get" if cluster_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_activities_get" if service_name.nil?
      
      # verify the required parameter 'service_name2' is set
      fail "Missing the required parameter 'service_name2' when calling api_v11_clusters_cluster_name_services_service_name_activities_get" if service_name2.nil?
      
      # verify the required parameter 'cluster_name2' is set
      fail "Missing the required parameter 'cluster_name2' when calling api_v11_clusters_cluster_name_services_service_name_activities_get" if cluster_name2.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/activities".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'serviceName' + '}', service_name2.to_s).sub('{' + 'clusterName' + '}', cluster_name2.to_s)

      # query parameters
      query_params = {}
      query_params[:'maxResults'] = opts[:'max_results'] if opts[:'max_results']
      query_params[:'resultOffset'] = opts[:'result_offset'] if opts[:'result_offset']
      query_params[:'query'] = opts[:'query'] if opts[:'query']
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_activities_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a specific activity in the system
    # @param cluster_name The name of the cluster
    # @param service_name The name of the service
    # @param activity_id The id of the activity to retrieve
    # @param service_name2 
    # @param cluster_name2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the activity to materialize
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_activities_activity_id_get(cluster_name, service_name, activity_id, service_name2, cluster_name2, opts = {})
      api_v11_clusters_cluster_name_services_service_name_activities_activity_id_get_with_http_info(cluster_name, service_name, activity_id, service_name2, cluster_name2, opts)
      return nil
    end

    # 
    # Returns a specific activity in the system
    # @param cluster_name The name of the cluster
    # @param service_name The name of the service
    # @param activity_id The id of the activity to retrieve
    # @param service_name2 
    # @param cluster_name2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the activity to materialize
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_activities_activity_id_get_with_http_info(cluster_name, service_name, activity_id, service_name2, cluster_name2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_activities_activity_id_get ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_get" if cluster_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_get" if service_name.nil?
      
      # verify the required parameter 'activity_id' is set
      fail "Missing the required parameter 'activity_id' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_get" if activity_id.nil?
      
      # verify the required parameter 'service_name2' is set
      fail "Missing the required parameter 'service_name2' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_get" if service_name2.nil?
      
      # verify the required parameter 'cluster_name2' is set
      fail "Missing the required parameter 'cluster_name2' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_get" if cluster_name2.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/activities/{activityId}".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'activityId' + '}', activity_id.to_s).sub('{' + 'serviceName' + '}', service_name2.to_s).sub('{' + 'clusterName' + '}', cluster_name2.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_activities_activity_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the child activities
    # @param cluster_name The name of the cluster
    # @param service_name The name of the service
    # @param activity_id The id of the activity
    # @param service_name2 
    # @param cluster_name2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :max_results The maximum number of activities to return.
    # @option opts [String] :result_offset Specified the offset of activities to return.
    # @option opts [String] :view The view of the children to materialize
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_activities_activity_id_children_get(cluster_name, service_name, activity_id, service_name2, cluster_name2, opts = {})
      api_v11_clusters_cluster_name_services_service_name_activities_activity_id_children_get_with_http_info(cluster_name, service_name, activity_id, service_name2, cluster_name2, opts)
      return nil
    end

    # 
    # Returns the child activities
    # @param cluster_name The name of the cluster
    # @param service_name The name of the service
    # @param activity_id The id of the activity
    # @param service_name2 
    # @param cluster_name2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :max_results The maximum number of activities to return.
    # @option opts [String] :result_offset Specified the offset of activities to return.
    # @option opts [String] :view The view of the children to materialize
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_activities_activity_id_children_get_with_http_info(cluster_name, service_name, activity_id, service_name2, cluster_name2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_activities_activity_id_children_get ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_children_get" if cluster_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_children_get" if service_name.nil?
      
      # verify the required parameter 'activity_id' is set
      fail "Missing the required parameter 'activity_id' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_children_get" if activity_id.nil?
      
      # verify the required parameter 'service_name2' is set
      fail "Missing the required parameter 'service_name2' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_children_get" if service_name2.nil?
      
      # verify the required parameter 'cluster_name2' is set
      fail "Missing the required parameter 'cluster_name2' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_children_get" if cluster_name2.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/activities/{activityId}/children".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'activityId' + '}', activity_id.to_s).sub('{' + 'serviceName' + '}', service_name2.to_s).sub('{' + 'clusterName' + '}', cluster_name2.to_s)

      # query parameters
      query_params = {}
      query_params[:'maxResults'] = opts[:'max_results'] if opts[:'max_results']
      query_params[:'resultOffset'] = opts[:'result_offset'] if opts[:'result_offset']
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_activities_activity_id_children_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Fetch metric readings for a particular activity.\n&lt;p&gt;\nBy default, this call will look up all metrics available for the activity. If\nonly specific metrics are desired, use the &lt;i&gt;metrics&lt;/i&gt; parameter.\n&lt;p&gt;\nBy default, the returned results correspond to a 5 minute window based on\nthe provided end time (which defaults to the current server time). The\n&lt;i&gt;from&lt;/i&gt; and &lt;i&gt;to&lt;/i&gt; parameters can be used to control the window\nbeing queried. A maximum window of 3 hours is enforced.\n&lt;p&gt;\nWhen requesting a \&quot;full\&quot; view, aside from the extended properties of the\nreturned metric data, the collection will also contain information about\nall metrics available for the activity, even if no readings are available\nin the requested window.
    # @param cluster_name The name of the cluster.
    # @param service_name The name of the service.
    # @param activity_id The name of the activity.
    # @param service_name2 
    # @param cluster_name2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Start of the period to query.
    # @option opts [String] :to End of the period to query.
    # @option opts [String] :metrics Filter for which metrics to query.
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_activities_activity_id_metrics_get(cluster_name, service_name, activity_id, service_name2, cluster_name2, opts = {})
      api_v11_clusters_cluster_name_services_service_name_activities_activity_id_metrics_get_with_http_info(cluster_name, service_name, activity_id, service_name2, cluster_name2, opts)
      return nil
    end

    # 
    # Fetch metric readings for a particular activity.\n&lt;p&gt;\nBy default, this call will look up all metrics available for the activity. If\nonly specific metrics are desired, use the &lt;i&gt;metrics&lt;/i&gt; parameter.\n&lt;p&gt;\nBy default, the returned results correspond to a 5 minute window based on\nthe provided end time (which defaults to the current server time). The\n&lt;i&gt;from&lt;/i&gt; and &lt;i&gt;to&lt;/i&gt; parameters can be used to control the window\nbeing queried. A maximum window of 3 hours is enforced.\n&lt;p&gt;\nWhen requesting a \&quot;full\&quot; view, aside from the extended properties of the\nreturned metric data, the collection will also contain information about\nall metrics available for the activity, even if no readings are available\nin the requested window.
    # @param cluster_name The name of the cluster.
    # @param service_name The name of the service.
    # @param activity_id The name of the activity.
    # @param service_name2 
    # @param cluster_name2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Start of the period to query.
    # @option opts [String] :to End of the period to query.
    # @option opts [String] :metrics Filter for which metrics to query.
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_activities_activity_id_metrics_get_with_http_info(cluster_name, service_name, activity_id, service_name2, cluster_name2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_activities_activity_id_metrics_get ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_metrics_get" if cluster_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_metrics_get" if service_name.nil?
      
      # verify the required parameter 'activity_id' is set
      fail "Missing the required parameter 'activity_id' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_metrics_get" if activity_id.nil?
      
      # verify the required parameter 'service_name2' is set
      fail "Missing the required parameter 'service_name2' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_metrics_get" if service_name2.nil?
      
      # verify the required parameter 'cluster_name2' is set
      fail "Missing the required parameter 'cluster_name2' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_metrics_get" if cluster_name2.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/activities/{activityId}/metrics".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'activityId' + '}', activity_id.to_s).sub('{' + 'serviceName' + '}', service_name2.to_s).sub('{' + 'clusterName' + '}', cluster_name2.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'metrics'] = opts[:'metrics'] if opts[:'metrics']
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_activities_activity_id_metrics_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a list of similar activities
    # @param cluster_name The name of the cluster
    # @param service_name The name of the service
    # @param activity_id The id of the activity
    # @param service_name2 
    # @param cluster_name2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the activities to materialize
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_activities_activity_id_similar_get(cluster_name, service_name, activity_id, service_name2, cluster_name2, opts = {})
      api_v11_clusters_cluster_name_services_service_name_activities_activity_id_similar_get_with_http_info(cluster_name, service_name, activity_id, service_name2, cluster_name2, opts)
      return nil
    end

    # 
    # Returns a list of similar activities
    # @param cluster_name The name of the cluster
    # @param service_name The name of the service
    # @param activity_id The id of the activity
    # @param service_name2 
    # @param cluster_name2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the activities to materialize
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_activities_activity_id_similar_get_with_http_info(cluster_name, service_name, activity_id, service_name2, cluster_name2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_activities_activity_id_similar_get ..."
      end
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_similar_get" if cluster_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_similar_get" if service_name.nil?
      
      # verify the required parameter 'activity_id' is set
      fail "Missing the required parameter 'activity_id' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_similar_get" if activity_id.nil?
      
      # verify the required parameter 'service_name2' is set
      fail "Missing the required parameter 'service_name2' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_similar_get" if service_name2.nil?
      
      # verify the required parameter 'cluster_name2' is set
      fail "Missing the required parameter 'cluster_name2' when calling api_v11_clusters_cluster_name_services_service_name_activities_activity_id_similar_get" if cluster_name2.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/activities/{activityId}/similar".sub('{format}','json').sub('{' + 'clusterName' + '}', cluster_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'activityId' + '}', activity_id.to_s).sub('{' + 'serviceName' + '}', service_name2.to_s).sub('{' + 'clusterName' + '}', cluster_name2.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_activities_activity_id_similar_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Download a zip-compressed archive of the client configuration,\nof a specific service. This resource does not require any authentication.
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_client_config_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_client_config_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Download a zip-compressed archive of the client configuration,\nof a specific service. This resource does not require any authentication.
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_client_config_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_client_config_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_client_config_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_client_config_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/clientConfig".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_client_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # List active service commands.
    # @param service_name The service to which the role belongs.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # List active service commands.
    # @param service_name The service to which the role belongs.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates the Oozie Database Schema in the configured database.\nThis command does not create database. This command creates only tables\nrequired by Oozie. To create database, please refer to oozieCreateEmbeddedDatabase()\n\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param service_name Name of the Oozie service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_create_oozie_db_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_create_oozie_db_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Creates the Oozie Database Schema in the configured database.\nThis command does not create database. This command creates only tables\nrequired by Oozie. To create database, please refer to oozieCreateEmbeddedDatabase()\n\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param service_name Name of the Oozie service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_create_oozie_db_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_create_oozie_db_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_create_oozie_db_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_create_oozie_db_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/createOozieDb".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_create_oozie_db_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates the home directory of a Solr service in HDFS.\n\n&lt;p&gt;\nAvailable since API v4.
    # @param service_name The Solr service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_create_solr_hdfs_home_dir_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_create_solr_hdfs_home_dir_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Creates the home directory of a Solr service in HDFS.\n\n&lt;p&gt;\nAvailable since API v4.
    # @param service_name The Solr service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_create_solr_hdfs_home_dir_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_create_solr_hdfs_home_dir_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_create_solr_hdfs_home_dir_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_create_solr_hdfs_home_dir_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/createSolrHdfsHomeDir".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_create_solr_hdfs_home_dir_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates the user directory of a Sqoop service in HDFS.\n\n&lt;p&gt;\nAvailable since API v4.
    # @param service_name The Sqoop service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_create_sqoop_user_dir_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_create_sqoop_user_dir_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Creates the user directory of a Sqoop service in HDFS.\n\n&lt;p&gt;\nAvailable since API v4.
    # @param service_name The Sqoop service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_create_sqoop_user_dir_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_create_sqoop_user_dir_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_create_sqoop_user_dir_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_create_sqoop_user_dir_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/createSqoopUserDir".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_create_sqoop_user_dir_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Decommission roles of a service.\n&lt;p&gt;\nFor HBase services, the list should contain names of RegionServers to\ndecommission.\n&lt;p&gt;\nFor HDFS services, the list should contain names of DataNodes to\ndecommission.
    # @param service_name The HBase service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_decommission_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_decommission_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Decommission roles of a service.\n&lt;p&gt;\nFor HBase services, the list should contain names of RegionServers to\ndecommission.\n&lt;p&gt;\nFor HDFS services, the list should contain names of DataNodes to\ndecommission.
    # @param service_name The HBase service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_decommission_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_decommission_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_decommission_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_decommission_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/decommission".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_decommission_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Deploy a service&#39;s client configuration.\n&lt;p&gt;\nThe client configuration is deployed to the hosts where the given roles\nare running.\n&lt;p/&gt;\nAdded in v3: passing null for the role name list will deploy client configs\nto all known service roles.\nAdded in v6: passing an empty role name list will deploy client configs\nto all known service roles.\n&lt;p/&gt;\nIn Cloudera Manager 5.3 and newer, client configurations are fully managed,\nmeaning that the server maintains state about which client configurations\nshould exist and be managed by alternatives, and the agents actively\nrectify their hosts with this state. Consequently, if this API call is made\nwith a specific set of roles, Cloudera Manager will deactivate, from\nalternatives, any deployed client configs from any non-gateway roles that\nare &lt;em&gt;not&lt;/em&gt; specified as arguments. Gateway roles are always preserved,\nand calling this API with an empty or null argument continues to deploy to\nall roles.\n&lt;p/&gt;
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_deploy_client_config_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_deploy_client_config_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Deploy a service&#39;s client configuration.\n&lt;p&gt;\nThe client configuration is deployed to the hosts where the given roles\nare running.\n&lt;p/&gt;\nAdded in v3: passing null for the role name list will deploy client configs\nto all known service roles.\nAdded in v6: passing an empty role name list will deploy client configs\nto all known service roles.\n&lt;p/&gt;\nIn Cloudera Manager 5.3 and newer, client configurations are fully managed,\nmeaning that the server maintains state about which client configurations\nshould exist and be managed by alternatives, and the agents actively\nrectify their hosts with this state. Consequently, if this API call is made\nwith a specific set of roles, Cloudera Manager will deactivate, from\nalternatives, any deployed client configs from any non-gateway roles that\nare &lt;em&gt;not&lt;/em&gt; specified as arguments. Gateway roles are always preserved,\nand calling this API with an empty or null argument continues to deploy to\nall roles.\n&lt;p/&gt;
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_deploy_client_config_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_deploy_client_config_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_deploy_client_config_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_deploy_client_config_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/deployClientConfig".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_deploy_client_config_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Disable high availability (HA) for JobTracker.\n\nAs part of disabling HA, any services that depend on the MapReduce service\nbeing modified will be stopped. The command arguments provide options to\nspecify name of JobTracker that will be preserved. The Command will\nredeploy the client configurations for services of the cluster after HA\nhas been disabled.
    # @param service_name The MapReduce service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_disable_jt_ha_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_disable_jt_ha_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Disable high availability (HA) for JobTracker.\n\nAs part of disabling HA, any services that depend on the MapReduce service\nbeing modified will be stopped. The command arguments provide options to\nspecify name of JobTracker that will be preserved. The Command will\nredeploy the client configurations for services of the cluster after HA\nhas been disabled.
    # @param service_name The MapReduce service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_disable_jt_ha_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_disable_jt_ha_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_disable_jt_ha_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_disable_jt_ha_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/disableJtHa".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_disable_jt_ha_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Disable high availability (HA) for ResourceManager.\n\nAs part of disabling HA, any services that depend on the YARN service\nbeing modified will be stopped. The command arguments provide options to\nspecify name of ResourceManager that will be preserved. The command will\nredeploy the client configurations for services of the cluster after HA\nhas been disabled.
    # @param service_name The YARN service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_disable_rm_ha_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_disable_rm_ha_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Disable high availability (HA) for ResourceManager.\n\nAs part of disabling HA, any services that depend on the YARN service\nbeing modified will be stopped. The command arguments provide options to\nspecify name of ResourceManager that will be preserved. The command will\nredeploy the client configurations for services of the cluster after HA\nhas been disabled.
    # @param service_name The YARN service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_disable_rm_ha_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_disable_rm_ha_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_disable_rm_ha_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_disable_rm_ha_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/disableRmHa".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_disable_rm_ha_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Enable high availability (HA) for a JobTracker.\n&lt;p&gt;\nThis command only applies to CDH4 MapReduce services.\n&lt;p&gt;\nThe command will create a new JobTracker on the specified host and then\ncreate an active/standby pair with the existing JobTracker. Autofailover\nwill be enabled using ZooKeeper. A ZNode will be created for this purpose.\nCommand arguments provide option to forcefully create this ZNode if one\nalready exists. A node may already exists if JobTracker was previously\nenabled in HA mode but HA mode was disabled later on. The ZNode is not\ndeleted when HA is disabled.\n&lt;p&gt;\nAs part of enabling HA, any services that depends on the MapReduce service\nbeing modified will be stopped. Command will redeploy the client\nconfigurations for services of the cluster after HA has been enabled.
    # @param service_name The MapReduce service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_enable_jt_ha_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_enable_jt_ha_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Enable high availability (HA) for a JobTracker.\n&lt;p&gt;\nThis command only applies to CDH4 MapReduce services.\n&lt;p&gt;\nThe command will create a new JobTracker on the specified host and then\ncreate an active/standby pair with the existing JobTracker. Autofailover\nwill be enabled using ZooKeeper. A ZNode will be created for this purpose.\nCommand arguments provide option to forcefully create this ZNode if one\nalready exists. A node may already exists if JobTracker was previously\nenabled in HA mode but HA mode was disabled later on. The ZNode is not\ndeleted when HA is disabled.\n&lt;p&gt;\nAs part of enabling HA, any services that depends on the MapReduce service\nbeing modified will be stopped. Command will redeploy the client\nconfigurations for services of the cluster after HA has been enabled.
    # @param service_name The MapReduce service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_enable_jt_ha_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_enable_jt_ha_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_enable_jt_ha_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_enable_jt_ha_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/enableJtHa".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_enable_jt_ha_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Enable high availability (HA) for a YARN ResourceManager.\n&lt;p&gt;\nThis command only applies to CDH5+ YARN services.\n&lt;p&gt;\nThe command will create a new ResourceManager on the specified host and then\ncreate an active/standby pair with the existing ResourceManager. Autofailover\nwill be enabled using ZooKeeper.\n&lt;p&gt;\nAs part of enabling HA, any services that depends on the YARN service\nbeing modified will be stopped. Command will redeploy the client\nconfigurations for services of the cluster after HA has been enabled.
    # @param service_name The YARN service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_enable_rm_ha_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_enable_rm_ha_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Enable high availability (HA) for a YARN ResourceManager.\n&lt;p&gt;\nThis command only applies to CDH5+ YARN services.\n&lt;p&gt;\nThe command will create a new ResourceManager on the specified host and then\ncreate an active/standby pair with the existing ResourceManager. Autofailover\nwill be enabled using ZooKeeper.\n&lt;p&gt;\nAs part of enabling HA, any services that depends on the YARN service\nbeing modified will be stopped. Command will redeploy the client\nconfigurations for services of the cluster after HA has been enabled.
    # @param service_name The YARN service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_enable_rm_ha_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_enable_rm_ha_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_enable_rm_ha_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_enable_rm_ha_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/enableRmHa".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_enable_rm_ha_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Put the service into maintenance mode. This is a synchronous command. The\nresult is known immediately upon return.\n\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_enter_maintenance_mode_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_enter_maintenance_mode_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Put the service into maintenance mode. This is a synchronous command. The\nresult is known immediately upon return.\n\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_enter_maintenance_mode_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_enter_maintenance_mode_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_enter_maintenance_mode_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_enter_maintenance_mode_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/enterMaintenanceMode".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_enter_maintenance_mode_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Take the service out of maintenance mode. This is a synchronous command.\nThe result is known immediately upon return.\n\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_exit_maintenance_mode_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_exit_maintenance_mode_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Take the service out of maintenance mode. This is a synchronous command.\nThe result is known immediately upon return.\n\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_exit_maintenance_mode_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_exit_maintenance_mode_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_exit_maintenance_mode_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_exit_maintenance_mode_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/exitMaintenanceMode".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_exit_maintenance_mode_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Prepare and start a service.\n\n&lt;p&gt;\nPerform all the steps needed to prepare the service and start it.\n&lt;/p&gt;\n\n&lt;p&gt;\nAvailable since API v7.\n&lt;/p&gt;
    # @param service_name The name of the cluster.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_first_run_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_first_run_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Prepare and start a service.\n\n&lt;p&gt;\nPerform all the steps needed to prepare the service and start it.\n&lt;/p&gt;\n\n&lt;p&gt;\nAvailable since API v7.\n&lt;/p&gt;
    # @param service_name The name of the cluster.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_first_run_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_first_run_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_first_run_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_first_run_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/firstRun".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_first_run_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates the root directory of an HBase service.
    # @param service_name The HBase service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hbase_create_root_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hbase_create_root_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Creates the root directory of an HBase service.
    # @param service_name The HBase service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hbase_create_root_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hbase_create_root_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hbase_create_root_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hbase_create_root_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hbaseCreateRoot".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hbase_create_root_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Upgrade HBase data in HDFS and ZooKeeper as part of upgrade from CDH4 to CDH5.\n&lt;p/&gt;\nThis is required in order to run HBase after upgrade.\n&lt;p/&gt;\nAvailable since API v6.
    # @param service_name The HBase service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hbase_upgrade_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hbase_upgrade_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Upgrade HBase data in HDFS and ZooKeeper as part of upgrade from CDH4 to CDH5.\n&lt;p/&gt;\nThis is required in order to run HBase after upgrade.\n&lt;p/&gt;\nAvailable since API v6.
    # @param service_name The HBase service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hbase_upgrade_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hbase_upgrade_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hbase_upgrade_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hbase_upgrade_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hbaseUpgrade".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hbase_upgrade_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates a tmp directory on the HDFS filesystem.\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param service_name Name of the HDFS service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_create_tmp_dir_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hdfs_create_tmp_dir_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Creates a tmp directory on the HDFS filesystem.\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param service_name Name of the HDFS service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_create_tmp_dir_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_create_tmp_dir_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_create_tmp_dir_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_create_tmp_dir_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hdfsCreateTmpDir".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_create_tmp_dir_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Disable auto-failover for a highly available HDFS nameservice.\n&lt;p&gt;\nThe command will modify the nameservice&#39;s NameNodes configuration to\ndisable automatic failover, and delete the existing failover controllers.\n&lt;p&gt;\nThe ZooKeeper dependency of the service will not be removed.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_auto_failover_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_auto_failover_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Disable auto-failover for a highly available HDFS nameservice.\n&lt;p&gt;\nThe command will modify the nameservice&#39;s NameNodes configuration to\ndisable automatic failover, and delete the existing failover controllers.\n&lt;p&gt;\nThe ZooKeeper dependency of the service will not be removed.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_auto_failover_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_auto_failover_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_auto_failover_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_auto_failover_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hdfsDisableAutoFailover".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_auto_failover_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Disable high availability (HA) for an HDFS NameNode.\n&lt;p&gt;\nThe NameNode to be kept must be running before HA can be disabled.\n&lt;p&gt;\nAs part of disabling HA, any services that depend on the HDFS service being\nmodified will be stopped. The command arguments provide options to\nre-start these services and to re-deploy the client configurations for\nservices of the cluster after HA has been disabled.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_ha_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_ha_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Disable high availability (HA) for an HDFS NameNode.\n&lt;p&gt;\nThe NameNode to be kept must be running before HA can be disabled.\n&lt;p&gt;\nAs part of disabling HA, any services that depend on the HDFS service being\nmodified will be stopped. The command arguments provide options to\nre-start these services and to re-deploy the client configurations for\nservices of the cluster after HA has been disabled.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_ha_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_ha_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_ha_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_ha_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hdfsDisableHa".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_ha_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Disable High Availability (HA) with Automatic Failover for an HDFS NameNode.\n&lt;p&gt;\nAs part of disabling HA, any services that depend on the HDFS service being\nmodified will be stopped. The command will delete the Standby NameNode\nassociated with the specified NameNode. Any FailoverControllers associated\nwith the NameNode&#39;s nameservice are also deleted. A SecondaryNameNode\nis created on the host specified by the arugments.\n&lt;p&gt;\nIf no nameservices uses Quorum Journal after HA is disabled for the specified\nnameservice, then all JournalNodes are also deleted.\n&lt;p&gt;\nThen, HDFS service is restarted and all services that were stopped\nare started again afterwards.\nFinally, client configs for HDFS and its depedents will be re-deployed.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_nn_ha_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_nn_ha_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Disable High Availability (HA) with Automatic Failover for an HDFS NameNode.\n&lt;p&gt;\nAs part of disabling HA, any services that depend on the HDFS service being\nmodified will be stopped. The command will delete the Standby NameNode\nassociated with the specified NameNode. Any FailoverControllers associated\nwith the NameNode&#39;s nameservice are also deleted. A SecondaryNameNode\nis created on the host specified by the arugments.\n&lt;p&gt;\nIf no nameservices uses Quorum Journal after HA is disabled for the specified\nnameservice, then all JournalNodes are also deleted.\n&lt;p&gt;\nThen, HDFS service is restarted and all services that were stopped\nare started again afterwards.\nFinally, client configs for HDFS and its depedents will be re-deployed.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_nn_ha_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_nn_ha_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_nn_ha_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_nn_ha_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hdfsDisableNnHa".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_disable_nn_ha_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Enable auto-failover for an HDFS nameservice.\n&lt;p&gt;\nThis command requires that the nameservice exists, and HA has been\nconfigured for that nameservice.\n&lt;p&gt;\nThe command will create the needed failover controllers, perform the\nneeded initialization and configuration, and will start the new roles.\nThe existing NameNodes which are part of the nameservice will be\nre-started in the process.\n&lt;p&gt;\nThis process may require changing the service&#39;s configuration, to add a\ndependency on the provided ZooKeeper service. This will be done if such a\ndependency has not been configured yet, and will cause roles that are\nnot affected by this command to show an \&quot;outdated configuration\&quot; status.\n&lt;p&gt;\nIf a ZooKeeper dependency has already been set up by some other means,\nit does not need to be provided in the command arguments.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_auto_failover_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_auto_failover_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Enable auto-failover for an HDFS nameservice.\n&lt;p&gt;\nThis command requires that the nameservice exists, and HA has been\nconfigured for that nameservice.\n&lt;p&gt;\nThe command will create the needed failover controllers, perform the\nneeded initialization and configuration, and will start the new roles.\nThe existing NameNodes which are part of the nameservice will be\nre-started in the process.\n&lt;p&gt;\nThis process may require changing the service&#39;s configuration, to add a\ndependency on the provided ZooKeeper service. This will be done if such a\ndependency has not been configured yet, and will cause roles that are\nnot affected by this command to show an \&quot;outdated configuration\&quot; status.\n&lt;p&gt;\nIf a ZooKeeper dependency has already been set up by some other means,\nit does not need to be provided in the command arguments.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_auto_failover_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_auto_failover_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_auto_failover_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_auto_failover_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hdfsEnableAutoFailover".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_auto_failover_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Enable high availability (HA) for an HDFS NameNode.\n&lt;p&gt;\nThe command will set up the given \&quot;active\&quot; and \&quot;stand-by\&quot; NameNodes as\nan HA pair. Both nodes need to already exist.\n&lt;p&gt;\nIf there is a SecondaryNameNode associated with either given NameNode\ninstance, it will be deleted.\n&lt;p&gt;\nNote that while the shared edits path may be different for both nodes,\nthey need to point to the same underlying storage (e.g., an NFS share).\n&lt;p&gt;\nAs part of enabling HA, any services that depend on the HDFS service being\nmodified will be stopped. The command arguments provide options to\nre-start these services and to re-deploy the client configurations for\nservices of the cluster after HA has been enabled.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_ha_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_ha_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Enable high availability (HA) for an HDFS NameNode.\n&lt;p&gt;\nThe command will set up the given \&quot;active\&quot; and \&quot;stand-by\&quot; NameNodes as\nan HA pair. Both nodes need to already exist.\n&lt;p&gt;\nIf there is a SecondaryNameNode associated with either given NameNode\ninstance, it will be deleted.\n&lt;p&gt;\nNote that while the shared edits path may be different for both nodes,\nthey need to point to the same underlying storage (e.g., an NFS share).\n&lt;p&gt;\nAs part of enabling HA, any services that depend on the HDFS service being\nmodified will be stopped. The command arguments provide options to\nre-start these services and to re-deploy the client configurations for\nservices of the cluster after HA has been enabled.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_ha_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_ha_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_ha_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_ha_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hdfsEnableHa".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_ha_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Enable High Availability (HA) with Automatic Failover for an HDFS NameNode.\n&lt;p&gt;\nThe command will create a Standby NameNode for the given nameservice\nand create FailoverControllers for both Active and Standby NameNodes.\nThe SecondaryNameNode associated with the Active NameNode will be deleted.\n&lt;p&gt;\nThe command will also create JournalNodes needed for HDFS HA if they\ndo not already exist.\n&lt;p&gt;\nAs part of enabling HA, any services that depend on the HDFS service being\nmodified will be stopped. They will be restarted after HA has been enabled.\nFinally, client configs for HDFS and its depedents will be re-deployed.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_nn_ha_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_nn_ha_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Enable High Availability (HA) with Automatic Failover for an HDFS NameNode.\n&lt;p&gt;\nThe command will create a Standby NameNode for the given nameservice\nand create FailoverControllers for both Active and Standby NameNodes.\nThe SecondaryNameNode associated with the Active NameNode will be deleted.\n&lt;p&gt;\nThe command will also create JournalNodes needed for HDFS HA if they\ndo not already exist.\n&lt;p&gt;\nAs part of enabling HA, any services that depend on the HDFS service being\nmodified will be stopped. They will be restarted after HA has been enabled.\nFinally, client configs for HDFS and its depedents will be re-deployed.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_nn_ha_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_nn_ha_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_nn_ha_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_nn_ha_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hdfsEnableNnHa".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_enable_nn_ha_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Initiate a failover in an HDFS HA NameNode pair.\n&lt;p&gt;\nThe arguments should contain the names of the two NameNodes in\nthe HA pair. The first one should be the currently active NameNode,\nthe second one the NameNode to be made active.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :force Whether to force failover.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_failover_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hdfs_failover_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Initiate a failover in an HDFS HA NameNode pair.\n&lt;p&gt;\nThe arguments should contain the names of the two NameNodes in\nthe HA pair. The first one should be the currently active NameNode,\nthe second one the NameNode to be made active.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :force Whether to force failover.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_failover_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_failover_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_failover_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_failover_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hdfsFailover".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if opts[:'force']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_failover_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Finalizes the rolling upgrade for HDFS by updating the NameNode\nmetadata permanently to the next version. Should be done after\ndoing a rolling upgrade to a CDH version &gt;= 5.2.0.\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_finalize_rolling_upgrade_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hdfs_finalize_rolling_upgrade_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Finalizes the rolling upgrade for HDFS by updating the NameNode\nmetadata permanently to the next version. Should be done after\ndoing a rolling upgrade to a CDH version &gt;= 5.2.0.\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_finalize_rolling_upgrade_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_finalize_rolling_upgrade_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_finalize_rolling_upgrade_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_finalize_rolling_upgrade_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hdfsFinalizeRollingUpgrade".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_finalize_rolling_upgrade_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Roll the edits of an HDFS NameNode or Nameservice.\n&lt;p&gt;\nAvailable since API v3.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_roll_edits_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hdfs_roll_edits_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Roll the edits of an HDFS NameNode or Nameservice.\n&lt;p&gt;\nAvailable since API v3.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_roll_edits_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_roll_edits_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_roll_edits_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_roll_edits_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hdfsRollEdits".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_roll_edits_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Upgrade HDFS Metadata as part of a major version upgrade.\n&lt;p/&gt;\nWhen doing a major version upgrade for HDFS, it is necessary to start HDFS\nin a special mode where it will do any necessary upgrades of stored\nmetadata. Trying to start HDFS normally will result in an error message and\nthe NameNode(s) failing to start.\n&lt;p/&gt;\nThe metadata upgrade must eventually be finalized, using the\nhdfsFinalizeMetadataUpgrade command on the NameNode.\n&lt;p/&gt;\nAvailable since API v6.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_upgrade_metadata_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hdfs_upgrade_metadata_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Upgrade HDFS Metadata as part of a major version upgrade.\n&lt;p/&gt;\nWhen doing a major version upgrade for HDFS, it is necessary to start HDFS\nin a special mode where it will do any necessary upgrades of stored\nmetadata. Trying to start HDFS normally will result in an error message and\nthe NameNode(s) failing to start.\n&lt;p/&gt;\nThe metadata upgrade must eventually be finalized, using the\nhdfsFinalizeMetadataUpgrade command on the NameNode.\n&lt;p/&gt;\nAvailable since API v6.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hdfs_upgrade_metadata_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_upgrade_metadata_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_upgrade_metadata_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hdfs_upgrade_metadata_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hdfsUpgradeMetadata".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hdfs_upgrade_metadata_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create the Hive user directory\n&lt;p&gt;\nAvailable since API v4.\n&lt;/p&gt;
    # @param service_name The Hive service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hive_create_hive_user_dir_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hive_create_hive_user_dir_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Create the Hive user directory\n&lt;p&gt;\nAvailable since API v4.\n&lt;/p&gt;
    # @param service_name The Hive service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hive_create_hive_user_dir_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hive_create_hive_user_dir_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hive_create_hive_user_dir_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hive_create_hive_user_dir_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hiveCreateHiveUserDir".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hive_create_hive_user_dir_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create the Hive warehouse directory, on Hive services.\n&lt;p&gt;\nAvailable since API v3.\n&lt;/p&gt;
    # @param service_name The Hive service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hive_create_hive_warehouse_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hive_create_hive_warehouse_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Create the Hive warehouse directory, on Hive services.\n&lt;p&gt;\nAvailable since API v3.\n&lt;/p&gt;
    # @param service_name The Hive service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hive_create_hive_warehouse_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hive_create_hive_warehouse_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hive_create_hive_warehouse_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hive_create_hive_warehouse_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hiveCreateHiveWarehouse".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hive_create_hive_warehouse_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create the Hive Metastore Database. Only works with embedded postgresql\ndatabase.\n&lt;p&gt;\nThis command is to be run whenever a new user and database needs to be\ncreated in the embedded postgresql database for a Hive service. This\ncommand should usually be followed by a call to\nhiveCreateMetastoreDatabaseTables.\n&lt;p&gt;\nAvailable since API v4.
    # @param service_name Name of the Hive service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hive_create_metastore_database_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hive_create_metastore_database_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Create the Hive Metastore Database. Only works with embedded postgresql\ndatabase.\n&lt;p&gt;\nThis command is to be run whenever a new user and database needs to be\ncreated in the embedded postgresql database for a Hive service. This\ncommand should usually be followed by a call to\nhiveCreateMetastoreDatabaseTables.\n&lt;p&gt;\nAvailable since API v4.
    # @param service_name Name of the Hive service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hive_create_metastore_database_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hive_create_metastore_database_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hive_create_metastore_database_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hive_create_metastore_database_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hiveCreateMetastoreDatabase".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hive_create_metastore_database_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create the Hive Metastore Database tables.\n&lt;p&gt;\nThis command is to be run whenever a new database has been specified. Will\ndo nothing if tables already exist. Will not perform an upgrade. Only\nAvailable when all Hive Metastore Servers are stopped.\n&lt;p&gt;\nAvailable since API v3.
    # @param service_name Name of the Hive service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hive_create_metastore_database_tables_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hive_create_metastore_database_tables_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Create the Hive Metastore Database tables.\n&lt;p&gt;\nThis command is to be run whenever a new database has been specified. Will\ndo nothing if tables already exist. Will not perform an upgrade. Only\nAvailable when all Hive Metastore Servers are stopped.\n&lt;p&gt;\nAvailable since API v3.
    # @param service_name Name of the Hive service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hive_create_metastore_database_tables_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hive_create_metastore_database_tables_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hive_create_metastore_database_tables_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hive_create_metastore_database_tables_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hiveCreateMetastoreDatabaseTables".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hive_create_metastore_database_tables_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update Hive Metastore to point to a NameNode&#39;s Nameservice name instead of\nhostname.\n&lt;p&gt;\n&lt;strong&gt;Back up the Hive Metastore Database before running this command.&lt;/strong&gt;\n&lt;p&gt;\nThis command is to be run after enabling HDFS High Availability. Only\navailable when all Hive Metastore Servers are stopped.\n&lt;p&gt;\nAvailable since API v4.
    # @param service_name Name of the Hive service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hive_update_metastore_namenodes_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hive_update_metastore_namenodes_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Update Hive Metastore to point to a NameNode&#39;s Nameservice name instead of\nhostname.\n&lt;p&gt;\n&lt;strong&gt;Back up the Hive Metastore Database before running this command.&lt;/strong&gt;\n&lt;p&gt;\nThis command is to be run after enabling HDFS High Availability. Only\navailable when all Hive Metastore Servers are stopped.\n&lt;p&gt;\nAvailable since API v4.
    # @param service_name Name of the Hive service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hive_update_metastore_namenodes_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hive_update_metastore_namenodes_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hive_update_metastore_namenodes_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hive_update_metastore_namenodes_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hiveUpdateMetastoreNamenodes".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hive_update_metastore_namenodes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Upgrade Hive Metastore as part of a major version upgrade.\n&lt;p/&gt;\nWhen doing a major version upgrade for Hive, it is necessary to upgrade\ndata in the metastore database.\n&lt;p/&gt;\nAvailable since API v6.
    # @param service_name The Hive service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hive_upgrade_metastore_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hive_upgrade_metastore_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Upgrade Hive Metastore as part of a major version upgrade.\n&lt;p/&gt;\nWhen doing a major version upgrade for Hive, it is necessary to upgrade\ndata in the metastore database.\n&lt;p/&gt;\nAvailable since API v6.
    # @param service_name The Hive service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hive_upgrade_metastore_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hive_upgrade_metastore_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hive_upgrade_metastore_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hive_upgrade_metastore_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hiveUpgradeMetastore".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hive_upgrade_metastore_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create the Beeswax role&#39;s Hive warehouse directory, on Hue services.
    # @param service_name The Hue service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hue_create_hive_warehouse_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hue_create_hive_warehouse_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Create the Beeswax role&#39;s Hive warehouse directory, on Hue services.
    # @param service_name The Hue service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hue_create_hive_warehouse_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hue_create_hive_warehouse_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hue_create_hive_warehouse_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hue_create_hive_warehouse_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hueCreateHiveWarehouse".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hue_create_hive_warehouse_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Runs Hue&#39;s dumpdata command.\n\nAvailable since API v10.
    # @param service_name The name of the service
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hue_dump_db_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hue_dump_db_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Runs Hue&#39;s dumpdata command.\n\nAvailable since API v10.
    # @param service_name The name of the service
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hue_dump_db_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hue_dump_db_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hue_dump_db_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hue_dump_db_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hueDumpDb".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hue_dump_db_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Runs Hue&#39;s loaddata command.\n\nAvailable since API v10.
    # @param service_name The name of the service
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hue_load_db_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hue_load_db_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Runs Hue&#39;s loaddata command.\n\nAvailable since API v10.
    # @param service_name The name of the service
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hue_load_db_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hue_load_db_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hue_load_db_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hue_load_db_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hueLoadDb".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hue_load_db_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Runs Hue&#39;s syncdb command.\n\nAvailable since API v10.
    # @param service_name The name of the service
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_hue_sync_db_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_hue_sync_db_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Runs Hue&#39;s syncdb command.\n\nAvailable since API v10.
    # @param service_name The name of the service
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_hue_sync_db_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hue_sync_db_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hue_sync_db_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_hue_sync_db_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/hueSyncDb".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_hue_sync_db_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # &lt;strong&gt;Not needed in CM 5.0.0 Release, since Impala Catalog Database\nis not yet available in CDH as of this release.&lt;/strong&gt;\nCreate the Impala Catalog Database. Only works with embedded postgresql\ndatabase.\n&lt;p&gt;\nThis command is to be run whenever a new user and database needs to be\ncreated in the embedded postgresql database for the Impala Catalog Server.\nThis command should usually be followed by a call to\nimpalaCreateCatalogDatabaseTables.\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name Name of the Impala service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_impala_create_catalog_database_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_impala_create_catalog_database_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # &lt;strong&gt;Not needed in CM 5.0.0 Release, since Impala Catalog Database\nis not yet available in CDH as of this release.&lt;/strong&gt;\nCreate the Impala Catalog Database. Only works with embedded postgresql\ndatabase.\n&lt;p&gt;\nThis command is to be run whenever a new user and database needs to be\ncreated in the embedded postgresql database for the Impala Catalog Server.\nThis command should usually be followed by a call to\nimpalaCreateCatalogDatabaseTables.\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name Name of the Impala service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_impala_create_catalog_database_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_impala_create_catalog_database_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_impala_create_catalog_database_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_impala_create_catalog_database_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/impalaCreateCatalogDatabase".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_impala_create_catalog_database_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # &lt;strong&gt;Not needed in CM 5.0.0 Release, since Impala Catalog Database\nis not yet available in CDH as of this release.&lt;/strong&gt;\nCreate the Impala Catalog Database tables.\n&lt;p&gt;\nThis command is to be run whenever a new database has been specified. Will\ndo nothing if tables already exist. Will not perform an upgrade. Only\navailable when all Impala Catalog Servers are stopped.\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name Name of the Impala service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_impala_create_catalog_database_tables_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_impala_create_catalog_database_tables_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # &lt;strong&gt;Not needed in CM 5.0.0 Release, since Impala Catalog Database\nis not yet available in CDH as of this release.&lt;/strong&gt;\nCreate the Impala Catalog Database tables.\n&lt;p&gt;\nThis command is to be run whenever a new database has been specified. Will\ndo nothing if tables already exist. Will not perform an upgrade. Only\navailable when all Impala Catalog Servers are stopped.\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name Name of the Impala service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_impala_create_catalog_database_tables_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_impala_create_catalog_database_tables_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_impala_create_catalog_database_tables_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_impala_create_catalog_database_tables_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/impalaCreateCatalogDatabaseTables".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_impala_create_catalog_database_tables_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create the Impala user directory\n&lt;p&gt;\nAvailable since API v6.\n&lt;/p&gt;
    # @param service_name The Impala service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_impala_create_user_dir_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_impala_create_user_dir_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Create the Impala user directory\n&lt;p&gt;\nAvailable since API v6.\n&lt;/p&gt;
    # @param service_name The Impala service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_impala_create_user_dir_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_impala_create_user_dir_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_impala_create_user_dir_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_impala_create_user_dir_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/impalaCreateUserDir".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_impala_create_user_dir_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Disable high availability (HA) for an Impala Llama ApplicationMaster.\n&lt;p&gt;\nThis command only applies to CDH 5.1+ Impala services.\n&lt;p&gt;\nThe command argument specifies the name of the Llama role to be retained.\nThe other Llama role in the HA pair will be removed. As part of disabling\nHA, any services that depend on the Impala service being modified will be\nstopped. The command will redeploy the client configurations for all\nservices of the cluster after HA has been disabled.\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name The Impala service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_impala_disable_llama_ha_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_impala_disable_llama_ha_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Disable high availability (HA) for an Impala Llama ApplicationMaster.\n&lt;p&gt;\nThis command only applies to CDH 5.1+ Impala services.\n&lt;p&gt;\nThe command argument specifies the name of the Llama role to be retained.\nThe other Llama role in the HA pair will be removed. As part of disabling\nHA, any services that depend on the Impala service being modified will be\nstopped. The command will redeploy the client configurations for all\nservices of the cluster after HA has been disabled.\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name The Impala service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_impala_disable_llama_ha_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_impala_disable_llama_ha_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_impala_disable_llama_ha_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_impala_disable_llama_ha_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/impalaDisableLlamaHa".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_impala_disable_llama_ha_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Disable Llama-based resource management for Impala.\n&lt;p&gt;\nThis command only applies to CDH 5.1+ Impala services.\n&lt;p&gt;\nThis command disables resource management for Impala by removing all\nLlama roles present in the Impala service. Any services that depend\non the Impala service being modified are restarted by the command,\nand client configuration is deployed for all services of the cluster.\n&lt;p&gt;\nNote that any configuration changes made to YARN and Impala when\nenabling resource management are not reverted by this command.\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name The Impala service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_impala_disable_llama_rm_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_impala_disable_llama_rm_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Disable Llama-based resource management for Impala.\n&lt;p&gt;\nThis command only applies to CDH 5.1+ Impala services.\n&lt;p&gt;\nThis command disables resource management for Impala by removing all\nLlama roles present in the Impala service. Any services that depend\non the Impala service being modified are restarted by the command,\nand client configuration is deployed for all services of the cluster.\n&lt;p&gt;\nNote that any configuration changes made to YARN and Impala when\nenabling resource management are not reverted by this command.\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name The Impala service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_impala_disable_llama_rm_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_impala_disable_llama_rm_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_impala_disable_llama_rm_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_impala_disable_llama_rm_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/impalaDisableLlamaRm".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_impala_disable_llama_rm_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Enable high availability (HA) for an Impala Llama ApplicationMaster.\n&lt;p&gt;\nThis command only applies to CDH 5.1+ Impala services.\n&lt;p&gt;\nThe command will create a new Llama role on the specified host, and then\ncreate an active/standby pair with the existing Llama role. Autofailover\nwill be enabled using ZooKeeper.\n&lt;p&gt;\nIf an optional role name is supplied, the new Llama role will be named\naccordingly; otherwise, a role name will be automatically generated.\n&lt;p&gt;\nAs part of enabling HA, any services that depend on the Impala service\nbeing modified will be stopped. The command will redeploy the client\nconfigurations for services of the cluster after HA has been enabled.\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name The Impala service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_impala_enable_llama_ha_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_impala_enable_llama_ha_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Enable high availability (HA) for an Impala Llama ApplicationMaster.\n&lt;p&gt;\nThis command only applies to CDH 5.1+ Impala services.\n&lt;p&gt;\nThe command will create a new Llama role on the specified host, and then\ncreate an active/standby pair with the existing Llama role. Autofailover\nwill be enabled using ZooKeeper.\n&lt;p&gt;\nIf an optional role name is supplied, the new Llama role will be named\naccordingly; otherwise, a role name will be automatically generated.\n&lt;p&gt;\nAs part of enabling HA, any services that depend on the Impala service\nbeing modified will be stopped. The command will redeploy the client\nconfigurations for services of the cluster after HA has been enabled.\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name The Impala service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_impala_enable_llama_ha_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_impala_enable_llama_ha_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_impala_enable_llama_ha_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_impala_enable_llama_ha_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/impalaEnableLlamaHa".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_impala_enable_llama_ha_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Enable Llama-based resource management for Impala.\n&lt;p&gt;\nThis command only applies to CDH 5.1+ Impala services.\n&lt;p&gt;\nThis command configures YARN and Impala for Llama resource management,\nand then creates one or two Llama roles, as specified by the arguments.\nWhen two Llama roles are created, they are configured as an active/standby\npair. Auto-failover from active to standby Llama will be enabled using\nZooKeeper.\n&lt;p&gt;\nIf an optional role name(s) are supplied, the new Llama role(s) will be\nnamed accordingly; otherwise, role name(s) will be automatically generated.\n&lt;p&gt;\nBy default, YARN, Impala, and any dependent services will be restarted,\nand client configuration will be re-deployed across the cluster. These\ndefault actions may be suppressed via setSkipRestart().\n&lt;p&gt;\nIn order to enable Llama resource management, a YARN service must be\npresent in the cluster, and Cgroup-based resource management must be\nenabled for all hosts with NodeManager roles. If these preconditions\nare not met, the command will fail.\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name The Impala service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_impala_enable_llama_rm_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_impala_enable_llama_rm_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Enable Llama-based resource management for Impala.\n&lt;p&gt;\nThis command only applies to CDH 5.1+ Impala services.\n&lt;p&gt;\nThis command configures YARN and Impala for Llama resource management,\nand then creates one or two Llama roles, as specified by the arguments.\nWhen two Llama roles are created, they are configured as an active/standby\npair. Auto-failover from active to standby Llama will be enabled using\nZooKeeper.\n&lt;p&gt;\nIf an optional role name(s) are supplied, the new Llama role(s) will be\nnamed accordingly; otherwise, role name(s) will be automatically generated.\n&lt;p&gt;\nBy default, YARN, Impala, and any dependent services will be restarted,\nand client configuration will be re-deployed across the cluster. These\ndefault actions may be suppressed via setSkipRestart().\n&lt;p&gt;\nIn order to enable Llama resource management, a YARN service must be\npresent in the cluster, and Cgroup-based resource management must be\nenabled for all hosts with NodeManager roles. If these preconditions\nare not met, the command will fail.\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name The Impala service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_impala_enable_llama_rm_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_impala_enable_llama_rm_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_impala_enable_llama_rm_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_impala_enable_llama_rm_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/impalaEnableLlamaRm".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_impala_enable_llama_rm_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Import MapReduce configuration into Yarn, overwriting Yarn configuration.\n&lt;p&gt;\nYou will lose existing Yarn configuration. Read all MapReduce\nconfiguration, role assignments, and role configuration groups and update\nYarn with corresponding values. MR1 configuration will be converted into\nthe equivalent MR2 configuration.\n&lt;p&gt;\nBefore running this command, Yarn must be stopped and MapReduce must exist\nwith valid configuration.\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name Name of the Yarn service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_import_mr_configs_into_yarn_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_import_mr_configs_into_yarn_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Import MapReduce configuration into Yarn, overwriting Yarn configuration.\n&lt;p&gt;\nYou will lose existing Yarn configuration. Read all MapReduce\nconfiguration, role assignments, and role configuration groups and update\nYarn with corresponding values. MR1 configuration will be converted into\nthe equivalent MR2 configuration.\n&lt;p&gt;\nBefore running this command, Yarn must be stopped and MapReduce must exist\nwith valid configuration.\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name Name of the Yarn service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_import_mr_configs_into_yarn_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_import_mr_configs_into_yarn_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_import_mr_configs_into_yarn_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_import_mr_configs_into_yarn_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/importMrConfigsIntoYarn".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_import_mr_configs_into_yarn_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Initializes the Solr service in Zookeeper.\n\n&lt;p&gt;\nAvailable since API v4.
    # @param service_name The Solr service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_init_solr_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_init_solr_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Initializes the Solr service in Zookeeper.\n\n&lt;p&gt;\nAvailable since API v4.
    # @param service_name The Solr service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_init_solr_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_init_solr_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_init_solr_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_init_solr_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/initSolr".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_init_solr_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates directory for Oozie user in HDFS and installs the ShareLib in it.\n&lt;p/&gt;\nThis command should be re-run after a major version upgrade to refresh the\nShareLib to the latest version.\n&lt;p/&gt;\nAvailable since API v3.\n&lt;p/&gt;
    # @param service_name Name of the Oozie service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_install_oozie_share_lib_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_install_oozie_share_lib_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Creates directory for Oozie user in HDFS and installs the ShareLib in it.\n&lt;p/&gt;\nThis command should be re-run after a major version upgrade to refresh the\nShareLib to the latest version.\n&lt;p/&gt;\nAvailable since API v3.\n&lt;p/&gt;
    # @param service_name Name of the Oozie service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_install_oozie_share_lib_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_install_oozie_share_lib_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_install_oozie_share_lib_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_install_oozie_share_lib_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/installOozieShareLib".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_install_oozie_share_lib_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create the Oozie Server Database. Only works with embedded postgresql\ndatabase.\n&lt;p&gt;\nThis command is to be run whenever a new user and database need to be\ncreated in the embedded postgresql database for an Oozie service. This\ncommand should usually be followed by a call to createOozieDb.\n&lt;p&gt;\nAvailable since API v10.
    # @param service_name Name of the Oozie service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_oozie_create_embedded_database_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_oozie_create_embedded_database_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Create the Oozie Server Database. Only works with embedded postgresql\ndatabase.\n&lt;p&gt;\nThis command is to be run whenever a new user and database need to be\ncreated in the embedded postgresql database for an Oozie service. This\ncommand should usually be followed by a call to createOozieDb.\n&lt;p&gt;\nAvailable since API v10.
    # @param service_name Name of the Oozie service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_oozie_create_embedded_database_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_oozie_create_embedded_database_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_oozie_create_embedded_database_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_oozie_create_embedded_database_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/oozieCreateEmbeddedDatabase".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_oozie_create_embedded_database_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Disable high availability (HA) for Oozie.\n\nAs part of disabling HA, any services that depend on the Oozie service\nbeing modified will be stopped. The command arguments provide options to\nspecify name of Oozie Server that will be preserved. After deleting,\nother Oozie servers, all the services that were stopped are restarted.
    # @param service_name The Oozie service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_oozie_disable_ha_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_oozie_disable_ha_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Disable high availability (HA) for Oozie.\n\nAs part of disabling HA, any services that depend on the Oozie service\nbeing modified will be stopped. The command arguments provide options to\nspecify name of Oozie Server that will be preserved. After deleting,\nother Oozie servers, all the services that were stopped are restarted.
    # @param service_name The Oozie service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_oozie_disable_ha_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_oozie_disable_ha_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_oozie_disable_ha_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_oozie_disable_ha_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/oozieDisableHa".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_oozie_disable_ha_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Enable high availability (HA) for Oozie service.\n&lt;p&gt;\nThis command only applies to CDH5+ Oozie services.\n&lt;p&gt;\nThe command will create new Oozie Servers on the specified hosts and\nset the ZooKeeper and Load Balancer configs needed for Oozie HA.\n&lt;p&gt;\nAs part of enabling HA, any services that depends on the Oozie service\nbeing modified will be stopped and restarted after enabling Oozie HA.
    # @param service_name The Oozie service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_oozie_enable_ha_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_oozie_enable_ha_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Enable high availability (HA) for Oozie service.\n&lt;p&gt;\nThis command only applies to CDH5+ Oozie services.\n&lt;p&gt;\nThe command will create new Oozie Servers on the specified hosts and\nset the ZooKeeper and Load Balancer configs needed for Oozie HA.\n&lt;p&gt;\nAs part of enabling HA, any services that depends on the Oozie service\nbeing modified will be stopped and restarted after enabling Oozie HA.
    # @param service_name The Oozie service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_oozie_enable_ha_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_oozie_enable_ha_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_oozie_enable_ha_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_oozie_enable_ha_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/oozieEnableHa".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_oozie_enable_ha_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Upgrade Oozie Database schema as part of a major version upgrade.\n&lt;p/&gt;\nWhen doing a major version upgrade for Oozie, it is necessary to upgrade\nthe schema of its database before Oozie can run successfully.\n&lt;p/&gt;\nAvailable since API v6.
    # @param service_name The Oozie service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_oozie_upgrade_db_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_oozie_upgrade_db_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Upgrade Oozie Database schema as part of a major version upgrade.\n&lt;p/&gt;\nWhen doing a major version upgrade for Oozie, it is necessary to upgrade\nthe schema of its database before Oozie can run successfully.\n&lt;p/&gt;\nAvailable since API v6.
    # @param service_name The Oozie service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_oozie_upgrade_db_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_oozie_upgrade_db_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_oozie_upgrade_db_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_oozie_upgrade_db_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/oozieUpgradeDb".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_oozie_upgrade_db_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Recommission roles of a service.\n&lt;p&gt;\nThe list should contain names of slave roles to recommission.\n&lt;/p&gt;\n\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param service_name Name of the service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_recommission_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_recommission_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Recommission roles of a service.\n&lt;p&gt;\nThe list should contain names of slave roles to recommission.\n&lt;/p&gt;\n\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param service_name Name of the service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_recommission_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_recommission_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_recommission_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_recommission_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/recommission".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_recommission_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Restart the service.
    # @param service_name The service to start.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_restart_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_restart_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Restart the service.
    # @param service_name The service to start.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_restart_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_restart_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_restart_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_restart_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/restart".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_restart_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Command to run rolling restart of roles in a service. The sequence is:\n&lt;ol&gt;\n&lt;li&gt;Restart all the non-slave roles\n&lt;li&gt;If slaves are present restart them in batches of size specified in RollingRestartCmdArgs\n&lt;li&gt;Perform any post-command needed after rolling restart\n&lt;/ol&gt;\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_rolling_restart_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_rolling_restart_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Command to run rolling restart of roles in a service. The sequence is:\n&lt;ol&gt;\n&lt;li&gt;Restart all the non-slave roles\n&lt;li&gt;If slaves are present restart them in batches of size specified in RollingRestartCmdArgs\n&lt;li&gt;Perform any post-command needed after rolling restart\n&lt;/ol&gt;\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_rolling_restart_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_rolling_restart_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_rolling_restart_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_rolling_restart_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/rollingRestart".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_rolling_restart_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create the Sentry Server Database. Only works with embedded postgresql\ndatabase.\n&lt;p&gt;\nThis command is to be run whenever a new user and database need to be\ncreated in the embedded postgresql database for a Sentry service. This\ncommand should usually be followed by a call to sentryCreateDatabaseTables.\n&lt;p&gt;\nAvailable since API v7.
    # @param service_name Name of the Sentry service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_sentry_create_database_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_sentry_create_database_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Create the Sentry Server Database. Only works with embedded postgresql\ndatabase.\n&lt;p&gt;\nThis command is to be run whenever a new user and database need to be\ncreated in the embedded postgresql database for a Sentry service. This\ncommand should usually be followed by a call to sentryCreateDatabaseTables.\n&lt;p&gt;\nAvailable since API v7.
    # @param service_name Name of the Sentry service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_sentry_create_database_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_sentry_create_database_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_sentry_create_database_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_sentry_create_database_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/sentryCreateDatabase".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_sentry_create_database_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create the Sentry Server Database tables.\n&lt;p&gt;\nThis command is to be run whenever a new database has been specified. Will\ndo nothing if tables already exist. Will not perform an upgrade. Only\nAvailable when Sentry Server is stopped.\n&lt;p&gt;\nAvailable since API v7.
    # @param service_name Name of the Sentry service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_sentry_create_database_tables_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_sentry_create_database_tables_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Create the Sentry Server Database tables.\n&lt;p&gt;\nThis command is to be run whenever a new database has been specified. Will\ndo nothing if tables already exist. Will not perform an upgrade. Only\nAvailable when Sentry Server is stopped.\n&lt;p&gt;\nAvailable since API v7.
    # @param service_name Name of the Sentry service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_sentry_create_database_tables_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_sentry_create_database_tables_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_sentry_create_database_tables_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_sentry_create_database_tables_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/sentryCreateDatabaseTables".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_sentry_create_database_tables_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Upgrade the Sentry Server Database tables.\n&lt;p&gt;\nThis command is to be run whenever Sentry requires an upgrade to its\ndatabase tables.\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name Name of the Sentry service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_sentry_upgrade_database_tables_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_sentry_upgrade_database_tables_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Upgrade the Sentry Server Database tables.\n&lt;p&gt;\nThis command is to be run whenever Sentry requires an upgrade to its\ndatabase tables.\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name Name of the Sentry service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_sentry_upgrade_database_tables_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_sentry_upgrade_database_tables_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_sentry_upgrade_database_tables_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_sentry_upgrade_database_tables_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/sentryUpgradeDatabaseTables".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_sentry_upgrade_database_tables_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create the Sqoop2 Server Database tables.\n&lt;p&gt;\nThis command is to be run whenever a new database has been specified. Will\ndo nothing if tables already exist. Will not perform an upgrade. Only\navailable when Sqoop2 Server is stopped.\n&lt;p&gt;\nAvailable since API v10.
    # @param service_name Name of the Sentry service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_sqoop_create_database_tables_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_sqoop_create_database_tables_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Create the Sqoop2 Server Database tables.\n&lt;p&gt;\nThis command is to be run whenever a new database has been specified. Will\ndo nothing if tables already exist. Will not perform an upgrade. Only\navailable when Sqoop2 Server is stopped.\n&lt;p&gt;\nAvailable since API v10.
    # @param service_name Name of the Sentry service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_sqoop_create_database_tables_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_sqoop_create_database_tables_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_sqoop_create_database_tables_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_sqoop_create_database_tables_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/sqoopCreateDatabaseTables".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_sqoop_create_database_tables_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Upgrade Sqoop Database schema as part of a major version upgrade.\n&lt;p/&gt;\nWhen doing a major version upgrade for Sqoop, it is necessary to upgrade\nthe schema of its database before Sqoop can run successfully.\n&lt;p/&gt;\nAvailable since API v6.
    # @param service_name The Sqoop service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_sqoop_upgrade_db_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_sqoop_upgrade_db_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Upgrade Sqoop Database schema as part of a major version upgrade.\n&lt;p/&gt;\nWhen doing a major version upgrade for Sqoop, it is necessary to upgrade\nthe schema of its database before Sqoop can run successfully.\n&lt;p/&gt;\nAvailable since API v6.
    # @param service_name The Sqoop service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_sqoop_upgrade_db_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_sqoop_upgrade_db_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_sqoop_upgrade_db_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_sqoop_upgrade_db_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/sqoopUpgradeDb".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_sqoop_upgrade_db_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Start the service.
    # @param service_name The service to start.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_start_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_start_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Start the service.
    # @param service_name The service to start.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_start_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_start_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_start_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_start_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/start".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_start_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Stop the service.
    # @param service_name The service to stop.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_stop_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_stop_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Stop the service.
    # @param service_name The service to stop.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_stop_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_stop_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_stop_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_stop_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/stop".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_stop_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Change the cluster to use MR2 instead of MR1. Services will be restarted.\n&lt;p&gt;\nWill perform the following steps:\n&lt;ul&gt;\n&lt;li&gt;Update all services that depend on MapReduce to instead depend on Yarn.\n&lt;/li&gt;\n&lt;li&gt;Stop MapReduce&lt;/li&gt;\n&lt;li&gt;Start Yarn (MR2 Included)&lt;/li&gt;\n&lt;li&gt;Deploy Yarn (MR2) Client Configuration&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name Name of the Yarn service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_switch_to_mr2_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_switch_to_mr2_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Change the cluster to use MR2 instead of MR1. Services will be restarted.\n&lt;p&gt;\nWill perform the following steps:\n&lt;ul&gt;\n&lt;li&gt;Update all services that depend on MapReduce to instead depend on Yarn.\n&lt;/li&gt;\n&lt;li&gt;Stop MapReduce&lt;/li&gt;\n&lt;li&gt;Start Yarn (MR2 Included)&lt;/li&gt;\n&lt;li&gt;Deploy Yarn (MR2) Client Configuration&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name Name of the Yarn service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_switch_to_mr2_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_switch_to_mr2_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_switch_to_mr2_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_switch_to_mr2_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/switchToMr2".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_switch_to_mr2_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Collect the Diagnostics data for Yarn applications\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name Name of the YARN service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_yarn_application_diagnostics_collection_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_yarn_application_diagnostics_collection_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Collect the Diagnostics data for Yarn applications\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name Name of the YARN service on which to run the command.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_yarn_application_diagnostics_collection_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_yarn_application_diagnostics_collection_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_yarn_application_diagnostics_collection_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_yarn_application_diagnostics_collection_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/yarnApplicationDiagnosticsCollection".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_yarn_application_diagnostics_collection_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create the Yarn job history directory\n&lt;p&gt;\nAvailable since API v6.\n&lt;/p&gt;
    # @param service_name The YARN service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_yarn_create_job_history_dir_command_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_yarn_create_job_history_dir_command_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Create the Yarn job history directory\n&lt;p&gt;\nAvailable since API v6.\n&lt;/p&gt;
    # @param service_name The YARN service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_yarn_create_job_history_dir_command_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_yarn_create_job_history_dir_command_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_yarn_create_job_history_dir_command_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_yarn_create_job_history_dir_command_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/yarnCreateJobHistoryDirCommand".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_yarn_create_job_history_dir_command_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Formats the state store in ZooKeeper used for Resource Manager\nHigh Availability. Typically used while moving from non-secure\nto secure cluster or vice-versa.\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name The YARN service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_yarn_format_state_store_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_yarn_format_state_store_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Formats the state store in ZooKeeper used for Resource Manager\nHigh Availability. Typically used while moving from non-secure\nto secure cluster or vice-versa.\n&lt;p&gt;\nAvailable since API v8.
    # @param service_name The YARN service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_yarn_format_state_store_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_yarn_format_state_store_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_yarn_format_state_store_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_yarn_format_state_store_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/yarnFormatStateStore".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_yarn_format_state_store_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create the Yarn NodeManager remote application log directory\n&lt;p&gt;\nAvailable since API v6.\n&lt;/p&gt;
    # @param service_name The YARN service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_yarn_node_manager_remote_app_log_dir_command_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_yarn_node_manager_remote_app_log_dir_command_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Create the Yarn NodeManager remote application log directory\n&lt;p&gt;\nAvailable since API v6.\n&lt;/p&gt;
    # @param service_name The YARN service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_yarn_node_manager_remote_app_log_dir_command_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_yarn_node_manager_remote_app_log_dir_command_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_yarn_node_manager_remote_app_log_dir_command_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_yarn_node_manager_remote_app_log_dir_command_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/yarnNodeManagerRemoteAppLogDirCommand".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_yarn_node_manager_remote_app_log_dir_command_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Clean up all running server instances of a ZooKeeper service.\n&lt;p&gt;\nThis command removes snapshots and transaction log files kept by\nZooKeeper for backup purposes. Refer to the ZooKeeper documentation\nfor more details.
    # @param service_name The service to start.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_zoo_keeper_cleanup_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_zoo_keeper_cleanup_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Clean up all running server instances of a ZooKeeper service.\n&lt;p&gt;\nThis command removes snapshots and transaction log files kept by\nZooKeeper for backup purposes. Refer to the ZooKeeper documentation\nfor more details.
    # @param service_name The service to start.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_zoo_keeper_cleanup_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_zoo_keeper_cleanup_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_zoo_keeper_cleanup_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_zoo_keeper_cleanup_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/zooKeeperCleanup".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_zoo_keeper_cleanup_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Initializes all the server instances of a ZooKeeper service.\n&lt;p&gt;\nZooKeeper server roles need to be initialized before they\ncan be used.
    # @param service_name The service to start.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_zoo_keeper_init_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_zoo_keeper_init_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Initializes all the server instances of a ZooKeeper service.\n&lt;p&gt;\nZooKeeper server roles need to be initialized before they\ncan be used.
    # @param service_name The service to start.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_zoo_keeper_init_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_zoo_keeper_init_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_zoo_keeper_init_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_zoo_keeper_init_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/zooKeeperInit".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_zoo_keeper_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Executes a command on the service specified\nby name.\n&lt;p&gt;\nAvailable since API v6.\n&lt;/p&gt;
    # @param service_name The service name.
    # @param command_name The command name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_command_name_post(service_name, command_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_command_name_post_with_http_info(service_name, command_name, cluster_name, opts)
      return nil
    end

    # 
    # Executes a command on the service specified\nby name.\n&lt;p&gt;\nAvailable since API v6.\n&lt;/p&gt;
    # @param service_name The service name.
    # @param command_name The command name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_command_name_post_with_http_info(service_name, command_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_command_name_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_command_name_post" if service_name.nil?
      
      # verify the required parameter 'command_name' is set
      fail "Missing the required parameter 'command_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_command_name_post" if command_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_command_name_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commands/{commandName}".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'commandName' + '}', command_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_command_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Lists all the commands that can be executed by name\non the provided service.\n\n&lt;p&gt;\nAvailable since API v6.\n&lt;/p&gt;
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_commands_by_name_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_commands_by_name_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Lists all the commands that can be executed by name\non the provided service.\n\n&lt;p&gt;\nAvailable since API v6.\n&lt;/p&gt;
    # @param service_name The service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_commands_by_name_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_by_name_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_by_name_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_commands_by_name_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/commandsByName".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_commands_by_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieves the configuration of a specific service.\n&lt;p&gt;\nThe \&quot;summary\&quot; view contains only the configured parameters, and\nconfiguration for role types that contain configured parameters.\n&lt;p&gt;\nThe \&quot;full\&quot; view contains all available configuration parameters for\nthe service and its role types.\nThis mode performs validation on the configuration, which could take\na few seconds on a large cluster (around 500 nodes or more).
    # @param service_name The service to query.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_config_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_config_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Retrieves the configuration of a specific service.\n&lt;p&gt;\nThe \&quot;summary\&quot; view contains only the configured parameters, and\nconfiguration for role types that contain configured parameters.\n&lt;p&gt;\nThe \&quot;full\&quot; view contains all available configuration parameters for\nthe service and its role types.\nThis mode performs validation on the configuration, which could take\na few seconds on a large cluster (around 500 nodes or more).
    # @param service_name The service to query.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_config_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_config_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_config_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_config_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/config".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates the service configuration with the given values.\n&lt;p&gt;\nIf a value is set in the given configuration, it will be added\nto the service&#39;s configuration, replacing any existing entries.\nIf a value is unset (its value is null), the existing\nconfiguration for the attribute will be erased, if any.\n&lt;p&gt;\nAttributes that are not listed in the input will maintain their\ncurrent values in the configuration.
    # @param service_name The service to query.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_config_put(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_config_put_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Updates the service configuration with the given values.\n&lt;p&gt;\nIf a value is set in the given configuration, it will be added\nto the service&#39;s configuration, replacing any existing entries.\nIf a value is unset (its value is null), the existing\nconfiguration for the attribute will be erased, if any.\n&lt;p&gt;\nAttributes that are not listed in the input will maintain their\ncurrent values in the configuration.
    # @param service_name The service to query.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_config_put_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_config_put ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_config_put" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_config_put" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/config".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'message'] = opts[:'message'] if opts[:'message']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_config_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a list of queries that satisfy the filter\n&lt;p&gt;\nAvailable since API v4.
    # @param service_name The name of the service
    # @param service_name2 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter A filter to apply to the queries. A basic filter tests the\nvalue of an attribute and looks something like &#39;rowsFetched = 1&#39; or\n&#39;user = root&#39;. Multiple basic filters can be combined into a complex\nexpression using standard and / or boolean logic and parenthesis.\nAn example of a complex filter is: &#39;query_duration &gt; 5s and (user = root or\nuser = myUserName)&#39;.
    # @option opts [String] :from Start of the period to query in ISO 8601 format (defaults to 5\nminutes before the &#39;to&#39; time).
    # @option opts [String] :to End of the period to query in ISO 8601 format (defaults to\ncurrent time).
    # @option opts [String] :limit The maximum number of queries to return. Queries will be\nreturned in the following order:\n&lt;ul&gt;\n&lt;li&gt; All executing queries, ordered from longest to shortest running &lt;/li&gt;\n&lt;li&gt; All completed queries order by end time descending. &lt;/li&gt;\n&lt;/ul&gt;
    # @option opts [String] :offset The offset to start returning queries from. This is useful\nfor paging through lists of queries. Note that this has non-deterministic\nbehavior if executing queries are included in the response because they\ncan disappear from the list while paging. To exclude executing queries\nfrom the response and a &#39;executing = false&#39; clause to your filter.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_impala_queries_get(service_name, service_name2, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_impala_queries_get_with_http_info(service_name, service_name2, cluster_name, opts)
      return nil
    end

    # 
    # Returns a list of queries that satisfy the filter\n&lt;p&gt;\nAvailable since API v4.
    # @param service_name The name of the service
    # @param service_name2 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter A filter to apply to the queries. A basic filter tests the\nvalue of an attribute and looks something like &#39;rowsFetched = 1&#39; or\n&#39;user = root&#39;. Multiple basic filters can be combined into a complex\nexpression using standard and / or boolean logic and parenthesis.\nAn example of a complex filter is: &#39;query_duration &gt; 5s and (user = root or\nuser = myUserName)&#39;.
    # @option opts [String] :from Start of the period to query in ISO 8601 format (defaults to 5\nminutes before the &#39;to&#39; time).
    # @option opts [String] :to End of the period to query in ISO 8601 format (defaults to\ncurrent time).
    # @option opts [String] :limit The maximum number of queries to return. Queries will be\nreturned in the following order:\n&lt;ul&gt;\n&lt;li&gt; All executing queries, ordered from longest to shortest running &lt;/li&gt;\n&lt;li&gt; All completed queries order by end time descending. &lt;/li&gt;\n&lt;/ul&gt;
    # @option opts [String] :offset The offset to start returning queries from. This is useful\nfor paging through lists of queries. Note that this has non-deterministic\nbehavior if executing queries are included in the response because they\ncan disappear from the list while paging. To exclude executing queries\nfrom the response and a &#39;executing = false&#39; clause to your filter.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_impala_queries_get_with_http_info(service_name, service_name2, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_impala_queries_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_impala_queries_get" if service_name.nil?
      
      # verify the required parameter 'service_name2' is set
      fail "Missing the required parameter 'service_name2' when calling api_v11_clusters_cluster_name_services_service_name_impala_queries_get" if service_name2.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_impala_queries_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/impalaQueries".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'serviceName' + '}', service_name2.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if opts[:'filter']
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'offset'] = opts[:'offset'] if opts[:'offset']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_impala_queries_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the list of all attributes that the Service Monitor can associate\nwith Impala queries.\n&lt;p&gt;\nExamples of attributes include the user who issued the query and the\nnumber of HDFS bytes read by the query.\n&lt;p&gt;\nThese attributes can be used to search for specific Impala queries through\nthe getImpalaQueries API. For example the &#39;user&#39; attribute could be used\nin the search &#39;user = root&#39;. If the attribute is numeric it can also be used\nas a metric in a tsquery (ie, &#39;select hdfs_bytes_read from IMPALA_QUERIES&#39;).\n&lt;p&gt;\nNote that this response is identical for all Impala services.\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_impala_queries_attributes_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_impala_queries_attributes_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Returns the list of all attributes that the Service Monitor can associate\nwith Impala queries.\n&lt;p&gt;\nExamples of attributes include the user who issued the query and the\nnumber of HDFS bytes read by the query.\n&lt;p&gt;\nThese attributes can be used to search for specific Impala queries through\nthe getImpalaQueries API. For example the &#39;user&#39; attribute could be used\nin the search &#39;user = root&#39;. If the attribute is numeric it can also be used\nas a metric in a tsquery (ie, &#39;select hdfs_bytes_read from IMPALA_QUERIES&#39;).\n&lt;p&gt;\nNote that this response is identical for all Impala services.\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_impala_queries_attributes_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_impala_queries_attributes_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_impala_queries_attributes_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_impala_queries_attributes_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/impalaQueries/attributes".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_impala_queries_attributes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns details about the query. Not all queries have details, check\nthe detailsAvailable field from the getQueries response.\n&lt;p&gt;\nAvailable since API v4.
    # @param query_id The queryId to get information about
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format There are two valid format parameters:\n&lt;ul&gt;\n&lt;li&gt;\n&#39;text&#39;: this is a text based, human readable representation of the\nImpala runtime profile.\n&lt;/li&gt;\n&lt;li&gt;\n&#39;thrift_encoded&#39;: this a compact-thrift, base64 encoded representation\nof the Impala RuntimeProfile.thrift object. See the Impala documentation\nfor more details.\n&lt;/li&gt;\n&lt;/ul&gt;
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_get(query_id, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_get_with_http_info(query_id, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Returns details about the query. Not all queries have details, check\nthe detailsAvailable field from the getQueries response.\n&lt;p&gt;\nAvailable since API v4.
    # @param query_id The queryId to get information about
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format There are two valid format parameters:\n&lt;ul&gt;\n&lt;li&gt;\n&#39;text&#39;: this is a text based, human readable representation of the\nImpala runtime profile.\n&lt;/li&gt;\n&lt;li&gt;\n&#39;thrift_encoded&#39;: this a compact-thrift, base64 encoded representation\nof the Impala RuntimeProfile.thrift object. See the Impala documentation\nfor more details.\n&lt;/li&gt;\n&lt;/ul&gt;
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_get_with_http_info(query_id, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_get ..."
      end
      
      # verify the required parameter 'query_id' is set
      fail "Missing the required parameter 'query_id' when calling api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_get" if query_id.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/impalaQueries/{queryId}".sub('{format}','json').sub('{' + 'queryId' + '}', query_id.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if opts[:'format']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Cancels an Impala Query.\n&lt;p&gt;\nAvailable since API v4.
    # @param service_name The name of the service
    # @param query_id The queryId to cancel
    # @param service_name2 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_cancel_post(service_name, query_id, service_name2, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_cancel_post_with_http_info(service_name, query_id, service_name2, cluster_name, opts)
      return nil
    end

    # 
    # Cancels an Impala Query.\n&lt;p&gt;\nAvailable since API v4.
    # @param service_name The name of the service
    # @param query_id The queryId to cancel
    # @param service_name2 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_cancel_post_with_http_info(service_name, query_id, service_name2, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_cancel_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_cancel_post" if service_name.nil?
      
      # verify the required parameter 'query_id' is set
      fail "Missing the required parameter 'query_id' when calling api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_cancel_post" if query_id.nil?
      
      # verify the required parameter 'service_name2' is set
      fail "Missing the required parameter 'service_name2' when calling api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_cancel_post" if service_name2.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_cancel_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/impalaQueries/{queryId}/cancel".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'queryId' + '}', query_id.to_s).sub('{' + 'serviceName' + '}', service_name2.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_impala_queries_query_id_cancel_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Fetch metric readings for a particular service.\n&lt;p&gt;\nBy default, this call will look up all metrics available for the service.\nIf only specific metrics are desired, use the &lt;i&gt;metrics&lt;/i&gt; parameter.\n&lt;p&gt;\nBy default, the returned results correspond to a 5 minute window based on\nthe provided end time (which defaults to the current server time). The\n&lt;i&gt;from&lt;/i&gt; and &lt;i&gt;to&lt;/i&gt; parameters can be used to control the window\nbeing queried. A maximum window of 3 hours is enforced.\n&lt;p&gt;\nWhen requesting a \&quot;full\&quot; view, aside from the extended properties of the\nreturned metric data, the collection will also contain information about\nall metrics available for the service, even if no readings are available\nin the requested window.\n&lt;p&gt;\nHDFS services that have more than one nameservice will not expose\nany metrics. Instead, the nameservices should be queried separately.\n&lt;p/&gt;
    # @param service_name The name of the service.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Start of the period to query.
    # @option opts [String] :to End of the period to query.
    # @option opts [String] :metrics Filter for which metrics to query.
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_metrics_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_metrics_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Fetch metric readings for a particular service.\n&lt;p&gt;\nBy default, this call will look up all metrics available for the service.\nIf only specific metrics are desired, use the &lt;i&gt;metrics&lt;/i&gt; parameter.\n&lt;p&gt;\nBy default, the returned results correspond to a 5 minute window based on\nthe provided end time (which defaults to the current server time). The\n&lt;i&gt;from&lt;/i&gt; and &lt;i&gt;to&lt;/i&gt; parameters can be used to control the window\nbeing queried. A maximum window of 3 hours is enforced.\n&lt;p&gt;\nWhen requesting a \&quot;full\&quot; view, aside from the extended properties of the\nreturned metric data, the collection will also contain information about\nall metrics available for the service, even if no readings are available\nin the requested window.\n&lt;p&gt;\nHDFS services that have more than one nameservice will not expose\nany metrics. Instead, the nameservices should be queried separately.\n&lt;p/&gt;
    # @param service_name The name of the service.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Start of the period to query.
    # @option opts [String] :to End of the period to query.
    # @option opts [String] :metrics Filter for which metrics to query.
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_metrics_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_metrics_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_metrics_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_metrics_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/metrics".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'metrics'] = opts[:'metrics'] if opts[:'metrics']
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_metrics_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # List the nameservices of an HDFS service.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_nameservices_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_nameservices_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # List the nameservices of an HDFS service.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_nameservices_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_nameservices_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_nameservices_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_nameservices_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/nameservices".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_nameservices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve information about a nameservice.
    # @param nameservice The nameservice to retrieve.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_get(nameservice, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_get_with_http_info(nameservice, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Retrieve information about a nameservice.
    # @param nameservice The nameservice to retrieve.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_get_with_http_info(nameservice, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_get ..."
      end
      
      # verify the required parameter 'nameservice' is set
      fail "Missing the required parameter 'nameservice' when calling api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_get" if nameservice.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/nameservices/{nameservice}".sub('{format}','json').sub('{' + 'nameservice' + '}', nameservice.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Fetch metric readings for a particular nameservice.\n&lt;p&gt;\nBy default, this call will look up all metrics available. If only specific\nmetrics are desired, use the &lt;i&gt;metrics&lt;/i&gt; parameter.\n&lt;p&gt;\nBy default, the returned results correspond to a 5 minute window based on\nthe provided end time (which defaults to the current server time). The\n&lt;i&gt;from&lt;/i&gt; and &lt;i&gt;to&lt;/i&gt; parameters can be used to control the window\nbeing queried. A maximum window of 3 hours is enforced.\n&lt;p&gt;\nWhen requesting a \&quot;full\&quot; view, aside from the extended properties of the\nreturned metric data, the collection will also contain information about\nall metrics available, even if no readings are available in the requested\nwindow.
    # @param nameservice The nameservice.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Start of the period to query.
    # @option opts [String] :to End of the period to query.
    # @option opts [String] :metrics Filter for which metrics to query.
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_metrics_get(nameservice, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_metrics_get_with_http_info(nameservice, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Fetch metric readings for a particular nameservice.\n&lt;p&gt;\nBy default, this call will look up all metrics available. If only specific\nmetrics are desired, use the &lt;i&gt;metrics&lt;/i&gt; parameter.\n&lt;p&gt;\nBy default, the returned results correspond to a 5 minute window based on\nthe provided end time (which defaults to the current server time). The\n&lt;i&gt;from&lt;/i&gt; and &lt;i&gt;to&lt;/i&gt; parameters can be used to control the window\nbeing queried. A maximum window of 3 hours is enforced.\n&lt;p&gt;\nWhen requesting a \&quot;full\&quot; view, aside from the extended properties of the\nreturned metric data, the collection will also contain information about\nall metrics available, even if no readings are available in the requested\nwindow.
    # @param nameservice The nameservice.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Start of the period to query.
    # @option opts [String] :to End of the period to query.
    # @option opts [String] :metrics Filter for which metrics to query.
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_metrics_get_with_http_info(nameservice, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_metrics_get ..."
      end
      
      # verify the required parameter 'nameservice' is set
      fail "Missing the required parameter 'nameservice' when calling api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_metrics_get" if nameservice.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_metrics_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_metrics_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/nameservices/{nameservice}/metrics".sub('{format}','json').sub('{' + 'nameservice' + '}', nameservice.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'metrics'] = opts[:'metrics'] if opts[:'metrics']
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_nameservices_nameservice_metrics_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns information for all replication schedules.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view to materialize.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_replications_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_replications_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Returns information for all replication schedules.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view to materialize.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_replications_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/replications".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates one or more replication schedules.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_replications_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_replications_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Creates one or more replication schedules.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_replications_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/replications".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Deletes all existing replication schedules.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_replications_delete(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_replications_delete_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Deletes all existing replication schedules.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_replications_delete_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_delete ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_delete" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_delete" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/replications".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns information for a specific replication schedule.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param schedule_id Id of an existing replication schedule.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view to materialize.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_get(schedule_id, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_get_with_http_info(schedule_id, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Returns information for a specific replication schedule.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param schedule_id Id of an existing replication schedule.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view to materialize.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_get_with_http_info(schedule_id, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_get ..."
      end
      
      # verify the required parameter 'schedule_id' is set
      fail "Missing the required parameter 'schedule_id' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_get" if schedule_id.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/replications/{scheduleId}".sub('{format}','json').sub('{' + 'scheduleId' + '}', schedule_id.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates an existing replication schedule.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param schedule_id Id of an existing replication schedule.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_put(schedule_id, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_put_with_http_info(schedule_id, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Updates an existing replication schedule.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param schedule_id Id of an existing replication schedule.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_put_with_http_info(schedule_id, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_put ..."
      end
      
      # verify the required parameter 'schedule_id' is set
      fail "Missing the required parameter 'schedule_id' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_put" if schedule_id.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_put" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_put" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/replications/{scheduleId}".sub('{format}','json').sub('{' + 'scheduleId' + '}', schedule_id.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Deletes an existing replication schedule.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param schedule_id Id of an existing replication schedule.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_delete(schedule_id, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_delete_with_http_info(schedule_id, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Deletes an existing replication schedule.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param schedule_id Id of an existing replication schedule.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_delete_with_http_info(schedule_id, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_delete ..."
      end
      
      # verify the required parameter 'schedule_id' is set
      fail "Missing the required parameter 'schedule_id' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_delete" if schedule_id.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_delete" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_delete" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/replications/{scheduleId}".sub('{format}','json').sub('{' + 'scheduleId' + '}', schedule_id.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Collect diagnostic data for a schedule, optionally for a subset of commands\non that schedule, matched by schedule ID.\n\nThe returned command&#39;s resultDataUrl property, upon the commands completion,\nwill refer to the generated diagnostic data.\nAvailable since API v11.
    # @param schedule_id Schedule ID
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view view to materialize
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_collect_diagnostic_data_post(schedule_id, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_collect_diagnostic_data_post_with_http_info(schedule_id, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Collect diagnostic data for a schedule, optionally for a subset of commands\non that schedule, matched by schedule ID.\n\nThe returned command&#39;s resultDataUrl property, upon the commands completion,\nwill refer to the generated diagnostic data.\nAvailable since API v11.
    # @param schedule_id Schedule ID
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view view to materialize
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_collect_diagnostic_data_post_with_http_info(schedule_id, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_collect_diagnostic_data_post ..."
      end
      
      # verify the required parameter 'schedule_id' is set
      fail "Missing the required parameter 'schedule_id' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_collect_diagnostic_data_post" if schedule_id.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_collect_diagnostic_data_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_collect_diagnostic_data_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/replications/{scheduleId}/collectDiagnosticData".sub('{format}','json').sub('{' + 'scheduleId' + '}', schedule_id.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_collect_diagnostic_data_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a list of commands triggered by a schedule.
    # @param schedule_id Id of an existing replication schedule.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Maximum number of commands to retrieve.
    # @option opts [String] :offset Index of first command to retrieve.
    # @option opts [String] :view The view to materialize.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_history_get(schedule_id, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_history_get_with_http_info(schedule_id, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Returns a list of commands triggered by a schedule.
    # @param schedule_id Id of an existing replication schedule.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Maximum number of commands to retrieve.
    # @option opts [String] :offset Index of first command to retrieve.
    # @option opts [String] :view The view to materialize.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_history_get_with_http_info(schedule_id, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_history_get ..."
      end
      
      # verify the required parameter 'schedule_id' is set
      fail "Missing the required parameter 'schedule_id' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_history_get" if schedule_id.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_history_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_history_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/replications/{scheduleId}/history".sub('{format}','json').sub('{' + 'scheduleId' + '}', schedule_id.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'offset'] = opts[:'offset'] if opts[:'offset']
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Run the schedule immediately.\n&lt;p&gt;\nThe replication command will be triggered with the configured arguments,\nand will be recorded in the schedule&#39;s history.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param schedule_id Id of an existing replication schedule.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :dry_run Whether to execute a dry run.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_run_post(schedule_id, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_run_post_with_http_info(schedule_id, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Run the schedule immediately.\n&lt;p&gt;\nThe replication command will be triggered with the configured arguments,\nand will be recorded in the schedule&#39;s history.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param schedule_id Id of an existing replication schedule.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :dry_run Whether to execute a dry run.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_run_post_with_http_info(schedule_id, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_run_post ..."
      end
      
      # verify the required parameter 'schedule_id' is set
      fail "Missing the required parameter 'schedule_id' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_run_post" if schedule_id.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_run_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_run_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/replications/{scheduleId}/run".sub('{format}','json').sub('{' + 'scheduleId' + '}', schedule_id.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'dryRun'] = opts[:'dry_run'] if opts[:'dry_run']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_replications_schedule_id_run_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Fetch the HDFS usage report. For the requested time range, at the\nspecified aggregation intervals, the report shows HDFS disk usages\nper user.\n&lt;p&gt;\nThis call supports returning JSON or CSV, as determined by the\n\&quot;Accept\&quot; header of application/json or text/csv.\n&lt;p&gt;\nAvailable since API v4. Only available with Cloudera Manager Enterprise\nEdition.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nameservice The (optional) HDFS nameservice. Required for HA setup.
    # @option opts [String] :from The (optional) start time of the report in ISO 8601 format (\ndefaults to 24 hours before \&quot;to\&quot; time).
    # @option opts [String] :to The (optional) end time of the report in ISO 8601 format (\ndefaults to now).
    # @option opts [String] :aggregation The (optional) aggregation period for the data.\nSupports \&quot;hourly\&quot;, \&quot;daily\&quot; (default) and \&quot;weekly\&quot;.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_reports_hdfs_usage_report_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_reports_hdfs_usage_report_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Fetch the HDFS usage report. For the requested time range, at the\nspecified aggregation intervals, the report shows HDFS disk usages\nper user.\n&lt;p&gt;\nThis call supports returning JSON or CSV, as determined by the\n\&quot;Accept\&quot; header of application/json or text/csv.\n&lt;p&gt;\nAvailable since API v4. Only available with Cloudera Manager Enterprise\nEdition.
    # @param service_name The HDFS service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nameservice The (optional) HDFS nameservice. Required for HA setup.
    # @option opts [String] :from The (optional) start time of the report in ISO 8601 format (\ndefaults to 24 hours before \&quot;to\&quot; time).
    # @option opts [String] :to The (optional) end time of the report in ISO 8601 format (\ndefaults to now).
    # @option opts [String] :aggregation The (optional) aggregation period for the data.\nSupports \&quot;hourly\&quot;, \&quot;daily\&quot; (default) and \&quot;weekly\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_reports_hdfs_usage_report_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_reports_hdfs_usage_report_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_reports_hdfs_usage_report_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_reports_hdfs_usage_report_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/reports/hdfsUsageReport".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'nameservice'] = opts[:'nameservice'] if opts[:'nameservice']
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'aggregation'] = opts[:'aggregation'] if opts[:'aggregation']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_reports_hdfs_usage_report_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Fetch the MR usage report. For the requested time range, at the\nspecified aggregation intervals, the report shows job CPU usages (and other\nmetrics) per user.\n&lt;p&gt;\nThis call supports returning JSON or CSV, as determined by the\n\&quot;Accept\&quot; header of application/json or text/csv.\n&lt;p&gt;\nAvailable since API v4. Only available with Cloudera Manager Enterprise\nEdition.
    # @param service_name The MR service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from The (optional) start time of the report in ISO 8601 format\n(defaults to 24 hours before \&quot;to\&quot; time).
    # @option opts [String] :to The (optional) end time of the report in ISO 8601 format (defaults\nto now).
    # @option opts [String] :aggregation The (optional) aggregation period for the data.\nSupports \&quot;hourly\&quot;, \&quot;daily\&quot; (default) and \&quot;weekly\&quot;.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_reports_mr_usage_report_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_reports_mr_usage_report_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Fetch the MR usage report. For the requested time range, at the\nspecified aggregation intervals, the report shows job CPU usages (and other\nmetrics) per user.\n&lt;p&gt;\nThis call supports returning JSON or CSV, as determined by the\n\&quot;Accept\&quot; header of application/json or text/csv.\n&lt;p&gt;\nAvailable since API v4. Only available with Cloudera Manager Enterprise\nEdition.
    # @param service_name The MR service name.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from The (optional) start time of the report in ISO 8601 format\n(defaults to 24 hours before \&quot;to\&quot; time).
    # @option opts [String] :to The (optional) end time of the report in ISO 8601 format (defaults\nto now).
    # @option opts [String] :aggregation The (optional) aggregation period for the data.\nSupports \&quot;hourly\&quot;, \&quot;daily\&quot; (default) and \&quot;weekly\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_reports_mr_usage_report_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_reports_mr_usage_report_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_reports_mr_usage_report_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_reports_mr_usage_report_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/reports/mrUsageReport".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'aggregation'] = opts[:'aggregation'] if opts[:'aggregation']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_reports_mr_usage_report_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Bootstrap HDFS stand-by NameNodes.\n&lt;p&gt;\nSubmit a request to synchronize HDFS NameNodes with their assigned HA\npartners. The command requires that the target NameNodes are part of\nexisting HA pairs, which can be accomplished by setting the nameservice\nconfiguration parameter in the NameNode&#39;s configuration.\n&lt;p&gt;\nThe HA partner must already be formatted and running for this command\nto run.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_bootstrap_stand_by_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_bootstrap_stand_by_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Bootstrap HDFS stand-by NameNodes.\n&lt;p&gt;\nSubmit a request to synchronize HDFS NameNodes with their assigned HA\npartners. The command requires that the target NameNodes are part of\nexisting HA pairs, which can be accomplished by setting the nameservice\nconfiguration parameter in the NameNode&#39;s configuration.\n&lt;p&gt;\nThe HA partner must already be formatted and running for this command\nto run.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_bootstrap_stand_by_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_bootstrap_stand_by_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_bootstrap_stand_by_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_bootstrap_stand_by_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsBootstrapStandBy".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_bootstrap_stand_by_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Enter safemode for namenodes\n&lt;p/&gt;\nAvailable since API v4.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_enter_safemode_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_enter_safemode_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Enter safemode for namenodes\n&lt;p/&gt;\nAvailable since API v4.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_enter_safemode_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_enter_safemode_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_enter_safemode_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_enter_safemode_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsEnterSafemode".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_enter_safemode_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Finalize HDFS NameNode metadata upgrade.\n&lt;p/&gt;\nAvailable since API v3.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_finalize_metadata_upgrade_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_finalize_metadata_upgrade_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Finalize HDFS NameNode metadata upgrade.\n&lt;p/&gt;\nAvailable since API v3.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_finalize_metadata_upgrade_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_finalize_metadata_upgrade_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_finalize_metadata_upgrade_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_finalize_metadata_upgrade_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsFinalizeMetadataUpgrade".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_finalize_metadata_upgrade_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Format HDFS NameNodes.\n&lt;p&gt;\nSubmit a format request to a list of NameNodes on a service. Note that\ntrying to format a previously formatted NameNode will fail.\n&lt;p&gt;\nNote about high availability: when two NameNodes are working in an HA\npair, only one of them should be formatted.\n&lt;p&gt;\nBulk command operations are not atomic, and may contain partial failures.\nThe returned list will contain references to all successful commands, and\na list of error messages identifying the roles on which the command\nfailed.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_format_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_format_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Format HDFS NameNodes.\n&lt;p&gt;\nSubmit a format request to a list of NameNodes on a service. Note that\ntrying to format a previously formatted NameNode will fail.\n&lt;p&gt;\nNote about high availability: when two NameNodes are working in an HA\npair, only one of them should be formatted.\n&lt;p&gt;\nBulk command operations are not atomic, and may contain partial failures.\nThe returned list will contain references to all successful commands, and\na list of error messages identifying the roles on which the command\nfailed.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_format_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_format_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_format_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_format_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsFormat".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_format_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Initialize HDFS HA failover controller metadata.\n&lt;p&gt;\nThe controllers being initialized must already exist and be properly\nconfigured. The command will make sure the needed data is initialized\nfor the controller to work.\n&lt;p&gt;\nOnly one controller per nameservice needs to be initialized.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_initialize_auto_failover_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_initialize_auto_failover_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Initialize HDFS HA failover controller metadata.\n&lt;p&gt;\nThe controllers being initialized must already exist and be properly\nconfigured. The command will make sure the needed data is initialized\nfor the controller to work.\n&lt;p&gt;\nOnly one controller per nameservice needs to be initialized.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_initialize_auto_failover_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_initialize_auto_failover_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_initialize_auto_failover_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_initialize_auto_failover_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsInitializeAutoFailover".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_initialize_auto_failover_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Initialize HDFS NameNodes&#39; shared edit directory.\n&lt;p&gt;\nShared edit directories are used when two HDFS NameNodes are operating as\na high-availability pair. This command initializes the shared directory to\ninclude the necessary metadata.\n&lt;p&gt;\nThe provided role names should reflect one of the NameNodes in the\nrespective HA pair; the role must be stopped and its data directory must\nalready have been formatted. The shared edits directory must be empty for\nthis command to succeed.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_initialize_shared_dir_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_initialize_shared_dir_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Initialize HDFS NameNodes&#39; shared edit directory.\n&lt;p&gt;\nShared edit directories are used when two HDFS NameNodes are operating as\na high-availability pair. This command initializes the shared directory to\ninclude the necessary metadata.\n&lt;p&gt;\nThe provided role names should reflect one of the NameNodes in the\nrespective HA pair; the role must be stopped and its data directory must\nalready have been formatted. The shared edits directory must be empty for\nthis command to succeed.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_initialize_shared_dir_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_initialize_shared_dir_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_initialize_shared_dir_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_initialize_shared_dir_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsInitializeSharedDir".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_initialize_shared_dir_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Leave safemode for namenodes\n&lt;p/&gt;\nAvailable since API v4.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_leave_safemode_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_leave_safemode_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Leave safemode for namenodes\n&lt;p/&gt;\nAvailable since API v4.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_leave_safemode_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_leave_safemode_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_leave_safemode_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_leave_safemode_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsLeaveSafemode".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_leave_safemode_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Save namespace for namenodes\n&lt;p/&gt;\nAvailable since API v4.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_save_namespace_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_save_namespace_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Save namespace for namenodes\n&lt;p/&gt;\nAvailable since API v4.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_save_namespace_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_save_namespace_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_save_namespace_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_save_namespace_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsSaveNamespace".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hdfs_save_namespace_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create / update the Hue database schema.\n&lt;p&gt;\nThis command is to be run whenever a new database has been specified or,\nas necessary, after an upgrade.\n&lt;p&gt;\nThis request should be sent to Hue servers only.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hue_sync_db_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_hue_sync_db_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Create / update the Hue database schema.\n&lt;p&gt;\nThis command is to be run whenever a new database has been specified or,\nas necessary, after an upgrade.\n&lt;p&gt;\nThis request should be sent to Hue servers only.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_hue_sync_db_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hue_sync_db_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hue_sync_db_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_hue_sync_db_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/hueSyncDb".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_hue_sync_db_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Run the jmapDump diagnostic command. The command runs the jmap utility to\ncapture a dump of the role&#39;s java heap.\n&lt;p/&gt;\nAvailable since API v8.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_jmap_dump_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_jmap_dump_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Run the jmapDump diagnostic command. The command runs the jmap utility to\ncapture a dump of the role&#39;s java heap.\n&lt;p/&gt;\nAvailable since API v8.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_jmap_dump_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_jmap_dump_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_jmap_dump_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_jmap_dump_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/jmapDump".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_jmap_dump_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Run the jmapHisto diagnostic command. The command runs the jmap utility to\ncapture a histogram of the objects on the role&#39;s java heap.\n&lt;p/&gt;\nAvailable since API v8.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_jmap_histo_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_jmap_histo_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Run the jmapHisto diagnostic command. The command runs the jmap utility to\ncapture a histogram of the objects on the role&#39;s java heap.\n&lt;p/&gt;\nAvailable since API v8.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_jmap_histo_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_jmap_histo_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_jmap_histo_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_jmap_histo_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/jmapHisto".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_jmap_histo_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Run the jstack diagnostic command. The command runs the jstack utility to\ncapture a role&#39;s java thread stacks.\n&lt;p/&gt;\nAvailable since API v8.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_jstack_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_jstack_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Run the jstack diagnostic command. The command runs the jstack utility to\ncapture a role&#39;s java thread stacks.\n&lt;p/&gt;\nAvailable since API v8.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_jstack_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_jstack_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_jstack_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_jstack_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/jstack".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_jstack_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Run the lsof diagnostic command. This command runs the lsof utility to\nlist a role&#39;s open files.\n&lt;p/&gt;\nAvailable since API v8.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_lsof_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_lsof_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Run the lsof diagnostic command. This command runs the lsof utility to\nlist a role&#39;s open files.\n&lt;p/&gt;\nAvailable since API v8.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_lsof_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_lsof_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_lsof_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_lsof_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/lsof".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_lsof_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Refresh a role&#39;s data.\n&lt;p&gt;\nFor MapReduce services, this command should be executed on JobTracker\nroles. It refreshes the role&#39;s queue and node information.\n&lt;p&gt;\nFor HDFS services, this command should be executed on NameNode or\nDataNode roles. For NameNodes, it refreshes the role&#39;s node list.\nFor DataNodes, it refreshes the role&#39;s data directory list.\n&lt;p&gt;\nFor YARN services, this command should be executed on ResourceManager\nroles. It refreshes the role&#39;s queue and node information.\n&lt;p&gt;\nAvailable since API v1. DataNode data directories refresh available\nsince API v10.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_refresh_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_refresh_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Refresh a role&#39;s data.\n&lt;p&gt;\nFor MapReduce services, this command should be executed on JobTracker\nroles. It refreshes the role&#39;s queue and node information.\n&lt;p&gt;\nFor HDFS services, this command should be executed on NameNode or\nDataNode roles. For NameNodes, it refreshes the role&#39;s node list.\nFor DataNodes, it refreshes the role&#39;s data directory list.\n&lt;p&gt;\nFor YARN services, this command should be executed on ResourceManager\nroles. It refreshes the role&#39;s queue and node information.\n&lt;p&gt;\nAvailable since API v1. DataNode data directories refresh available\nsince API v10.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_refresh_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_refresh_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_refresh_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_refresh_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/refresh".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_refresh_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Restart a set of role instances\n&lt;p&gt;\nBulk command operations are not atomic, and may contain partial failures.\nThe returned list will contain references to all successful commands, and\na list of error messages identifying the roles on which the command\nfailed.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_restart_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_restart_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Restart a set of role instances\n&lt;p&gt;\nBulk command operations are not atomic, and may contain partial failures.\nThe returned list will contain references to all successful commands, and\na list of error messages identifying the roles on which the command\nfailed.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_restart_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_restart_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_restart_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_restart_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/restart".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_restart_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Start a set of role instances.\n&lt;p&gt;\nBulk command operations are not atomic, and may contain partial failures.\nThe returned list will contain references to all successful commands, and\na list of error messages identifying the roles on which the command\nfailed.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_start_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_start_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Start a set of role instances.\n&lt;p&gt;\nBulk command operations are not atomic, and may contain partial failures.\nThe returned list will contain references to all successful commands, and\na list of error messages identifying the roles on which the command\nfailed.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_start_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_start_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_start_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_start_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/start".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_start_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Stop a set of role instances.\n&lt;p&gt;\nBulk command operations are not atomic, and may contain partial failures.\nThe returned list will contain references to all successful commands, and\na list of error messages identifying the roles on which the command\nfailed.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_stop_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_stop_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Stop a set of role instances.\n&lt;p&gt;\nBulk command operations are not atomic, and may contain partial failures.\nThe returned list will contain references to all successful commands, and\na list of error messages identifying the roles on which the command\nfailed.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_stop_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_stop_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_stop_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_stop_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/stop".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_stop_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Cleanup a list of ZooKeeper server roles.\n&lt;p&gt;\nThis command removes snapshots and transaction log files kept by\nZooKeeper for backup purposes. Refer to the ZooKeeper documentation\nfor more details.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_zoo_keeper_cleanup_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_zoo_keeper_cleanup_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Cleanup a list of ZooKeeper server roles.\n&lt;p&gt;\nThis command removes snapshots and transaction log files kept by\nZooKeeper for backup purposes. Refer to the ZooKeeper documentation\nfor more details.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_zoo_keeper_cleanup_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_zoo_keeper_cleanup_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_zoo_keeper_cleanup_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_zoo_keeper_cleanup_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/zooKeeperCleanup".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_zoo_keeper_cleanup_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Initialize a list of ZooKeeper server roles.\n&lt;p&gt;\nThis applies to ZooKeeper services from CDH4. Before ZooKeeper server\nroles can be used, they need to be initialized.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_zoo_keeper_init_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_zoo_keeper_init_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Initialize a list of ZooKeeper server roles.\n&lt;p&gt;\nThis applies to ZooKeeper services from CDH4. Before ZooKeeper server\nroles can be used, they need to be initialized.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_zoo_keeper_init_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_zoo_keeper_init_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_zoo_keeper_init_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_zoo_keeper_init_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/zooKeeperInit".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_zoo_keeper_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Execute a role command by name.\n&lt;p/&gt;\nAvailable since API v6.
    # @param command_name the name of command to execute.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_commands_command_name_post(command_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_commands_command_name_post_with_http_info(command_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Execute a role command by name.\n&lt;p/&gt;\nAvailable since API v6.
    # @param command_name the name of command to execute.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_commands_command_name_post_with_http_info(command_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_command_name_post ..."
      end
      
      # verify the required parameter 'command_name' is set
      fail "Missing the required parameter 'command_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_command_name_post" if command_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_command_name_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_commands_command_name_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleCommands/{commandName}".sub('{format}','json').sub('{' + 'commandName' + '}', command_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_commands_command_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the information for all role config groups for\na given cluster and service.\n&lt;p&gt;\nAvailable since API v3.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_config_groups_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Returns the information for all role config groups for\na given cluster and service.\n&lt;p&gt;\nAvailable since API v3.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleConfigGroups".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates new role config groups.\nIt is not allowed to create base groups (base must be set to false.)\n&lt;p&gt;\nAvailable since API v3.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_config_groups_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Creates new role config groups.\nIt is not allowed to create base groups (base must be set to false.)\n&lt;p&gt;\nAvailable since API v3.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleConfigGroups".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Moves roles to the base role config group.\n\nThe roles can be moved from any role config group belonging to the same\nservice. The role type of the roles may vary. Each role will be moved to\nits corresponding base group depending on its role type.\n&lt;p&gt;\nAvailable since API v3.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_roles_put(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_config_groups_roles_put_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Moves roles to the base role config group.\n\nThe roles can be moved from any role config group belonging to the same\nservice. The role type of the roles may vary. Each role will be moved to\nits corresponding base group depending on its role type.\n&lt;p&gt;\nAvailable since API v3.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_roles_put_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_roles_put ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_roles_put" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_roles_put" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleConfigGroups/roles".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_roles_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the information for a role config group.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the requested group.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_get(role_config_group_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_get_with_http_info(role_config_group_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Returns the information for a role config group.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the requested group.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_get_with_http_info(role_config_group_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_get ..."
      end
      
      # verify the required parameter 'role_config_group_name' is set
      fail "Missing the required parameter 'role_config_group_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_get" if role_config_group_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleConfigGroups/{roleConfigGroupName}".sub('{format}','json').sub('{' + 'roleConfigGroupName' + '}', role_config_group_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates an existing role config group\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the requested group.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message The optional message describing the changes.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_put(role_config_group_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_put_with_http_info(role_config_group_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Updates an existing role config group\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the requested group.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message The optional message describing the changes.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_put_with_http_info(role_config_group_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_put ..."
      end
      
      # verify the required parameter 'role_config_group_name' is set
      fail "Missing the required parameter 'role_config_group_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_put" if role_config_group_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_put" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_put" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleConfigGroups/{roleConfigGroupName}".sub('{format}','json').sub('{' + 'roleConfigGroupName' + '}', role_config_group_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'message'] = opts[:'message'] if opts[:'message']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Deletes a role config group.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the requested group.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_delete(role_config_group_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_delete_with_http_info(role_config_group_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Deletes a role config group.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the requested group.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_delete_with_http_info(role_config_group_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_delete ..."
      end
      
      # verify the required parameter 'role_config_group_name' is set
      fail "Missing the required parameter 'role_config_group_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_delete" if role_config_group_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_delete" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_delete" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleConfigGroups/{roleConfigGroupName}".sub('{format}','json').sub('{' + 'roleConfigGroupName' + '}', role_config_group_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the current revision of the config\nfor the specified role config group.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the role config group.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_get(role_config_group_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_get_with_http_info(role_config_group_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Returns the current revision of the config\nfor the specified role config group.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the role config group.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_get_with_http_info(role_config_group_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_get ..."
      end
      
      # verify the required parameter 'role_config_group_name' is set
      fail "Missing the required parameter 'role_config_group_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_get" if role_config_group_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleConfigGroups/{roleConfigGroupName}/config".sub('{format}','json').sub('{' + 'roleConfigGroupName' + '}', role_config_group_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates the config for the given role config group.
    # @param role_config_group_name The name of the role config group.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_put(role_config_group_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_put_with_http_info(role_config_group_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Updates the config for the given role config group.
    # @param role_config_group_name The name of the role config group.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_put_with_http_info(role_config_group_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_put ..."
      end
      
      # verify the required parameter 'role_config_group_name' is set
      fail "Missing the required parameter 'role_config_group_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_put" if role_config_group_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_put" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_put" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleConfigGroups/{roleConfigGroupName}/config".sub('{format}','json').sub('{' + 'roleConfigGroupName' + '}', role_config_group_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'message'] = opts[:'message'] if opts[:'message']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_config_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns all roles in the given role config group.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the role config group.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_get(role_config_group_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_get_with_http_info(role_config_group_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Returns all roles in the given role config group.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the role config group.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_get_with_http_info(role_config_group_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_get ..."
      end
      
      # verify the required parameter 'role_config_group_name' is set
      fail "Missing the required parameter 'role_config_group_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_get" if role_config_group_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleConfigGroups/{roleConfigGroupName}/roles".sub('{format}','json').sub('{' + 'roleConfigGroupName' + '}', role_config_group_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Moves roles to the specified role config group.\n\nThe roles can be moved from any role config group belonging\nto the same service. The role type of the destination group\nmust match the role type of the roles.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the role config group.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_put(role_config_group_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_put_with_http_info(role_config_group_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Moves roles to the specified role config group.\n\nThe roles can be moved from any role config group belonging\nto the same service. The role type of the destination group\nmust match the role type of the roles.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the role config group.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_put_with_http_info(role_config_group_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_put ..."
      end
      
      # verify the required parameter 'role_config_group_name' is set
      fail "Missing the required parameter 'role_config_group_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_put" if role_config_group_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_put" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_put" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleConfigGroups/{roleConfigGroupName}/roles".sub('{format}','json').sub('{' + 'roleConfigGroupName' + '}', role_config_group_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_config_groups_role_config_group_name_roles_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # List the supported role types for a service.
    # @param service_name The service to modify.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_role_types_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_role_types_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # List the supported role types for a service.
    # @param service_name The service to modify.
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_role_types_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_types_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_role_types_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_role_types_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roleTypes".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_role_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Lists all roles of a given service.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_roles_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_roles_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Lists all roles of a given service.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_roles_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roles".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create new roles in a given service.\n\n&lt;table&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Service Type&lt;/th&gt;\n&lt;th&gt;Available Role Types&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;HDFS (CDH3)&lt;/td&gt;\n&lt;td&gt;NAMENODE, DATANODE, SECONDARYNAMENODE, BALANCER, GATEWAY&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;HDFS (CDH4)&lt;/td&gt;\n&lt;td&gt;NAMENODE, DATANODE, SECONDARYNAMENODE, BALANCER, HTTPFS,\nFAILOVERCONTROLLER, GATEWAY, JOURNALNODE&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;HDFS (CDH5)&lt;/td&gt;\n&lt;td&gt;NAMENODE, DATANODE, SECONDARYNAMENODE, BALANCER, HTTPFS,\nFAILOVERCONTROLLER, GATEWAY, JOURNALNODE, NFSGATEWAY&lt;/td&gt;\n&lt;/tr&gt;\n&lt;td&gt;MAPREDUCE&lt;/td&gt;\n&lt;td&gt;JOBTRACKER, TASKTRACKER, GATEWAY, FAILOVERCONTROLLER,&lt;/td&gt;\n&lt;/tr&gt;\n&lt;td&gt;HBASE&lt;/td&gt;\n&lt;td&gt;MASTER, REGIONSERVER, GATEWAY, HBASETHRIFTSERVER, HBASERESTSERVER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;YARN&lt;/td&gt;\n&lt;td&gt;RESOURCEMANAGER, NODEMANAGER, JOBHISTORY, GATEWAY&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;OOZIE&lt;/td&gt;\n&lt;td&gt;OOZIE_SERVER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;ZOOKEEPER&lt;/td&gt;\n&lt;td&gt;SERVER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;HUE (CDH3)&lt;/td&gt;\n&lt;td&gt;HUE_SERVER, BEESWAX_SERVER, KT_RENEWER, JOBSUBD&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;HUE (CDH4)&lt;/td&gt;\n&lt;td&gt;HUE_SERVER, BEESWAX_SERVER, KT_RENEWER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;HUE (CDH5)&lt;/td&gt;\n&lt;td&gt;HUE_SERVER, KT_RENEWER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;FLUME&lt;/td&gt;\n&lt;td&gt;AGENT&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;IMPALA (CDH4)&lt;/td&gt;\n&lt;td&gt;IMPALAD, STATESTORE, CATALOGSERVER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;IMPALA (CDH5)&lt;/td&gt;\n&lt;td&gt;IMPALAD, STATESTORE, CATALOGSERVER, LLAMA&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;HIVE&lt;/td&gt;\n&lt;td&gt;HIVESERVER2, HIVEMETASTORE, WEBHCAT, GATEWAY&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;SOLR&lt;/td&gt;\n&lt;td&gt;SOLR_SERVER, GATEWAY&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;SQOOP&lt;/td&gt;\n&lt;td&gt;SQOOP_SERVER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;SQOOP_CLIENT&lt;/td&gt;\n&lt;td&gt;GATEWAY&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;SENTRY&lt;/td&gt;\n&lt;td&gt;SENTRY_SERVER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;ACCUMULO16&lt;/td&gt;\n&lt;td&gt;GARBAGE_COLLECTOR, GATEWAY, ACCUMULO16_MASTER, MONITOR,\nACCUMULO16_TSERVER, TRACER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;KMS&lt;/td&gt;\n&lt;td&gt;KMS&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;KS_INDEXER&lt;/td&gt;\n&lt;td&gt;HBASE_INDEXER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;SPARK_ON_YARN&lt;/td&gt;\n&lt;td&gt;GATEWAY, SPARK_YARN_HISTORY_SERVER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n\n&lt;/table&gt;\n\nWhen specifying roles to be created, the names provided for each role\nmust not conflict with the names that CM auto-generates for roles.\nSpecifically, names of the form\n\&quot;&lt;service name&gt;-&lt;role type&gt;-&lt;arbitrary value&gt;\&quot; cannot be used unless the\n&lt;arbitrary value&gt; is the same one CM would use. If CM detects such a\nconflict, the error message will indicate what &lt;arbitrary value&gt; is safe\nto use. Alternately, a differently formatted name should be used.\n\nSince API v6: The role name can be left blank to allow CM to generate the\nname.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_roles_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_roles_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Create new roles in a given service.\n\n&lt;table&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Service Type&lt;/th&gt;\n&lt;th&gt;Available Role Types&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;HDFS (CDH3)&lt;/td&gt;\n&lt;td&gt;NAMENODE, DATANODE, SECONDARYNAMENODE, BALANCER, GATEWAY&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;HDFS (CDH4)&lt;/td&gt;\n&lt;td&gt;NAMENODE, DATANODE, SECONDARYNAMENODE, BALANCER, HTTPFS,\nFAILOVERCONTROLLER, GATEWAY, JOURNALNODE&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;HDFS (CDH5)&lt;/td&gt;\n&lt;td&gt;NAMENODE, DATANODE, SECONDARYNAMENODE, BALANCER, HTTPFS,\nFAILOVERCONTROLLER, GATEWAY, JOURNALNODE, NFSGATEWAY&lt;/td&gt;\n&lt;/tr&gt;\n&lt;td&gt;MAPREDUCE&lt;/td&gt;\n&lt;td&gt;JOBTRACKER, TASKTRACKER, GATEWAY, FAILOVERCONTROLLER,&lt;/td&gt;\n&lt;/tr&gt;\n&lt;td&gt;HBASE&lt;/td&gt;\n&lt;td&gt;MASTER, REGIONSERVER, GATEWAY, HBASETHRIFTSERVER, HBASERESTSERVER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;YARN&lt;/td&gt;\n&lt;td&gt;RESOURCEMANAGER, NODEMANAGER, JOBHISTORY, GATEWAY&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;OOZIE&lt;/td&gt;\n&lt;td&gt;OOZIE_SERVER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;ZOOKEEPER&lt;/td&gt;\n&lt;td&gt;SERVER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;HUE (CDH3)&lt;/td&gt;\n&lt;td&gt;HUE_SERVER, BEESWAX_SERVER, KT_RENEWER, JOBSUBD&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;HUE (CDH4)&lt;/td&gt;\n&lt;td&gt;HUE_SERVER, BEESWAX_SERVER, KT_RENEWER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;HUE (CDH5)&lt;/td&gt;\n&lt;td&gt;HUE_SERVER, KT_RENEWER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;FLUME&lt;/td&gt;\n&lt;td&gt;AGENT&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;IMPALA (CDH4)&lt;/td&gt;\n&lt;td&gt;IMPALAD, STATESTORE, CATALOGSERVER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;IMPALA (CDH5)&lt;/td&gt;\n&lt;td&gt;IMPALAD, STATESTORE, CATALOGSERVER, LLAMA&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;HIVE&lt;/td&gt;\n&lt;td&gt;HIVESERVER2, HIVEMETASTORE, WEBHCAT, GATEWAY&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;SOLR&lt;/td&gt;\n&lt;td&gt;SOLR_SERVER, GATEWAY&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;SQOOP&lt;/td&gt;\n&lt;td&gt;SQOOP_SERVER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;SQOOP_CLIENT&lt;/td&gt;\n&lt;td&gt;GATEWAY&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;SENTRY&lt;/td&gt;\n&lt;td&gt;SENTRY_SERVER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;ACCUMULO16&lt;/td&gt;\n&lt;td&gt;GARBAGE_COLLECTOR, GATEWAY, ACCUMULO16_MASTER, MONITOR,\nACCUMULO16_TSERVER, TRACER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;KMS&lt;/td&gt;\n&lt;td&gt;KMS&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;KS_INDEXER&lt;/td&gt;\n&lt;td&gt;HBASE_INDEXER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;SPARK_ON_YARN&lt;/td&gt;\n&lt;td&gt;GATEWAY, SPARK_YARN_HISTORY_SERVER&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n\n&lt;/table&gt;\n\nWhen specifying roles to be created, the names provided for each role\nmust not conflict with the names that CM auto-generates for roles.\nSpecifically, names of the form\n\&quot;&lt;service name&gt;-&lt;role type&gt;-&lt;arbitrary value&gt;\&quot; cannot be used unless the\n&lt;arbitrary value&gt; is the same one CM would use. If CM detects such a\nconflict, the error message will indicate what &lt;arbitrary value&gt; is safe\nto use. Alternately, a differently formatted name should be used.\n\nSince API v6: The role name can be left blank to allow CM to generate the\nname.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_roles_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roles".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieves detailed information about a role.
    # @param role_name The role name.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_get(role_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_roles_role_name_get_with_http_info(role_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Retrieves detailed information about a role.
    # @param role_name The role name.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_get_with_http_info(role_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_get" if role_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roles/{roleName}".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Deletes a role from a given service.
    # @param role_name The role name.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_delete(role_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_roles_role_name_delete_with_http_info(role_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Deletes a role from a given service.
    # @param role_name The role name.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_delete_with_http_info(role_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_delete ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_delete" if role_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_delete" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_delete" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roles/{roleName}".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # List active role commands.
    # @param role_name The role to start.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_get(role_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_get_with_http_info(role_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # List active role commands.
    # @param role_name The role to start.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_get_with_http_info(role_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_get" if role_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/commands".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Put the role into maintenance mode. This is a synchronous command. The\nresult is known immediately upon return.\n\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param role_name The role name.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_enter_maintenance_mode_post(role_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_enter_maintenance_mode_post_with_http_info(role_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Put the role into maintenance mode. This is a synchronous command. The\nresult is known immediately upon return.\n\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param role_name The role name.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_enter_maintenance_mode_post_with_http_info(role_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_enter_maintenance_mode_post ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_enter_maintenance_mode_post" if role_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_enter_maintenance_mode_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_enter_maintenance_mode_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/commands/enterMaintenanceMode".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_enter_maintenance_mode_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Take the role out of maintenance mode. This is a synchronous command. The\nresult is known immediately upon return.\n\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param role_name The role name.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_exit_maintenance_mode_post(role_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_exit_maintenance_mode_post_with_http_info(role_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Take the role out of maintenance mode. This is a synchronous command. The\nresult is known immediately upon return.\n\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param role_name The role name.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_exit_maintenance_mode_post_with_http_info(role_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_exit_maintenance_mode_post ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_exit_maintenance_mode_post" if role_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_exit_maintenance_mode_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_exit_maintenance_mode_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/commands/exitMaintenanceMode".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_commands_exit_maintenance_mode_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieves the configuration of a specific role. Note that the \&quot;full\&quot; view\nperforms validation on the configuration, which could take a few seconds\non a large cluster (around 500 nodes or more).
    # @param role_name The role to look up.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_get(role_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_get_with_http_info(role_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Retrieves the configuration of a specific role. Note that the \&quot;full\&quot; view\nperforms validation on the configuration, which could take a few seconds\non a large cluster (around 500 nodes or more).
    # @param role_name The role to look up.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_get_with_http_info(role_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_get" if role_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/config".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates the role configuration with the given values.\n&lt;p&gt;\nIf a value is set in the given configuration, it will be added\nto the role&#39;s configuration, replacing any existing entries.\nIf a value is unset (its value is null), the existing\nconfiguration for the attribute will be erased, if any.\n&lt;p&gt;\nAttributes that are not listed in the input will maintain their\ncurrent values in the configuration.
    # @param role_name The role to look up.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_put(role_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_put_with_http_info(role_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Updates the role configuration with the given values.\n&lt;p&gt;\nIf a value is set in the given configuration, it will be added\nto the role&#39;s configuration, replacing any existing entries.\nIf a value is unset (its value is null), the existing\nconfiguration for the attribute will be erased, if any.\n&lt;p&gt;\nAttributes that are not listed in the input will maintain their\ncurrent values in the configuration.
    # @param role_name The role to look up.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_put_with_http_info(role_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_put ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_put" if role_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_put" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_put" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/config".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'message'] = opts[:'message'] if opts[:'message']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_config_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieves the log file for the role&#39;s main process.\n&lt;p&gt;\nIf the role is not started, this will be the log file associated with\nthe last time the role was run.\n&lt;p&gt;\nLog files are returned as plain text (type \&quot;text/plain\&quot;).
    # @param role_name The role to fetch logs from.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_full_get(role_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_full_get_with_http_info(role_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Retrieves the log file for the role&#39;s main process.\n&lt;p&gt;\nIf the role is not started, this will be the log file associated with\nthe last time the role was run.\n&lt;p&gt;\nLog files are returned as plain text (type \&quot;text/plain\&quot;).
    # @param role_name The role to fetch logs from.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_full_get_with_http_info(role_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_full_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_full_get" if role_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_full_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_full_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/logs/full".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_full_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieves the role&#39;s standard error output.\n&lt;p&gt;\nIf the role is not started, this will be the output associated with\nthe last time the role was run.\n&lt;p&gt;\nLog files are returned as plain text (type \&quot;text/plain\&quot;).
    # @param role_name The role to fetch stderr from.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stderr_get(role_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stderr_get_with_http_info(role_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Retrieves the role&#39;s standard error output.\n&lt;p&gt;\nIf the role is not started, this will be the output associated with\nthe last time the role was run.\n&lt;p&gt;\nLog files are returned as plain text (type \&quot;text/plain\&quot;).
    # @param role_name The role to fetch stderr from.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stderr_get_with_http_info(role_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stderr_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stderr_get" if role_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stderr_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stderr_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/logs/stderr".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stderr_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieves the role&#39;s standard output.\n&lt;p&gt;\nIf the role is not started, this will be the output associated with\nthe last time the role was run.\n&lt;p&gt;\nLog files are returned as plain text (type \&quot;text/plain\&quot;).
    # @param role_name The role to fetch stdout from.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stdout_get(role_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stdout_get_with_http_info(role_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Retrieves the role&#39;s standard output.\n&lt;p&gt;\nIf the role is not started, this will be the output associated with\nthe last time the role was run.\n&lt;p&gt;\nLog files are returned as plain text (type \&quot;text/plain\&quot;).
    # @param role_name The role to fetch stdout from.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stdout_get_with_http_info(role_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stdout_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stdout_get" if role_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stdout_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stdout_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/logs/stdout".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_logs_stdout_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Fetch metric readings for a particular role.\n&lt;p&gt;\nBy default, this call will look up all metrics available for the role. If\nonly specific metrics are desired, use the &lt;i&gt;metrics&lt;/i&gt; parameter.\n&lt;p&gt;\nBy default, the returned results correspond to a 5 minute window based on\nthe provided end time (which defaults to the current server time). The\n&lt;i&gt;from&lt;/i&gt; and &lt;i&gt;to&lt;/i&gt; parameters can be used to control the window\nbeing queried. A maximum window of 3 hours is enforced.\n&lt;p&gt;\nWhen requesting a \&quot;full\&quot; view, aside from the extended properties of the\nreturned metric data, the collection will also contain information about\nall metrics available for the role, even if no readings are available\nin the requested window.
    # @param role_name The name of the role.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Start of the period to query.
    # @option opts [String] :to End of the period to query.
    # @option opts [String] :metrics Filter for which metrics to query.
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_metrics_get(role_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_roles_role_name_metrics_get_with_http_info(role_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Fetch metric readings for a particular role.\n&lt;p&gt;\nBy default, this call will look up all metrics available for the role. If\nonly specific metrics are desired, use the &lt;i&gt;metrics&lt;/i&gt; parameter.\n&lt;p&gt;\nBy default, the returned results correspond to a 5 minute window based on\nthe provided end time (which defaults to the current server time). The\n&lt;i&gt;from&lt;/i&gt; and &lt;i&gt;to&lt;/i&gt; parameters can be used to control the window\nbeing queried. A maximum window of 3 hours is enforced.\n&lt;p&gt;\nWhen requesting a \&quot;full\&quot; view, aside from the extended properties of the\nreturned metric data, the collection will also contain information about\nall metrics available for the role, even if no readings are available\nin the requested window.
    # @param role_name The name of the role.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Start of the period to query.
    # @option opts [String] :to End of the period to query.
    # @option opts [String] :metrics Filter for which metrics to query.
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_metrics_get_with_http_info(role_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_metrics_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_metrics_get" if role_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_metrics_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_metrics_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/metrics".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'metrics'] = opts[:'metrics'] if opts[:'metrics']
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_metrics_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param role_name 
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_get(role_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_get_with_http_info(role_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # 
    # @param role_name 
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_get_with_http_info(role_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_get" if role_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/process".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the contents of the specified config file.\nA multi-level file name (e.g. hadoop-conf/hdfs-site.xml) is\nacceptable here.
    # @param config_file_name Name of the config file to get.
    # @param role_name 
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_config_files_config_file_name_get(config_file_name, role_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_config_files_config_file_name_get_with_http_info(config_file_name, role_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Returns the contents of the specified config file.\nA multi-level file name (e.g. hadoop-conf/hdfs-site.xml) is\nacceptable here.
    # @param config_file_name Name of the config file to get.
    # @param role_name 
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_config_files_config_file_name_get_with_http_info(config_file_name, role_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_config_files_config_file_name_get ..."
      end
      
      # verify the required parameter 'config_file_name' is set
      fail "Missing the required parameter 'config_file_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_config_files_config_file_name_get" if config_file_name.nil?
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_config_files_config_file_name_get" if role_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_config_files_config_file_name_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_config_files_config_file_name_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/process/configFiles/{configFileName }".sub('{format}','json').sub('{' + 'configFileName' + '}', config_file_name.to_s).sub('{' + 'roleName' + '}', role_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_roles_role_name_process_config_files_config_file_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns information for all snapshot policies.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view to materialize.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_snapshots_policies_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_snapshots_policies_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Returns information for all snapshot policies.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view to materialize.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_snapshots_policies_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_snapshots_policies_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/snapshots/policies".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_snapshots_policies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates one or more snapshot policies.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_snapshots_policies_post(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_snapshots_policies_post_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Creates one or more snapshot policies.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_snapshots_policies_post_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_snapshots_policies_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_post" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/snapshots/policies".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_snapshots_policies_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns information for a specific snapshot policy.
    # @param policy_name Name of an existing snapshot policy.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view to materialize.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_get(policy_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_get_with_http_info(policy_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Returns information for a specific snapshot policy.
    # @param policy_name Name of an existing snapshot policy.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view to materialize.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_get_with_http_info(policy_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_get ..."
      end
      
      # verify the required parameter 'policy_name' is set
      fail "Missing the required parameter 'policy_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_get" if policy_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/snapshots/policies/{policyName}".sub('{format}','json').sub('{' + 'policyName' + '}', policy_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates an existing snapshot policy.
    # @param policy_name Name of an existing snapshot policy.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_put(policy_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_put_with_http_info(policy_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Updates an existing snapshot policy.
    # @param policy_name Name of an existing snapshot policy.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_put_with_http_info(policy_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_put ..."
      end
      
      # verify the required parameter 'policy_name' is set
      fail "Missing the required parameter 'policy_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_put" if policy_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_put" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_put" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/snapshots/policies/{policyName}".sub('{format}','json').sub('{' + 'policyName' + '}', policy_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Deletes an existing snapshot policy.
    # @param policy_name Name of an existing snapshot policy.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_delete(policy_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_delete_with_http_info(policy_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Deletes an existing snapshot policy.
    # @param policy_name Name of an existing snapshot policy.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_delete_with_http_info(policy_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_delete ..."
      end
      
      # verify the required parameter 'policy_name' is set
      fail "Missing the required parameter 'policy_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_delete" if policy_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_delete" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_delete" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/snapshots/policies/{policyName}".sub('{format}','json').sub('{' + 'policyName' + '}', policy_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a list of commands triggered by a snapshot policy.
    # @param policy_name Name of an existing snapshot policy.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Maximum number of commands to retrieve.
    # @option opts [String] :offset Index of first command to retrieve.
    # @option opts [String] :view The view to materialize.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_history_get(policy_name, service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_history_get_with_http_info(policy_name, service_name, cluster_name, opts)
      return nil
    end

    # 
    # Returns a list of commands triggered by a snapshot policy.
    # @param policy_name Name of an existing snapshot policy.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Maximum number of commands to retrieve.
    # @option opts [String] :offset Index of first command to retrieve.
    # @option opts [String] :view The view to materialize.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_history_get_with_http_info(policy_name, service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_history_get ..."
      end
      
      # verify the required parameter 'policy_name' is set
      fail "Missing the required parameter 'policy_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_history_get" if policy_name.nil?
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_history_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_history_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/snapshots/policies/{policyName}/history".sub('{format}','json').sub('{' + 'policyName' + '}', policy_name.to_s).sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'offset'] = opts[:'offset'] if opts[:'offset']
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_snapshots_policies_policy_name_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a list of applications that satisfy the filter\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name The name of the service
    # @param service_name2 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter A filter to apply to the applications. A basic filter tests the\nvalue of an attribute and looks something like &#39;executing = true&#39; or\n&#39;user = root&#39;. Multiple basic filters can be combined into a complex\nexpression using standard and / or boolean logic and parenthesis.\nAn example of a complex filter is: &#39;application_duration &gt; 5s and (user = root or\nuser = myUserName&#39;).
    # @option opts [String] :from Start of the period to query in ISO 8601 format (defaults to 5\nminutes before the &#39;to&#39; time).
    # @option opts [String] :to End of the period to query in ISO 8601 format (defaults to now).
    # @option opts [String] :limit The maximum number of applications to return. Applications will be\nreturned in the following order:\n&lt;ul&gt;\n&lt;li&gt; All executing applications, ordered from longest to shortest running &lt;/li&gt;\n&lt;li&gt; All completed applications order by end time descending. &lt;/li&gt;\n&lt;/ul&gt;
    # @option opts [String] :offset The offset to start returning applications from. This is useful\nfor paging through lists of applications. Note that this has non-deterministic\nbehavior if executing applications are included in the response because they\ncan disappear from the list while paging. To exclude executing applications\nfrom the response and a &#39;executing = false&#39; clause to your filter.
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_yarn_applications_get(service_name, service_name2, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_yarn_applications_get_with_http_info(service_name, service_name2, cluster_name, opts)
      return nil
    end

    # 
    # Returns a list of applications that satisfy the filter\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name The name of the service
    # @param service_name2 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter A filter to apply to the applications. A basic filter tests the\nvalue of an attribute and looks something like &#39;executing = true&#39; or\n&#39;user = root&#39;. Multiple basic filters can be combined into a complex\nexpression using standard and / or boolean logic and parenthesis.\nAn example of a complex filter is: &#39;application_duration &gt; 5s and (user = root or\nuser = myUserName&#39;).
    # @option opts [String] :from Start of the period to query in ISO 8601 format (defaults to 5\nminutes before the &#39;to&#39; time).
    # @option opts [String] :to End of the period to query in ISO 8601 format (defaults to now).
    # @option opts [String] :limit The maximum number of applications to return. Applications will be\nreturned in the following order:\n&lt;ul&gt;\n&lt;li&gt; All executing applications, ordered from longest to shortest running &lt;/li&gt;\n&lt;li&gt; All completed applications order by end time descending. &lt;/li&gt;\n&lt;/ul&gt;
    # @option opts [String] :offset The offset to start returning applications from. This is useful\nfor paging through lists of applications. Note that this has non-deterministic\nbehavior if executing applications are included in the response because they\ncan disappear from the list while paging. To exclude executing applications\nfrom the response and a &#39;executing = false&#39; clause to your filter.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_yarn_applications_get_with_http_info(service_name, service_name2, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_yarn_applications_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_yarn_applications_get" if service_name.nil?
      
      # verify the required parameter 'service_name2' is set
      fail "Missing the required parameter 'service_name2' when calling api_v11_clusters_cluster_name_services_service_name_yarn_applications_get" if service_name2.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_yarn_applications_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/yarnApplications".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'serviceName' + '}', service_name2.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if opts[:'filter']
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'offset'] = opts[:'offset'] if opts[:'offset']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_yarn_applications_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the list of all attributes that the Service Monitor can associate\nwith YARN applications.\n&lt;p&gt;\nExamples of attributes include the user who ran the application and the\nnumber of maps completed by the application.\n&lt;p&gt;\nThese attributes can be used to search for specific YARN applications through\nthe getYarnApplications API. For example the &#39;user&#39; attribute could be used\nin the search &#39;user = root&#39;. If the attribute is numeric it can also be used\nas a metric in a tsquery (ie, &#39;select maps_completed from YARN_APPLICATIONS&#39;).\n&lt;p&gt;\nNote that this response is identical for all YARN services.\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_yarn_applications_attributes_get(service_name, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_yarn_applications_attributes_get_with_http_info(service_name, cluster_name, opts)
      return nil
    end

    # 
    # Returns the list of all attributes that the Service Monitor can associate\nwith YARN applications.\n&lt;p&gt;\nExamples of attributes include the user who ran the application and the\nnumber of maps completed by the application.\n&lt;p&gt;\nThese attributes can be used to search for specific YARN applications through\nthe getYarnApplications API. For example the &#39;user&#39; attribute could be used\nin the search &#39;user = root&#39;. If the attribute is numeric it can also be used\nas a metric in a tsquery (ie, &#39;select maps_completed from YARN_APPLICATIONS&#39;).\n&lt;p&gt;\nNote that this response is identical for all YARN services.\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_yarn_applications_attributes_get_with_http_info(service_name, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_yarn_applications_attributes_get ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_yarn_applications_attributes_get" if service_name.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_yarn_applications_attributes_get" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/yarnApplications/attributes".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_yarn_applications_attributes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Kills an YARN Application\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name The name of the service
    # @param application_id The applicationId to kill
    # @param service_name2 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_clusters_cluster_name_services_service_name_yarn_applications_application_id_kill_post(service_name, application_id, service_name2, cluster_name, opts = {})
      api_v11_clusters_cluster_name_services_service_name_yarn_applications_application_id_kill_post_with_http_info(service_name, application_id, service_name2, cluster_name, opts)
      return nil
    end

    # 
    # Kills an YARN Application\n&lt;p&gt;\nAvailable since API v6.
    # @param service_name The name of the service
    # @param application_id The applicationId to kill
    # @param service_name2 
    # @param cluster_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_clusters_cluster_name_services_service_name_yarn_applications_application_id_kill_post_with_http_info(service_name, application_id, service_name2, cluster_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_clusters_cluster_name_services_service_name_yarn_applications_application_id_kill_post ..."
      end
      
      # verify the required parameter 'service_name' is set
      fail "Missing the required parameter 'service_name' when calling api_v11_clusters_cluster_name_services_service_name_yarn_applications_application_id_kill_post" if service_name.nil?
      
      # verify the required parameter 'application_id' is set
      fail "Missing the required parameter 'application_id' when calling api_v11_clusters_cluster_name_services_service_name_yarn_applications_application_id_kill_post" if application_id.nil?
      
      # verify the required parameter 'service_name2' is set
      fail "Missing the required parameter 'service_name2' when calling api_v11_clusters_cluster_name_services_service_name_yarn_applications_application_id_kill_post" if service_name2.nil?
      
      # verify the required parameter 'cluster_name' is set
      fail "Missing the required parameter 'cluster_name' when calling api_v11_clusters_cluster_name_services_service_name_yarn_applications_application_id_kill_post" if cluster_name.nil?
      
      # resource path
      path = "/api/v11/clusters/{clusterName}/services/{serviceName}/yarnApplications/{applicationId}/kill".sub('{format}','json').sub('{' + 'serviceName' + '}', service_name.to_s).sub('{' + 'applicationId' + '}', application_id.to_s).sub('{' + 'serviceName' + '}', service_name2.to_s).sub('{' + 'clusterName' + '}', cluster_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_clusters_cluster_name_services_service_name_yarn_applications_application_id_kill_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve the default configuration for all hosts.\n&lt;p/&gt;\nThese values will apply to all hosts managed by CM unless overridden\nat the host level.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_cm_all_hosts_config_get(opts = {})
      api_v11_cm_all_hosts_config_get_with_http_info(opts)
      return nil
    end

    # 
    # Retrieve the default configuration for all hosts.\n&lt;p/&gt;\nThese values will apply to all hosts managed by CM unless overridden\nat the host level.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_all_hosts_config_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_all_hosts_config_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/allHosts/config".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_all_hosts_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update the default configuration values for all hosts.\n&lt;p/&gt;\nNote that this does not override values set at the host level. It just\nupdates the default values that will be inherited by each host&#39;s\nconfiguration.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [nil]
    def api_v11_cm_all_hosts_config_put(opts = {})
      api_v11_cm_all_hosts_config_put_with_http_info(opts)
      return nil
    end

    # 
    # Update the default configuration values for all hosts.\n&lt;p/&gt;\nNote that this does not override values set at the host level. It just\nupdates the default values that will be inherited by each host&#39;s\nconfiguration.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_all_hosts_config_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_all_hosts_config_put ..."
      end
      
      # resource path
      path = "/api/v11/cm/allHosts/config".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'message'] = opts[:'message'] if opts[:'message']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_all_hosts_config_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # List active global commands.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_cm_commands_get(opts = {})
      api_v11_cm_commands_get_with_http_info(opts)
      return nil
    end

    # 
    # List active global commands.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_commands_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_commands_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/commands".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_commands_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Collect diagnostic data from hosts managed by Cloudera Manager.\n&lt;p&gt;\nAfter the command has completed, the ApiCommand will contain a\nresultDataUrl from where you can download the result.\n&lt;p/&gt;\nOnly available with Cloudera Manager Enterprise Edition.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_commands_collect_diagnostic_data_post(opts = {})
      api_v11_cm_commands_collect_diagnostic_data_post_with_http_info(opts)
      return nil
    end

    # 
    # Collect diagnostic data from hosts managed by Cloudera Manager.\n&lt;p&gt;\nAfter the command has completed, the ApiCommand will contain a\nresultDataUrl from where you can download the result.\n&lt;p/&gt;\nOnly available with Cloudera Manager Enterprise Edition.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_commands_collect_diagnostic_data_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_commands_collect_diagnostic_data_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/commands/collectDiagnosticData".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_commands_collect_diagnostic_data_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Generate missing Kerberos credentials.\n&lt;p&gt;\nThis command will affect all services that have been configured to use\nKerberos, and haven&#39;t had their credentials generated yet.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_commands_generate_credentials_post(opts = {})
      api_v11_cm_commands_generate_credentials_post_with_http_info(opts)
      return nil
    end

    # 
    # Generate missing Kerberos credentials.\n&lt;p&gt;\nThis command will affect all services that have been configured to use\nKerberos, and haven&#39;t had their credentials generated yet.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_commands_generate_credentials_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_commands_generate_credentials_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/commands/generateCredentials".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_commands_generate_credentials_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Perform installation on a set of hosts.\n&lt;p/&gt;\nThis command installs Cloudera Manager Agent on a\nset of hosts.\n&lt;p/&gt;\nAvailable since API v6.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_commands_host_install_post(opts = {})
      api_v11_cm_commands_host_install_post_with_http_info(opts)
      return nil
    end

    # 
    # Perform installation on a set of hosts.\n&lt;p/&gt;\nThis command installs Cloudera Manager Agent on a\nset of hosts.\n&lt;p/&gt;\nAvailable since API v6.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_commands_host_install_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_commands_host_install_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/commands/hostInstall".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_commands_host_install_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Decommission the given hosts.\nAll slave roles on the hosts will be decommissioned.\nAll other roles will be stopped.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_commands_hosts_decommission_post(opts = {})
      api_v11_cm_commands_hosts_decommission_post_with_http_info(opts)
      return nil
    end

    # 
    # Decommission the given hosts.\nAll slave roles on the hosts will be decommissioned.\nAll other roles will be stopped.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_commands_hosts_decommission_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_commands_hosts_decommission_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/commands/hostsDecommission".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_commands_hosts_decommission_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Recommission the given hosts.\nAll slave roles on the hosts will be recommissioned.\nRoles are not started after this command. Use hostsStartRoles command\nfor that.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_commands_hosts_recommission_post(opts = {})
      api_v11_cm_commands_hosts_recommission_post_with_http_info(opts)
      return nil
    end

    # 
    # Recommission the given hosts.\nAll slave roles on the hosts will be recommissioned.\nRoles are not started after this command. Use hostsStartRoles command\nfor that.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_commands_hosts_recommission_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_commands_hosts_recommission_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/commands/hostsRecommission".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_commands_hosts_recommission_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Start all the roles on the given hosts.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_commands_hosts_start_roles_post(opts = {})
      api_v11_cm_commands_hosts_start_roles_post_with_http_info(opts)
      return nil
    end

    # 
    # Start all the roles on the given hosts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_commands_hosts_start_roles_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_commands_hosts_start_roles_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/commands/hostsStartRoles".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_commands_hosts_start_roles_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Imports the KDC Account Manager credentials needed by Cloudera\nManager to create kerberos principals needed by CDH services.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username Username of the Account Manager. Full name including the Kerberos\nrealm must be specified.
    # @option opts [String] :password Password for the Account Manager.\n\nreturn Information about the submitted command.
    # @return [nil]
    def api_v11_cm_commands_import_admin_credentials_post(opts = {})
      api_v11_cm_commands_import_admin_credentials_post_with_http_info(opts)
      return nil
    end

    # 
    # Imports the KDC Account Manager credentials needed by Cloudera\nManager to create kerberos principals needed by CDH services.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username Username of the Account Manager. Full name including the Kerberos\nrealm must be specified.
    # @option opts [String] :password Password for the Account Manager.\n\nreturn Information about the submitted command.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_commands_import_admin_credentials_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_commands_import_admin_credentials_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/commands/importAdminCredentials".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'username'] = opts[:'username'] if opts[:'username']
      query_params[:'password'] = opts[:'password'] if opts[:'password']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_commands_import_admin_credentials_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Imports the Kerberos credentials for the specified principal\nwhich can then be used to add to a role&#39;s keytab by running\nGenerate Credentials command.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :principal Name of the principal. Full name including the Kerberos\nrealm must be specified. If it already exists, it will be overwritten.
    # @option opts [String] :password Password for the Kerberos principal. Cloudera Manager\nwill encrypt the principal and password and use it when needed for a daemon.
    # @option opts [String] :kvno Key-version number of the password.\n\nreturn Information about the submitted command.
    # @return [nil]
    def api_v11_cm_commands_import_kerberos_principal_post(opts = {})
      api_v11_cm_commands_import_kerberos_principal_post_with_http_info(opts)
      return nil
    end

    # 
    # Imports the Kerberos credentials for the specified principal\nwhich can then be used to add to a role&#39;s keytab by running\nGenerate Credentials command.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :principal Name of the principal. Full name including the Kerberos\nrealm must be specified. If it already exists, it will be overwritten.
    # @option opts [String] :password Password for the Kerberos principal. Cloudera Manager\nwill encrypt the principal and password and use it when needed for a daemon.
    # @option opts [String] :kvno Key-version number of the password.\n\nreturn Information about the submitted command.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_commands_import_kerberos_principal_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_commands_import_kerberos_principal_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/commands/importKerberosPrincipal".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'principal'] = opts[:'principal'] if opts[:'principal']
      query_params[:'password'] = opts[:'password'] if opts[:'password']
      query_params[:'kvno'] = opts[:'kvno'] if opts[:'kvno']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_commands_import_kerberos_principal_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Runs the host inspector on the configured hosts.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_commands_inspect_hosts_post(opts = {})
      api_v11_cm_commands_inspect_hosts_post_with_http_info(opts)
      return nil
    end

    # 
    # Runs the host inspector on the configured hosts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_commands_inspect_hosts_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_commands_inspect_hosts_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/commands/inspectHosts".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_commands_inspect_hosts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve the Cloudera Manager settings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view to materialize, either \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_cm_config_get(opts = {})
      api_v11_cm_config_get_with_http_info(opts)
      return nil
    end

    # 
    # Retrieve the Cloudera Manager settings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view to materialize, either \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_config_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_config_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/config".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update the Cloudera Manager settings.\n&lt;p&gt;\nIf a value is set in the given configuration, it will be added to the\nmanager&#39;s settings, replacing any existing entry. If a value is unset (its\nvalue is null), the existing the setting will be erased.\n&lt;p&gt;\nSettings that are not listed in the input will maintain their current\nvalues.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_config_put(opts = {})
      api_v11_cm_config_put_with_http_info(opts)
      return nil
    end

    # 
    # Update the Cloudera Manager settings.\n&lt;p&gt;\nIf a value is set in the given configuration, it will be added to the\nmanager&#39;s settings, replacing any existing entry. If a value is unset (its\nvalue is null), the existing the setting will be erased.\n&lt;p&gt;\nSettings that are not listed in the input will maintain their current\nvalues.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_config_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_config_put ..."
      end
      
      # resource path
      path = "/api/v11/cm/config".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_config_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve full description of the entire Cloudera Manager deployment\nincluding all hosts, clusters, services, roles, users, settings, etc.\n&lt;p/&gt;\nThis object can be used to reconstruct your entire deployment\n&lt;p/&gt;\nNote: Only users with sufficient privileges are allowed to call this.\n&lt;ul&gt;\n&lt;li&gt;Full Administrators&lt;/li&gt;\n&lt;li&gt;Cluster Administrators (but Navigator config will be redacted)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p/&gt;\nNote: starting with v3, the deployment information contais data about\nCloudera Manager peers configured for the instance. This data contains\nplain text authentication information used to connect to the remote peer.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view May be one of \&quot;export\&quot; (default) or \&quot;export_redacted\&quot;.  The latter\nreplaces configurations that are sensitive with the word \&quot;REDACTED\&quot;.
    # @return [nil]
    def api_v11_cm_deployment_get(opts = {})
      api_v11_cm_deployment_get_with_http_info(opts)
      return nil
    end

    # 
    # Retrieve full description of the entire Cloudera Manager deployment\nincluding all hosts, clusters, services, roles, users, settings, etc.\n&lt;p/&gt;\nThis object can be used to reconstruct your entire deployment\n&lt;p/&gt;\nNote: Only users with sufficient privileges are allowed to call this.\n&lt;ul&gt;\n&lt;li&gt;Full Administrators&lt;/li&gt;\n&lt;li&gt;Cluster Administrators (but Navigator config will be redacted)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p/&gt;\nNote: starting with v3, the deployment information contais data about\nCloudera Manager peers configured for the instance. This data contains\nplain text authentication information used to connect to the remote peer.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view May be one of \&quot;export\&quot; (default) or \&quot;export_redacted\&quot;.  The latter\nreplaces configurations that are sensitive with the word \&quot;REDACTED\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_deployment_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_deployment_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/deployment".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_deployment_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Apply the supplied deployment description to the system. This will\ncreate the clusters, services, hosts and other objects specified in\nthe argument. This call does not allow for any merge conflicts. If\nan entity already exists in the system, this call will fail.\nYou can request, however, that all entities in the system are deleted\nbefore instantiating the new ones.\n&lt;p/&gt;\nYou may specify a complete or partial deployment, e.g. you can provide\nhost info with no clusters.  However, if you request that\nthe current deployment be deleted, you are required to specify at\nleast one admin user or this call will fail. This is to protect\nyou from creating a system that cannot be logged into again.\n&lt;p/&gt;\nIf there are any errors creating (or optionally deleting) a deployment,\nall changes will be rolled back leaving the system exactly as it was\nbefore calling this method.  The system will never be left in a state\nwhere part of the deployment is created and other parts are not.\n&lt;p/&gt;\nIf the submitted deployment contains entities that require Cloudera\nEnterprise license, then the license should be provided to Cloudera Manager\nbefore making this API call.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :delete_current_deployment If true, the current deployment is deleted\nbefore the specified deployment is applied
    # @return [nil]
    def api_v11_cm_deployment_put(opts = {})
      api_v11_cm_deployment_put_with_http_info(opts)
      return nil
    end

    # 
    # Apply the supplied deployment description to the system. This will\ncreate the clusters, services, hosts and other objects specified in\nthe argument. This call does not allow for any merge conflicts. If\nan entity already exists in the system, this call will fail.\nYou can request, however, that all entities in the system are deleted\nbefore instantiating the new ones.\n&lt;p/&gt;\nYou may specify a complete or partial deployment, e.g. you can provide\nhost info with no clusters.  However, if you request that\nthe current deployment be deleted, you are required to specify at\nleast one admin user or this call will fail. This is to protect\nyou from creating a system that cannot be logged into again.\n&lt;p/&gt;\nIf there are any errors creating (or optionally deleting) a deployment,\nall changes will be rolled back leaving the system exactly as it was\nbefore calling this method.  The system will never be left in a state\nwhere part of the deployment is created and other parts are not.\n&lt;p/&gt;\nIf the submitted deployment contains entities that require Cloudera\nEnterprise license, then the license should be provided to Cloudera Manager\nbefore making this API call.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :delete_current_deployment If true, the current deployment is deleted\nbefore the specified deployment is applied
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_deployment_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_deployment_put ..."
      end
      
      # resource path
      path = "/api/v11/cm/deployment".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'deleteCurrentDeployment'] = opts[:'delete_current_deployment'] if opts[:'delete_current_deployment']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_deployment_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the Kerberos principals needed by the services being managed\nby Cloudera Manager.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :missing_only Whether to include only those principals which do\nnot already exist in Cloudera Manager&#39;s database.
    # @return [nil]
    def api_v11_cm_kerberos_principals_get(opts = {})
      api_v11_cm_kerberos_principals_get_with_http_info(opts)
      return nil
    end

    # 
    # Returns the Kerberos principals needed by the services being managed\nby Cloudera Manager.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :missing_only Whether to include only those principals which do\nnot already exist in Cloudera Manager&#39;s database.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_kerberos_principals_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_kerberos_principals_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/kerberosPrincipals".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'missingOnly'] = opts[:'missing_only'] if opts[:'missing_only']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_kerberos_principals_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve information about the Cloudera Manager license.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_license_get(opts = {})
      api_v11_cm_license_get_with_http_info(opts)
      return nil
    end

    # 
    # Retrieve information about the Cloudera Manager license.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_license_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_license_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/license".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_license_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates the Cloudera Manager license.\n&lt;p&gt;\nAfter a new license is installed, the Cloudera Manager needs to be\nrestarted for the changes to take effect.\n&lt;p&gt;\nThe license file should be uploaded using a request with content type\n\&quot;multipart/form-data\&quot;, instead of being encoded into a JSON representation.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_license_post(opts = {})
      api_v11_cm_license_post_with_http_info(opts)
      return nil
    end

    # 
    # Updates the Cloudera Manager license.\n&lt;p&gt;\nAfter a new license is installed, the Cloudera Manager needs to be\nrestarted for the changes to take effect.\n&lt;p&gt;\nThe license file should be uploaded using a request with content type\n\&quot;multipart/form-data\&quot;, instead of being encoded into a JSON representation.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_license_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_license_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/license".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_license_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve a summary of licensed feature usage.\n&lt;p/&gt;\nThis command will return information about what Cloudera Enterprise\nlicensed features are in use in the clusters being managed by this Cloudera\nManager, as well as totals for usage across all clusters.\n&lt;p/&gt;\nThe specific features described can vary between different versions of\nCloudera Manager.\n&lt;p/&gt;\nAvailable since API v6.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_licensed_feature_usage_get(opts = {})
      api_v11_cm_licensed_feature_usage_get_with_http_info(opts)
      return nil
    end

    # 
    # Retrieve a summary of licensed feature usage.\n&lt;p/&gt;\nThis command will return information about what Cloudera Enterprise\nlicensed features are in use in the clusters being managed by this Cloudera\nManager, as well as totals for usage across all clusters.\n&lt;p/&gt;\nThe specific features described can vary between different versions of\nCloudera Manager.\n&lt;p/&gt;\nAvailable since API v6.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_licensed_feature_usage_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_licensed_feature_usage_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/licensedFeatureUsage".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_licensed_feature_usage_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the entire contents of the Cloudera Manager log file
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_log_get(opts = {})
      api_v11_cm_log_get_with_http_info(opts)
      return nil
    end

    # 
    # Returns the entire contents of the Cloudera Manager log file
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_log_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_log_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/log".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_log_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieves all configured Cloudera Manager peers.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.\n&lt;p&gt;\nWhen accessed via API version before v11, only REPLICATION type peers will\nbe returned.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_peers_get(opts = {})
      api_v11_cm_peers_get_with_http_info(opts)
      return nil
    end

    # 
    # Retrieves all configured Cloudera Manager peers.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.\n&lt;p&gt;\nWhen accessed via API version before v11, only REPLICATION type peers will\nbe returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_peers_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_peers_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/peers".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_peers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create a new Cloudera Manager peer.\n&lt;p&gt;\nThe remote server will be contacted so that a user can be created\nfor use by the new peer. The &lt;i&gt;username&lt;/i&gt; and &lt;i&gt;password&lt;/i&gt;\nproperties of the provided peer object should contain credentials\nof a valid admin user on the remote server. A timeout of 10 seconds\nis enforced when contacting the remote server.\n&lt;p&gt;\nIt is recommended to run the remote server with TLS enabled, since\ncreating and using peers involve transferring credentials over the\nnetwork.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.\n&lt;p&gt;\nType field in ApiCmPeer is available since API v11. if not specified\nwhen making createPeer() call, &#39;REPLICATION&#39; type peer will be created.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_peers_post(opts = {})
      api_v11_cm_peers_post_with_http_info(opts)
      return nil
    end

    # 
    # Create a new Cloudera Manager peer.\n&lt;p&gt;\nThe remote server will be contacted so that a user can be created\nfor use by the new peer. The &lt;i&gt;username&lt;/i&gt; and &lt;i&gt;password&lt;/i&gt;\nproperties of the provided peer object should contain credentials\nof a valid admin user on the remote server. A timeout of 10 seconds\nis enforced when contacting the remote server.\n&lt;p&gt;\nIt is recommended to run the remote server with TLS enabled, since\ncreating and using peers involve transferring credentials over the\nnetwork.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.\n&lt;p&gt;\nType field in ApiCmPeer is available since API v11. if not specified\nwhen making createPeer() call, &#39;REPLICATION&#39; type peer will be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_peers_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_peers_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/peers".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_peers_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Fetch information about an existing Cloudera Manager peer.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param peer_name Name of peer to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_peers_peer_name_get(peer_name, opts = {})
      api_v11_cm_peers_peer_name_get_with_http_info(peer_name, opts)
      return nil
    end

    # 
    # Fetch information about an existing Cloudera Manager peer.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param peer_name Name of peer to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_peers_peer_name_get_with_http_info(peer_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_peers_peer_name_get ..."
      end
      
      # verify the required parameter 'peer_name' is set
      fail "Missing the required parameter 'peer_name' when calling api_v11_cm_peers_peer_name_get" if peer_name.nil?
      
      # resource path
      path = "/api/v11/cm/peers/{peerName}".sub('{format}','json').sub('{' + 'peerName' + '}', peer_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_peers_peer_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update information for a Cloudera Manager peer.\n&lt;p&gt;\nIn administrator credentials are provided in the peer information, they\nwill be used to establish new credentials with the remote server. This\ncan be used in case the old credentials are not working anymore. An\nattempt will be made to delete the old credentials if new ones are\nsuccessfully created.\n&lt;p&gt;\nIf changing the peer&#39;s URL, an attempt will be made to contact the old\nCloudera Manager to delete the existing credentials.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param peer_name Name of peer to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_peers_peer_name_put(peer_name, opts = {})
      api_v11_cm_peers_peer_name_put_with_http_info(peer_name, opts)
      return nil
    end

    # 
    # Update information for a Cloudera Manager peer.\n&lt;p&gt;\nIn administrator credentials are provided in the peer information, they\nwill be used to establish new credentials with the remote server. This\ncan be used in case the old credentials are not working anymore. An\nattempt will be made to delete the old credentials if new ones are\nsuccessfully created.\n&lt;p&gt;\nIf changing the peer&#39;s URL, an attempt will be made to contact the old\nCloudera Manager to delete the existing credentials.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param peer_name Name of peer to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_peers_peer_name_put_with_http_info(peer_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_peers_peer_name_put ..."
      end
      
      # verify the required parameter 'peer_name' is set
      fail "Missing the required parameter 'peer_name' when calling api_v11_cm_peers_peer_name_put" if peer_name.nil?
      
      # resource path
      path = "/api/v11/cm/peers/{peerName}".sub('{format}','json').sub('{' + 'peerName' + '}', peer_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_peers_peer_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete Cloudera Manager peer.\n&lt;p&gt;\nAn attempt will be made to contact the peer server, so that the configured\nuser can be deleted.. Errors while contacting the remote server are\nnon-fatal.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param peer_name Name of peer to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_peers_peer_name_delete(peer_name, opts = {})
      api_v11_cm_peers_peer_name_delete_with_http_info(peer_name, opts)
      return nil
    end

    # 
    # Delete Cloudera Manager peer.\n&lt;p&gt;\nAn attempt will be made to contact the peer server, so that the configured\nuser can be deleted.. Errors while contacting the remote server are\nnon-fatal.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param peer_name Name of peer to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_peers_peer_name_delete_with_http_info(peer_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_peers_peer_name_delete ..."
      end
      
      # verify the required parameter 'peer_name' is set
      fail "Missing the required parameter 'peer_name' when calling api_v11_cm_peers_peer_name_delete" if peer_name.nil?
      
      # resource path
      path = "/api/v11/cm/peers/{peerName}".sub('{format}','json').sub('{' + 'peerName' + '}', peer_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_peers_peer_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Test the connectivity of a peer.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param peer_name Name of peer to test.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_peers_peer_name_commands_test_post(peer_name, opts = {})
      api_v11_cm_peers_peer_name_commands_test_post_with_http_info(peer_name, opts)
      return nil
    end

    # 
    # Test the connectivity of a peer.\n&lt;p&gt;\nAvailable since API v3. Only available with Cloudera Manager Enterprise\nEdition.
    # @param peer_name Name of peer to test.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_peers_peer_name_commands_test_post_with_http_info(peer_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_peers_peer_name_commands_test_post ..."
      end
      
      # verify the required parameter 'peer_name' is set
      fail "Missing the required parameter 'peer_name' when calling api_v11_cm_peers_peer_name_commands_test_post" if peer_name.nil?
      
      # resource path
      path = "/api/v11/cm/peers/{peerName}/commands/test".sub('{format}','json').sub('{' + 'peerName' + '}', peer_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_peers_peer_name_commands_test_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve information about the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_get(opts = {})
      api_v11_cm_service_get_with_http_info(opts)
      return nil
    end

    # 
    # Retrieve information about the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/service".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Setup the Cloudera Management Services.\n&lt;p&gt;\nConfigure the CMS instance and create all the management roles. The\nprovided configuration data can be used to set up host mappings for\neach role, and required configuration such as database connection\ninformation for specific roles.\n&lt;p&gt;\nRegardless of the list of roles provided in the input data, all\nmanagement roles are created by this call. The input is used to\noverride any default settings for the specific roles.\n&lt;p&gt;\nThis method needs a valid CM license to be installed beforehand.\n&lt;p&gt;\nThis method does not start any services or roles.\n&lt;p&gt;\nThis method will fail if a CMS instance already exists.\n&lt;p&gt;\nAvailable role types:\n&lt;ul&gt;\n&lt;li&gt;SERVICEMONITOR&lt;/li&gt;\n&lt;li&gt;ACTIVITYMONITOR&lt;/li&gt;\n&lt;li&gt;HOSTMONITOR&lt;/li&gt;\n&lt;li&gt;REPORTSMANAGER&lt;/li&gt;\n&lt;li&gt;EVENTSERVER&lt;/li&gt;\n&lt;li&gt;ALERTPUBLISHER&lt;/li&gt;\n&lt;li&gt;NAVIGATOR&lt;/li&gt;\n&lt;li&gt;NAVIGATORMETASERVER&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p/&gt;\nREPORTSMANAGER, NAVIGATOR and NAVIGATORMETASERVER are only available with\nCloudera Manager Enterprise Edition.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_put(opts = {})
      api_v11_cm_service_put_with_http_info(opts)
      return nil
    end

    # 
    # Setup the Cloudera Management Services.\n&lt;p&gt;\nConfigure the CMS instance and create all the management roles. The\nprovided configuration data can be used to set up host mappings for\neach role, and required configuration such as database connection\ninformation for specific roles.\n&lt;p&gt;\nRegardless of the list of roles provided in the input data, all\nmanagement roles are created by this call. The input is used to\noverride any default settings for the specific roles.\n&lt;p&gt;\nThis method needs a valid CM license to be installed beforehand.\n&lt;p&gt;\nThis method does not start any services or roles.\n&lt;p&gt;\nThis method will fail if a CMS instance already exists.\n&lt;p&gt;\nAvailable role types:\n&lt;ul&gt;\n&lt;li&gt;SERVICEMONITOR&lt;/li&gt;\n&lt;li&gt;ACTIVITYMONITOR&lt;/li&gt;\n&lt;li&gt;HOSTMONITOR&lt;/li&gt;\n&lt;li&gt;REPORTSMANAGER&lt;/li&gt;\n&lt;li&gt;EVENTSERVER&lt;/li&gt;\n&lt;li&gt;ALERTPUBLISHER&lt;/li&gt;\n&lt;li&gt;NAVIGATOR&lt;/li&gt;\n&lt;li&gt;NAVIGATORMETASERVER&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p/&gt;\nREPORTSMANAGER, NAVIGATOR and NAVIGATORMETASERVER are only available with\nCloudera Manager Enterprise Edition.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_put ..."
      end
      
      # resource path
      path = "/api/v11/cm/service".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete the Cloudera Management Services.\n&lt;p&gt;\nThis method will fail if a CMS instance doesn&#39;t already exist.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_delete(opts = {})
      api_v11_cm_service_delete_with_http_info(opts)
      return nil
    end

    # 
    # Delete the Cloudera Management Services.\n&lt;p&gt;\nThis method will fail if a CMS instance doesn&#39;t already exist.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_delete ..."
      end
      
      # resource path
      path = "/api/v11/cm/service".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Automatically assign roles to hosts and create the roles for the Cloudera Management Service.\n&lt;p&gt;\nAssignments are done based on number of hosts in the deployment and hardware specifications.\nIf no hosts are part of the deployment, an exception will be thrown preventing any role assignments.\nExisting roles will be taken into account and their assignments will be not be modified.\nThe deployment should not have any clusters when calling this endpoint. If it does,\nan exception will be thrown preventing any role assignments.\n&lt;p&gt;\nAvailable since API v6.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_auto_assign_roles_put(opts = {})
      api_v11_cm_service_auto_assign_roles_put_with_http_info(opts)
      return nil
    end

    # 
    # Automatically assign roles to hosts and create the roles for the Cloudera Management Service.\n&lt;p&gt;\nAssignments are done based on number of hosts in the deployment and hardware specifications.\nIf no hosts are part of the deployment, an exception will be thrown preventing any role assignments.\nExisting roles will be taken into account and their assignments will be not be modified.\nThe deployment should not have any clusters when calling this endpoint. If it does,\nan exception will be thrown preventing any role assignments.\n&lt;p&gt;\nAvailable since API v6.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_auto_assign_roles_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_auto_assign_roles_put ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/autoAssignRoles".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_auto_assign_roles_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Automatically configures roles of the Cloudera Management Service.\n&lt;p&gt;\nOverwrites some existing configurations.\nOnly default role config groups must exist before calling this endpoint.\nOther role config groups must not exist. If they do, an exception will be thrown\npreventing any configuration.\nIgnores any clusters (and their services and roles) colocated with the Cloudera\nManagement Service. To avoid over-committing the heap on hosts, place the\nCloudera Management Service roles on machines not used by any of the clusters.\n&lt;p&gt;\nAvailable since API v6.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_auto_configure_put(opts = {})
      api_v11_cm_service_auto_configure_put_with_http_info(opts)
      return nil
    end

    # 
    # Automatically configures roles of the Cloudera Management Service.\n&lt;p&gt;\nOverwrites some existing configurations.\nOnly default role config groups must exist before calling this endpoint.\nOther role config groups must not exist. If they do, an exception will be thrown\npreventing any configuration.\nIgnores any clusters (and their services and roles) colocated with the Cloudera\nManagement Service. To avoid over-committing the heap on hosts, place the\nCloudera Management Service roles on machines not used by any of the clusters.\n&lt;p&gt;\nAvailable since API v6.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_auto_configure_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_auto_configure_put ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/autoConfigure".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_auto_configure_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # List active Cloudera Management Services commands.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_cm_service_commands_get(opts = {})
      api_v11_cm_service_commands_get_with_http_info(opts)
      return nil
    end

    # 
    # List active Cloudera Management Services commands.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_commands_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_commands_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/commands".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_commands_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Restart the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_commands_restart_post(opts = {})
      api_v11_cm_service_commands_restart_post_with_http_info(opts)
      return nil
    end

    # 
    # Restart the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_commands_restart_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_commands_restart_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/commands/restart".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_commands_restart_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Start the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_commands_start_post(opts = {})
      api_v11_cm_service_commands_start_post_with_http_info(opts)
      return nil
    end

    # 
    # Start the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_commands_start_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_commands_start_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/commands/start".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_commands_start_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Stop the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_commands_stop_post(opts = {})
      api_v11_cm_service_commands_stop_post_with_http_info(opts)
      return nil
    end

    # 
    # Stop the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_commands_stop_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_commands_stop_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/commands/stop".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_commands_stop_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve the configuration of the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_cm_service_config_get(opts = {})
      api_v11_cm_service_config_get_with_http_info(opts)
      return nil
    end

    # 
    # Retrieve the configuration of the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_config_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_config_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/config".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update the Cloudera Management Services configuration.\n&lt;p&gt;\nIf a value is set in the given configuration, it will be added\nto the service&#39;s configuration, replacing any existing entries.\nIf a value is unset (its value is null), the existing\nconfiguration for the attribute will be erased, if any.\n&lt;p&gt;\nAttributes that are not listed in the input will maintain their\ncurrent values in the configuration.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [nil]
    def api_v11_cm_service_config_put(opts = {})
      api_v11_cm_service_config_put_with_http_info(opts)
      return nil
    end

    # 
    # Update the Cloudera Management Services configuration.\n&lt;p&gt;\nIf a value is set in the given configuration, it will be added\nto the service&#39;s configuration, replacing any existing entries.\nIf a value is unset (its value is null), the existing\nconfiguration for the attribute will be erased, if any.\n&lt;p&gt;\nAttributes that are not listed in the input will maintain their\ncurrent values in the configuration.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_config_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_config_put ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/config".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'message'] = opts[:'message'] if opts[:'message']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_config_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Run the jmapDump diagnostic command. The command runs the jmap utility to\ncapture a dump of the role&#39;s java heap.\n&lt;p/&gt;\nAvailable since API v8.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_role_commands_jmap_dump_post(opts = {})
      api_v11_cm_service_role_commands_jmap_dump_post_with_http_info(opts)
      return nil
    end

    # 
    # Run the jmapDump diagnostic command. The command runs the jmap utility to\ncapture a dump of the role&#39;s java heap.\n&lt;p/&gt;\nAvailable since API v8.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_role_commands_jmap_dump_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_role_commands_jmap_dump_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/roleCommands/jmapDump".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_role_commands_jmap_dump_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Run the jmapHisto diagnostic command. The command runs the jmap utility to\ncapture a histogram of the objects on the role&#39;s java heap.\n&lt;p/&gt;\nAvailable since API v8.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_role_commands_jmap_histo_post(opts = {})
      api_v11_cm_service_role_commands_jmap_histo_post_with_http_info(opts)
      return nil
    end

    # 
    # Run the jmapHisto diagnostic command. The command runs the jmap utility to\ncapture a histogram of the objects on the role&#39;s java heap.\n&lt;p/&gt;\nAvailable since API v8.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_role_commands_jmap_histo_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_role_commands_jmap_histo_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/roleCommands/jmapHisto".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_role_commands_jmap_histo_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Run the jstack diagnostic command. The command runs the jstack utility to\ncapture a role&#39;s java thread stacks.\n&lt;p/&gt;\nAvailable since API v8.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_role_commands_jstack_post(opts = {})
      api_v11_cm_service_role_commands_jstack_post_with_http_info(opts)
      return nil
    end

    # 
    # Run the jstack diagnostic command. The command runs the jstack utility to\ncapture a role&#39;s java thread stacks.\n&lt;p/&gt;\nAvailable since API v8.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_role_commands_jstack_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_role_commands_jstack_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/roleCommands/jstack".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_role_commands_jstack_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Run the lsof diagnostic command. This command runs the lsof utility to\nlist a role&#39;s open files.\n&lt;p/&gt;\nAvailable since API v8.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_role_commands_lsof_post(opts = {})
      api_v11_cm_service_role_commands_lsof_post_with_http_info(opts)
      return nil
    end

    # 
    # Run the lsof diagnostic command. This command runs the lsof utility to\nlist a role&#39;s open files.\n&lt;p/&gt;\nAvailable since API v8.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_role_commands_lsof_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_role_commands_lsof_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/roleCommands/lsof".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_role_commands_lsof_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Restart a set of Cloudera Management Services roles.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_role_commands_restart_post(opts = {})
      api_v11_cm_service_role_commands_restart_post_with_http_info(opts)
      return nil
    end

    # 
    # Restart a set of Cloudera Management Services roles.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_role_commands_restart_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_role_commands_restart_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/roleCommands/restart".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_role_commands_restart_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Start a set of Cloudera Management Services roles.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_role_commands_start_post(opts = {})
      api_v11_cm_service_role_commands_start_post_with_http_info(opts)
      return nil
    end

    # 
    # Start a set of Cloudera Management Services roles.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_role_commands_start_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_role_commands_start_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/roleCommands/start".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_role_commands_start_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Stop a set of Cloudera Management Services roles.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_role_commands_stop_post(opts = {})
      api_v11_cm_service_role_commands_stop_post_with_http_info(opts)
      return nil
    end

    # 
    # Stop a set of Cloudera Management Services roles.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_role_commands_stop_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_role_commands_stop_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/roleCommands/stop".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_role_commands_stop_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the information for all role config groups in\nthe Cloudera Management Services.\n&lt;p&gt;\nAvailable since API v3.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_role_config_groups_get(opts = {})
      api_v11_cm_service_role_config_groups_get_with_http_info(opts)
      return nil
    end

    # 
    # Returns the information for all role config groups in\nthe Cloudera Management Services.\n&lt;p&gt;\nAvailable since API v3.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_role_config_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_role_config_groups_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/roleConfigGroups".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_role_config_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the information for a given role config group\nin the Cloudera Management Services.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the requested group.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_role_config_groups_role_config_group_name_get(role_config_group_name, opts = {})
      api_v11_cm_service_role_config_groups_role_config_group_name_get_with_http_info(role_config_group_name, opts)
      return nil
    end

    # 
    # Returns the information for a given role config group\nin the Cloudera Management Services.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the requested group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_role_config_groups_role_config_group_name_get_with_http_info(role_config_group_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_role_config_groups_role_config_group_name_get ..."
      end
      
      # verify the required parameter 'role_config_group_name' is set
      fail "Missing the required parameter 'role_config_group_name' when calling api_v11_cm_service_role_config_groups_role_config_group_name_get" if role_config_group_name.nil?
      
      # resource path
      path = "/api/v11/cm/service/roleConfigGroups/{roleConfigGroupName}".sub('{format}','json').sub('{' + 'roleConfigGroupName' + '}', role_config_group_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_role_config_groups_role_config_group_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates an existing role config group in the Cloudera Management Services.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the requested group.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message The optional message describing the changes.
    # @return [nil]
    def api_v11_cm_service_role_config_groups_role_config_group_name_put(role_config_group_name, opts = {})
      api_v11_cm_service_role_config_groups_role_config_group_name_put_with_http_info(role_config_group_name, opts)
      return nil
    end

    # 
    # Updates an existing role config group in the Cloudera Management Services.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the requested group.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message The optional message describing the changes.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_role_config_groups_role_config_group_name_put_with_http_info(role_config_group_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_role_config_groups_role_config_group_name_put ..."
      end
      
      # verify the required parameter 'role_config_group_name' is set
      fail "Missing the required parameter 'role_config_group_name' when calling api_v11_cm_service_role_config_groups_role_config_group_name_put" if role_config_group_name.nil?
      
      # resource path
      path = "/api/v11/cm/service/roleConfigGroups/{roleConfigGroupName}".sub('{format}','json').sub('{' + 'roleConfigGroupName' + '}', role_config_group_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'message'] = opts[:'message'] if opts[:'message']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_role_config_groups_role_config_group_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the current revision of the config\nfor the specified role config group in the Cloudera Management Services.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the role config group.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_cm_service_role_config_groups_role_config_group_name_config_get(role_config_group_name, opts = {})
      api_v11_cm_service_role_config_groups_role_config_group_name_config_get_with_http_info(role_config_group_name, opts)
      return nil
    end

    # 
    # Returns the current revision of the config\nfor the specified role config group in the Cloudera Management Services.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the role config group.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_role_config_groups_role_config_group_name_config_get_with_http_info(role_config_group_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_role_config_groups_role_config_group_name_config_get ..."
      end
      
      # verify the required parameter 'role_config_group_name' is set
      fail "Missing the required parameter 'role_config_group_name' when calling api_v11_cm_service_role_config_groups_role_config_group_name_config_get" if role_config_group_name.nil?
      
      # resource path
      path = "/api/v11/cm/service/roleConfigGroups/{roleConfigGroupName}/config".sub('{format}','json').sub('{' + 'roleConfigGroupName' + '}', role_config_group_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_role_config_groups_role_config_group_name_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates the config for the given role config group\nin the Cloudera Management Services.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the role config group.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [nil]
    def api_v11_cm_service_role_config_groups_role_config_group_name_config_put(role_config_group_name, opts = {})
      api_v11_cm_service_role_config_groups_role_config_group_name_config_put_with_http_info(role_config_group_name, opts)
      return nil
    end

    # 
    # Updates the config for the given role config group\nin the Cloudera Management Services.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the role config group.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_role_config_groups_role_config_group_name_config_put_with_http_info(role_config_group_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_role_config_groups_role_config_group_name_config_put ..."
      end
      
      # verify the required parameter 'role_config_group_name' is set
      fail "Missing the required parameter 'role_config_group_name' when calling api_v11_cm_service_role_config_groups_role_config_group_name_config_put" if role_config_group_name.nil?
      
      # resource path
      path = "/api/v11/cm/service/roleConfigGroups/{roleConfigGroupName}/config".sub('{format}','json').sub('{' + 'roleConfigGroupName' + '}', role_config_group_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'message'] = opts[:'message'] if opts[:'message']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_role_config_groups_role_config_group_name_config_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns all roles in the given role config group\nin the Cloudera Management Services.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the role config group.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_role_config_groups_role_config_group_name_roles_get(role_config_group_name, opts = {})
      api_v11_cm_service_role_config_groups_role_config_group_name_roles_get_with_http_info(role_config_group_name, opts)
      return nil
    end

    # 
    # Returns all roles in the given role config group\nin the Cloudera Management Services.\n&lt;p&gt;\nAvailable since API v3.
    # @param role_config_group_name The name of the role config group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_role_config_groups_role_config_group_name_roles_get_with_http_info(role_config_group_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_role_config_groups_role_config_group_name_roles_get ..."
      end
      
      # verify the required parameter 'role_config_group_name' is set
      fail "Missing the required parameter 'role_config_group_name' when calling api_v11_cm_service_role_config_groups_role_config_group_name_roles_get" if role_config_group_name.nil?
      
      # resource path
      path = "/api/v11/cm/service/roleConfigGroups/{roleConfigGroupName}/roles".sub('{format}','json').sub('{' + 'roleConfigGroupName' + '}', role_config_group_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_role_config_groups_role_config_group_name_roles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # List the supported role types for the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_role_types_get(opts = {})
      api_v11_cm_service_role_types_get_with_http_info(opts)
      return nil
    end

    # 
    # List the supported role types for the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_role_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_role_types_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/roleTypes".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_role_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # List all roles of the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_roles_get(opts = {})
      api_v11_cm_service_roles_get_with_http_info(opts)
      return nil
    end

    # 
    # List all roles of the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_roles_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_roles_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/roles".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_roles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create new roles in the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_roles_post(opts = {})
      api_v11_cm_service_roles_post_with_http_info(opts)
      return nil
    end

    # 
    # Create new roles in the Cloudera Management Services.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_roles_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_roles_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/service/roles".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_roles_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve detailed information about a Cloudera Management Services role.
    # @param role_name The role name.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_roles_role_name_get(role_name, opts = {})
      api_v11_cm_service_roles_role_name_get_with_http_info(role_name, opts)
      return nil
    end

    # 
    # Retrieve detailed information about a Cloudera Management Services role.
    # @param role_name The role name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_roles_role_name_get_with_http_info(role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_roles_role_name_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_cm_service_roles_role_name_get" if role_name.nil?
      
      # resource path
      path = "/api/v11/cm/service/roles/{roleName}".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_roles_role_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete a role from the Cloudera Management Services.
    # @param role_name The role name.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_roles_role_name_delete(role_name, opts = {})
      api_v11_cm_service_roles_role_name_delete_with_http_info(role_name, opts)
      return nil
    end

    # 
    # Delete a role from the Cloudera Management Services.
    # @param role_name The role name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_roles_role_name_delete_with_http_info(role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_roles_role_name_delete ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_cm_service_roles_role_name_delete" if role_name.nil?
      
      # resource path
      path = "/api/v11/cm/service/roles/{roleName}".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_roles_role_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # List active role commands.
    # @param role_name The role name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_cm_service_roles_role_name_commands_get(role_name, opts = {})
      api_v11_cm_service_roles_role_name_commands_get_with_http_info(role_name, opts)
      return nil
    end

    # 
    # List active role commands.
    # @param role_name The role name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_roles_role_name_commands_get_with_http_info(role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_roles_role_name_commands_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_cm_service_roles_role_name_commands_get" if role_name.nil?
      
      # resource path
      path = "/api/v11/cm/service/roles/{roleName}/commands".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_roles_role_name_commands_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve the configuration of a specific Cloudera Management Services role.
    # @param role_name The role to look up.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_cm_service_roles_role_name_config_get(role_name, opts = {})
      api_v11_cm_service_roles_role_name_config_get_with_http_info(role_name, opts)
      return nil
    end

    # 
    # Retrieve the configuration of a specific Cloudera Management Services role.
    # @param role_name The role to look up.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_roles_role_name_config_get_with_http_info(role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_roles_role_name_config_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_cm_service_roles_role_name_config_get" if role_name.nil?
      
      # resource path
      path = "/api/v11/cm/service/roles/{roleName}/config".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_roles_role_name_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update the configuration of a Cloudera Management Services role.\n&lt;p&gt;\nIf a value is set in the given configuration, it will be added\nto the role&#39;s configuration, replacing any existing entries.\nIf a value is unset (its value is null), the existing\nconfiguration for the attribute will be erased, if any.\n&lt;p&gt;\nAttributes that are not listed in the input will maintain their\ncurrent values in the configuration.
    # @param role_name The role to look up.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [nil]
    def api_v11_cm_service_roles_role_name_config_put(role_name, opts = {})
      api_v11_cm_service_roles_role_name_config_put_with_http_info(role_name, opts)
      return nil
    end

    # 
    # Update the configuration of a Cloudera Management Services role.\n&lt;p&gt;\nIf a value is set in the given configuration, it will be added\nto the role&#39;s configuration, replacing any existing entries.\nIf a value is unset (its value is null), the existing\nconfiguration for the attribute will be erased, if any.\n&lt;p&gt;\nAttributes that are not listed in the input will maintain their\ncurrent values in the configuration.
    # @param role_name The role to look up.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_roles_role_name_config_put_with_http_info(role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_roles_role_name_config_put ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_cm_service_roles_role_name_config_put" if role_name.nil?
      
      # resource path
      path = "/api/v11/cm/service/roles/{roleName}/config".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'message'] = opts[:'message'] if opts[:'message']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_roles_role_name_config_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieves the log file for the role&#39;s main process.\n&lt;p&gt;\nIf the role is not started, this will be the log file associated with\nthe last time the role was run.\n&lt;p&gt;\nLog files are returned as plain text (type \&quot;text/plain\&quot;).
    # @param role_name The role to fetch logs from.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_roles_role_name_logs_full_get(role_name, opts = {})
      api_v11_cm_service_roles_role_name_logs_full_get_with_http_info(role_name, opts)
      return nil
    end

    # 
    # Retrieves the log file for the role&#39;s main process.\n&lt;p&gt;\nIf the role is not started, this will be the log file associated with\nthe last time the role was run.\n&lt;p&gt;\nLog files are returned as plain text (type \&quot;text/plain\&quot;).
    # @param role_name The role to fetch logs from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_roles_role_name_logs_full_get_with_http_info(role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_roles_role_name_logs_full_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_cm_service_roles_role_name_logs_full_get" if role_name.nil?
      
      # resource path
      path = "/api/v11/cm/service/roles/{roleName}/logs/full".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_roles_role_name_logs_full_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieves the stacks log file, if any, for the role&#39;s main process. Note\nthat not all roles support periodic stacks collection.\n\nThe log files are returned as plain text (type \&quot;text/plain\&quot;).
    # @param role_name The role to fetch stacks logs from.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_roles_role_name_logs_stacks_get(role_name, opts = {})
      api_v11_cm_service_roles_role_name_logs_stacks_get_with_http_info(role_name, opts)
      return nil
    end

    # 
    # Retrieves the stacks log file, if any, for the role&#39;s main process. Note\nthat not all roles support periodic stacks collection.\n\nThe log files are returned as plain text (type \&quot;text/plain\&quot;).
    # @param role_name The role to fetch stacks logs from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_roles_role_name_logs_stacks_get_with_http_info(role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_roles_role_name_logs_stacks_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_cm_service_roles_role_name_logs_stacks_get" if role_name.nil?
      
      # resource path
      path = "/api/v11/cm/service/roles/{roleName}/logs/stacks".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_roles_role_name_logs_stacks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Download a zip-compressed archive of role stacks logs. Note that not all\nroles support periodic stacks collection.
    # @param role_name The role to fetch the stacks logs bundle from.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_roles_role_name_logs_stacks_bundle_get(role_name, opts = {})
      api_v11_cm_service_roles_role_name_logs_stacks_bundle_get_with_http_info(role_name, opts)
      return nil
    end

    # 
    # Download a zip-compressed archive of role stacks logs. Note that not all\nroles support periodic stacks collection.
    # @param role_name The role to fetch the stacks logs bundle from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_roles_role_name_logs_stacks_bundle_get_with_http_info(role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_roles_role_name_logs_stacks_bundle_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_cm_service_roles_role_name_logs_stacks_bundle_get" if role_name.nil?
      
      # resource path
      path = "/api/v11/cm/service/roles/{roleName}/logs/stacksBundle".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_roles_role_name_logs_stacks_bundle_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieves the role&#39;s standard error output.\n&lt;p&gt;\nIf the role is not started, this will be the output associated with\nthe last time the role was run.\n&lt;p&gt;\nLog files are returned as plain text (type \&quot;text/plain\&quot;).
    # @param role_name The role to fetch stderr from.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_roles_role_name_logs_stderr_get(role_name, opts = {})
      api_v11_cm_service_roles_role_name_logs_stderr_get_with_http_info(role_name, opts)
      return nil
    end

    # 
    # Retrieves the role&#39;s standard error output.\n&lt;p&gt;\nIf the role is not started, this will be the output associated with\nthe last time the role was run.\n&lt;p&gt;\nLog files are returned as plain text (type \&quot;text/plain\&quot;).
    # @param role_name The role to fetch stderr from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_roles_role_name_logs_stderr_get_with_http_info(role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_roles_role_name_logs_stderr_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_cm_service_roles_role_name_logs_stderr_get" if role_name.nil?
      
      # resource path
      path = "/api/v11/cm/service/roles/{roleName}/logs/stderr".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_roles_role_name_logs_stderr_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieves the role&#39;s standard output.\n&lt;p&gt;\nIf the role is not started, this will be the output associated with\nthe last time the role was run.\n&lt;p&gt;\nLog files are returned as plain text (type \&quot;text/plain\&quot;).
    # @param role_name The role to fetch stdout from.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_service_roles_role_name_logs_stdout_get(role_name, opts = {})
      api_v11_cm_service_roles_role_name_logs_stdout_get_with_http_info(role_name, opts)
      return nil
    end

    # 
    # Retrieves the role&#39;s standard output.\n&lt;p&gt;\nIf the role is not started, this will be the output associated with\nthe last time the role was run.\n&lt;p&gt;\nLog files are returned as plain text (type \&quot;text/plain\&quot;).
    # @param role_name The role to fetch stdout from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_service_roles_role_name_logs_stdout_get_with_http_info(role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_service_roles_role_name_logs_stdout_get ..."
      end
      
      # verify the required parameter 'role_name' is set
      fail "Missing the required parameter 'role_name' when calling api_v11_cm_service_roles_role_name_logs_stdout_get" if role_name.nil?
      
      # resource path
      path = "/api/v11/cm/service/roles/{roleName}/logs/stdout".sub('{format}','json').sub('{' + 'roleName' + '}', role_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_service_roles_role_name_logs_stdout_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Begin trial license.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_trial_begin_post(opts = {})
      api_v11_cm_trial_begin_post_with_http_info(opts)
      return nil
    end

    # 
    # Begin trial license.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_trial_begin_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_trial_begin_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/trial/begin".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_trial_begin_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # End trial license.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_trial_end_post(opts = {})
      api_v11_cm_trial_end_post_with_http_info(opts)
      return nil
    end

    # 
    # End trial license.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_trial_end_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_trial_end_post ..."
      end
      
      # resource path
      path = "/api/v11/cm/trial/end".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_trial_end_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Provides version information of Cloudera Manager itself.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_cm_version_get(opts = {})
      api_v11_cm_version_get_with_http_info(opts)
      return nil
    end

    # 
    # Provides version information of Cloudera Manager itself.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_cm_version_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_cm_version_get ..."
      end
      
      # resource path
      path = "/api/v11/cm/version".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_cm_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve detailed information on an asynchronous command.\n\n&lt;p&gt;Cloudera Manager keeps the results and statuses of asynchronous\ncommands, which have non-negative command IDs. On the other hand,\nsynchronous commands complete immediately, and their results are passed\nback in the return object of the command execution API call.\nOutside of that return object, there is no way to check the result\nof a synchronous command.&lt;/p&gt;
    # @param command_id The command id.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_commands_command_id_get(command_id, opts = {})
      api_v11_commands_command_id_get_with_http_info(command_id, opts)
      return nil
    end

    # 
    # Retrieve detailed information on an asynchronous command.\n\n&lt;p&gt;Cloudera Manager keeps the results and statuses of asynchronous\ncommands, which have non-negative command IDs. On the other hand,\nsynchronous commands complete immediately, and their results are passed\nback in the return object of the command execution API call.\nOutside of that return object, there is no way to check the result\nof a synchronous command.&lt;/p&gt;
    # @param command_id The command id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_commands_command_id_get_with_http_info(command_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_commands_command_id_get ..."
      end
      
      # verify the required parameter 'command_id' is set
      fail "Missing the required parameter 'command_id' when calling api_v11_commands_command_id_get" if command_id.nil?
      
      # resource path
      path = "/api/v11/commands/{commandId}".sub('{format}','json').sub('{' + 'commandId' + '}', command_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_commands_command_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Abort a running command.
    # @param command_id The command id.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_commands_command_id_abort_post(command_id, opts = {})
      api_v11_commands_command_id_abort_post_with_http_info(command_id, opts)
      return nil
    end

    # 
    # Abort a running command.
    # @param command_id The command id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_commands_command_id_abort_post_with_http_info(command_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_commands_command_id_abort_post ..."
      end
      
      # verify the required parameter 'command_id' is set
      fail "Missing the required parameter 'command_id' when calling api_v11_commands_command_id_abort_post" if command_id.nil?
      
      # resource path
      path = "/api/v11/commands/{commandId}/abort".sub('{format}','json').sub('{' + 'commandId' + '}', command_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_commands_command_id_abort_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Try to rerun a command.\n\n&lt;p&gt;\nNote: Only command that supports retry is &lt;i&gt;&lt;b&gt;UpgradeCluster&lt;/b&gt;&lt;/i&gt;.\nApiCommand#isCanRetry() will be true for only\n&lt;i&gt;&lt;b&gt;UpgradeCluster&lt;/b&gt;&lt;/i&gt; command.\n&lt;/p&gt;
    # @param command_id ID of the command that needs to be run.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_commands_command_id_retry_post(command_id, opts = {})
      api_v11_commands_command_id_retry_post_with_http_info(command_id, opts)
      return nil
    end

    # 
    # Try to rerun a command.\n\n&lt;p&gt;\nNote: Only command that supports retry is &lt;i&gt;&lt;b&gt;UpgradeCluster&lt;/b&gt;&lt;/i&gt;.\nApiCommand#isCanRetry() will be true for only\n&lt;i&gt;&lt;b&gt;UpgradeCluster&lt;/b&gt;&lt;/i&gt; command.\n&lt;/p&gt;
    # @param command_id ID of the command that needs to be run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_commands_command_id_retry_post_with_http_info(command_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_commands_command_id_retry_post ..."
      end
      
      # verify the required parameter 'command_id' is set
      fail "Missing the required parameter 'command_id' when calling api_v11_commands_command_id_retry_post" if command_id.nil?
      
      # resource path
      path = "/api/v11/commands/{commandId}/retry".sub('{format}','json').sub('{' + 'commandId' + '}', command_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_commands_command_id_retry_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Allows you to query events in the system.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :max_results The maximum number of events to return.
    # @option opts [String] :result_offset Specified the offset of events to return.
    # @option opts [String] :query The query to perform to find events in the system. It accepts\nquerying the intersection of a list of constraints,\njoined together with semicolons (without spaces). For example:\n&lt;/p&gt;\n&lt;dl&gt;\n&lt;dt&gt;alert==true&lt;/dt&gt;\n&lt;dd&gt;looks for alerts.&lt;/dd&gt;\n&lt;dt&gt;alert==true;attributes.host!=flaky.mysite.com&lt;/dt&gt;\n&lt;dd&gt;looks for alerts, but exclude those with the host attribute of\n\&quot;flaky.mysite.com\&quot;.&lt;/dd&gt;\n&lt;dt&gt;category==log_event;attributes.log_level==ERROR&lt;/dt&gt;\n&lt;dd&gt;looks for error log events. Event attribute matching is\ncase sensitive.&lt;/dd&gt;\n&lt;dt&gt;attributes.service==hbase1;content==hlog&lt;/dt&gt;\n&lt;dd&gt;looks for any events from the \&quot;hbase1\&quot; service that\nmention \&quot;hlog\&quot;.&lt;/dd&gt;\n&lt;dt&gt;attributes.service==hbase1;content!=hlog&lt;/dt&gt;\n&lt;dd&gt;looks for any events from the \&quot;hbase1\&quot; service that\ndo not mention \&quot;hlog\&quot;.&lt;br/&gt;\nA query must not contain only negative\nconstraints (&lt;em&gt;!=&lt;/em&gt;). It returns empty results because\nthere is nothing to perform exclusion on.&lt;/dd&gt;\n&lt;dt&gt;attributes.role_type==NAMENODE;severity==critical important&lt;/dt&gt;\n&lt;dd&gt;looks for any important or critical events related to\nall NameNodes.&lt;/dd&gt;\n&lt;dt&gt;severity==critical;timeReceived=ge=2012-05-04T00:00;timeReceived=lt=2012-05-04T00:10&lt;/dt&gt;\n&lt;dd&gt;looks for critical events received between the given 10 minute\nrange. &lt;br/&gt;\nWhen polling for events, use &lt;em&gt;timeReceived&lt;/em&gt;\ninstead of &lt;em&gt;timeOccurred&lt;/em&gt; because events arrive\nout of order.&lt;/dd&gt;\n&lt;/dl&gt;\n\nYou may query any fields present in the ApiEvent object. You can\nalso query by event attribute values using the &lt;em&gt;attributes.*&lt;/em&gt;\nsyntax. Values for date time fields (e.g. &lt;em&gt;timeOccurred&lt;/em&gt;,\n&lt;em&gt;timeReceived&lt;/em&gt;) should be ISO8601 timestamps.\n&lt;p&gt;\nThe other valid comparators are &lt;em&gt;=lt=&lt;/em&gt;, &lt;em&gt;=le=&lt;/em&gt;,\n&lt;em&gt;=ge=&lt;/em&gt;, and &lt;em&gt;=gt=&lt;/em&gt;. They stand for \&quot;&amp;lt;\&quot;, \&quot;&amp;lt;=\&quot;,\n\&quot;&amp;gt;=\&quot;, \&quot;&amp;gt;\&quot; respectively. These comparators are only applicable\nfor date time fields.
    # @return [nil]
    def api_v11_events_get(opts = {})
      api_v11_events_get_with_http_info(opts)
      return nil
    end

    # 
    # Allows you to query events in the system.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :max_results The maximum number of events to return.
    # @option opts [String] :result_offset Specified the offset of events to return.
    # @option opts [String] :query The query to perform to find events in the system. It accepts\nquerying the intersection of a list of constraints,\njoined together with semicolons (without spaces). For example:\n&lt;/p&gt;\n&lt;dl&gt;\n&lt;dt&gt;alert==true&lt;/dt&gt;\n&lt;dd&gt;looks for alerts.&lt;/dd&gt;\n&lt;dt&gt;alert==true;attributes.host!=flaky.mysite.com&lt;/dt&gt;\n&lt;dd&gt;looks for alerts, but exclude those with the host attribute of\n\&quot;flaky.mysite.com\&quot;.&lt;/dd&gt;\n&lt;dt&gt;category==log_event;attributes.log_level==ERROR&lt;/dt&gt;\n&lt;dd&gt;looks for error log events. Event attribute matching is\ncase sensitive.&lt;/dd&gt;\n&lt;dt&gt;attributes.service==hbase1;content==hlog&lt;/dt&gt;\n&lt;dd&gt;looks for any events from the \&quot;hbase1\&quot; service that\nmention \&quot;hlog\&quot;.&lt;/dd&gt;\n&lt;dt&gt;attributes.service==hbase1;content!=hlog&lt;/dt&gt;\n&lt;dd&gt;looks for any events from the \&quot;hbase1\&quot; service that\ndo not mention \&quot;hlog\&quot;.&lt;br/&gt;\nA query must not contain only negative\nconstraints (&lt;em&gt;!=&lt;/em&gt;). It returns empty results because\nthere is nothing to perform exclusion on.&lt;/dd&gt;\n&lt;dt&gt;attributes.role_type==NAMENODE;severity==critical important&lt;/dt&gt;\n&lt;dd&gt;looks for any important or critical events related to\nall NameNodes.&lt;/dd&gt;\n&lt;dt&gt;severity==critical;timeReceived=ge=2012-05-04T00:00;timeReceived=lt=2012-05-04T00:10&lt;/dt&gt;\n&lt;dd&gt;looks for critical events received between the given 10 minute\nrange. &lt;br/&gt;\nWhen polling for events, use &lt;em&gt;timeReceived&lt;/em&gt;\ninstead of &lt;em&gt;timeOccurred&lt;/em&gt; because events arrive\nout of order.&lt;/dd&gt;\n&lt;/dl&gt;\n\nYou may query any fields present in the ApiEvent object. You can\nalso query by event attribute values using the &lt;em&gt;attributes.*&lt;/em&gt;\nsyntax. Values for date time fields (e.g. &lt;em&gt;timeOccurred&lt;/em&gt;,\n&lt;em&gt;timeReceived&lt;/em&gt;) should be ISO8601 timestamps.\n&lt;p&gt;\nThe other valid comparators are &lt;em&gt;=lt=&lt;/em&gt;, &lt;em&gt;=le=&lt;/em&gt;,\n&lt;em&gt;=ge=&lt;/em&gt;, and &lt;em&gt;=gt=&lt;/em&gt;. They stand for \&quot;&amp;lt;\&quot;, \&quot;&amp;lt;=\&quot;,\n\&quot;&amp;gt;=\&quot;, \&quot;&amp;gt;\&quot; respectively. These comparators are only applicable\nfor date time fields.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_events_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_events_get ..."
      end
      
      # resource path
      path = "/api/v11/events".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'maxResults'] = opts[:'max_results'] if opts[:'max_results']
      query_params[:'resultOffset'] = opts[:'result_offset'] if opts[:'result_offset']
      query_params[:'query'] = opts[:'query'] if opts[:'query']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a specific event in the system
    # @param event_id The UUID of the event to read
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_events_event_id_get(event_id, opts = {})
      api_v11_events_event_id_get_with_http_info(event_id, opts)
      return nil
    end

    # 
    # Returns a specific event in the system
    # @param event_id The UUID of the event to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_events_event_id_get_with_http_info(event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_events_event_id_get ..."
      end
      
      # verify the required parameter 'event_id' is set
      fail "Missing the required parameter 'event_id' when calling api_v11_events_event_id_get" if event_id.nil?
      
      # resource path
      path = "/api/v11/events/{eventId}".sub('{format}','json').sub('{' + 'eventId' + '}', event_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_events_event_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the hostIds for all hosts in the system.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view to materialize
    # @return [nil]
    def api_v11_hosts_get(opts = {})
      api_v11_hosts_get_with_http_info(opts)
      return nil
    end

    # 
    # Returns the hostIds for all hosts in the system.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view to materialize
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_hosts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_hosts_get ..."
      end
      
      # resource path
      path = "/api/v11/hosts".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_hosts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # &lt;p&gt;Create one or more hosts.&lt;/p&gt;\n&lt;p&gt;You must specify at least the\nhostname and ipAddress in the request objects.\nIf no hostId is specified, it will be set to the\nhostname.  It is an error to try and create\nhost with the same hostId as another host.&lt;/p&gt;
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_hosts_post(opts = {})
      api_v11_hosts_post_with_http_info(opts)
      return nil
    end

    # 
    # &lt;p&gt;Create one or more hosts.&lt;/p&gt;\n&lt;p&gt;You must specify at least the\nhostname and ipAddress in the request objects.\nIf no hostId is specified, it will be set to the\nhostname.  It is an error to try and create\nhost with the same hostId as another host.&lt;/p&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_hosts_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_hosts_post ..."
      end
      
      # resource path
      path = "/api/v11/hosts".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_hosts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete all hosts in the system
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_hosts_delete(opts = {})
      api_v11_hosts_delete_with_http_info(opts)
      return nil
    end

    # 
    # Delete all hosts in the system
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_hosts_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_hosts_delete ..."
      end
      
      # resource path
      path = "/api/v11/hosts".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_hosts_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a specific Host in the system
    # @param host_id The ID of the host to read
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_hosts_host_id_get(host_id, opts = {})
      api_v11_hosts_host_id_get_with_http_info(host_id, opts)
      return nil
    end

    # 
    # Returns a specific Host in the system
    # @param host_id The ID of the host to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_hosts_host_id_get_with_http_info(host_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_hosts_host_id_get ..."
      end
      
      # verify the required parameter 'host_id' is set
      fail "Missing the required parameter 'host_id' when calling api_v11_hosts_host_id_get" if host_id.nil?
      
      # resource path
      path = "/api/v11/hosts/{hostId}".sub('{format}','json').sub('{' + 'hostId' + '}', host_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_hosts_host_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # &lt;p&gt;Update an existing host in the system.&lt;/p&gt;\n&lt;p&gt;Currently, only updating the rackId is supported.  All other fields\nof the host will be ignored.&lt;/p&gt;
    # @param host_id The ID of the host to read
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_hosts_host_id_put(host_id, opts = {})
      api_v11_hosts_host_id_put_with_http_info(host_id, opts)
      return nil
    end

    # 
    # &lt;p&gt;Update an existing host in the system.&lt;/p&gt;\n&lt;p&gt;Currently, only updating the rackId is supported.  All other fields\nof the host will be ignored.&lt;/p&gt;
    # @param host_id The ID of the host to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_hosts_host_id_put_with_http_info(host_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_hosts_host_id_put ..."
      end
      
      # verify the required parameter 'host_id' is set
      fail "Missing the required parameter 'host_id' when calling api_v11_hosts_host_id_put" if host_id.nil?
      
      # resource path
      path = "/api/v11/hosts/{hostId}".sub('{format}','json').sub('{' + 'hostId' + '}', host_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_hosts_host_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete a host from the system
    # @param host_id The ID of the host to read
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_hosts_host_id_delete(host_id, opts = {})
      api_v11_hosts_host_id_delete_with_http_info(host_id, opts)
      return nil
    end

    # 
    # Delete a host from the system
    # @param host_id The ID of the host to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_hosts_host_id_delete_with_http_info(host_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_hosts_host_id_delete ..."
      end
      
      # verify the required parameter 'host_id' is set
      fail "Missing the required parameter 'host_id' when calling api_v11_hosts_host_id_delete" if host_id.nil?
      
      # resource path
      path = "/api/v11/hosts/{hostId}".sub('{format}','json').sub('{' + 'hostId' + '}', host_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_hosts_host_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Put the host into maintenance mode. This is a synchronous command.\nThe result is known immediately upon return.\n\n&lt;p&gt;Available since API v2.&lt;/p&gt;
    # @param host_id The ID of the host
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_hosts_host_id_commands_enter_maintenance_mode_post(host_id, opts = {})
      api_v11_hosts_host_id_commands_enter_maintenance_mode_post_with_http_info(host_id, opts)
      return nil
    end

    # 
    # Put the host into maintenance mode. This is a synchronous command.\nThe result is known immediately upon return.\n\n&lt;p&gt;Available since API v2.&lt;/p&gt;
    # @param host_id The ID of the host
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_hosts_host_id_commands_enter_maintenance_mode_post_with_http_info(host_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_hosts_host_id_commands_enter_maintenance_mode_post ..."
      end
      
      # verify the required parameter 'host_id' is set
      fail "Missing the required parameter 'host_id' when calling api_v11_hosts_host_id_commands_enter_maintenance_mode_post" if host_id.nil?
      
      # resource path
      path = "/api/v11/hosts/{hostId}/commands/enterMaintenanceMode".sub('{format}','json').sub('{' + 'hostId' + '}', host_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_hosts_host_id_commands_enter_maintenance_mode_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Take the host out of maintenance mode. This is a synchronous command. The\nresult is known immediately upon return.\n\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param host_id The ID of the host
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_hosts_host_id_commands_exit_maintenance_mode_post(host_id, opts = {})
      api_v11_hosts_host_id_commands_exit_maintenance_mode_post_with_http_info(host_id, opts)
      return nil
    end

    # 
    # Take the host out of maintenance mode. This is a synchronous command. The\nresult is known immediately upon return.\n\n&lt;p&gt;\nAvailable since API v2.\n&lt;/p&gt;
    # @param host_id The ID of the host
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_hosts_host_id_commands_exit_maintenance_mode_post_with_http_info(host_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_hosts_host_id_commands_exit_maintenance_mode_post ..."
      end
      
      # verify the required parameter 'host_id' is set
      fail "Missing the required parameter 'host_id' when calling api_v11_hosts_host_id_commands_exit_maintenance_mode_post" if host_id.nil?
      
      # resource path
      path = "/api/v11/hosts/{hostId}/commands/exitMaintenanceMode".sub('{format}','json').sub('{' + 'hostId' + '}', host_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_hosts_host_id_commands_exit_maintenance_mode_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Migrate roles to a different host.\n&lt;p&gt;\nThis command applies only to HDFS NameNode, JournalNode, and Failover\nController roles. In order to migrate these roles:\n&lt;ul&gt;\n&lt;li&gt;HDFS High Availability must be enabled, using quorum-based storage.&lt;/li&gt;\n&lt;li&gt;HDFS must not be configured to use a federated nameservice.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;b&gt;Migrating a NameNode or JournalNode role requires cluster downtime&lt;/b&gt;.\nHDFS, along with all of its dependent services, will be stopped at the\nbeginning of the migration process, and restarted at its conclusion.\n&lt;p&gt;If the active NameNode is selected for migration, a manual failover\nwill be performed before the role is migrated. The role will remain in\nstandby mode after the migration is complete.\n&lt;p&gt;When migrating a NameNode role, the co-located Failover Controller\nrole must be migrated as well if automatic failover is enabled. The\nFailover Controller role name must be included in the list of role\nnames to migrate specified in the arguments to this command (it will\nnot be included implicitly). This command does not allow a Failover\nController role to be moved by itself, although it is possible to move\na JournalNode independently.\n&lt;p&gt;\nAvailable since API v10.
    # @param host_id The ID of the host on which the roles to migrate currently\nreside
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_hosts_host_id_commands_migrate_roles_post(host_id, opts = {})
      api_v11_hosts_host_id_commands_migrate_roles_post_with_http_info(host_id, opts)
      return nil
    end

    # 
    # Migrate roles to a different host.\n&lt;p&gt;\nThis command applies only to HDFS NameNode, JournalNode, and Failover\nController roles. In order to migrate these roles:\n&lt;ul&gt;\n&lt;li&gt;HDFS High Availability must be enabled, using quorum-based storage.&lt;/li&gt;\n&lt;li&gt;HDFS must not be configured to use a federated nameservice.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;b&gt;Migrating a NameNode or JournalNode role requires cluster downtime&lt;/b&gt;.\nHDFS, along with all of its dependent services, will be stopped at the\nbeginning of the migration process, and restarted at its conclusion.\n&lt;p&gt;If the active NameNode is selected for migration, a manual failover\nwill be performed before the role is migrated. The role will remain in\nstandby mode after the migration is complete.\n&lt;p&gt;When migrating a NameNode role, the co-located Failover Controller\nrole must be migrated as well if automatic failover is enabled. The\nFailover Controller role name must be included in the list of role\nnames to migrate specified in the arguments to this command (it will\nnot be included implicitly). This command does not allow a Failover\nController role to be moved by itself, although it is possible to move\na JournalNode independently.\n&lt;p&gt;\nAvailable since API v10.
    # @param host_id The ID of the host on which the roles to migrate currently\nreside
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_hosts_host_id_commands_migrate_roles_post_with_http_info(host_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_hosts_host_id_commands_migrate_roles_post ..."
      end
      
      # verify the required parameter 'host_id' is set
      fail "Missing the required parameter 'host_id' when calling api_v11_hosts_host_id_commands_migrate_roles_post" if host_id.nil?
      
      # resource path
      path = "/api/v11/hosts/{hostId}/commands/migrateRoles".sub('{format}','json').sub('{' + 'hostId' + '}', host_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_hosts_host_id_commands_migrate_roles_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieves the configuration of a specific host.
    # @param host_id The ID of the host.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_hosts_host_id_config_get(host_id, opts = {})
      api_v11_hosts_host_id_config_get_with_http_info(host_id, opts)
      return nil
    end

    # 
    # Retrieves the configuration of a specific host.
    # @param host_id The ID of the host.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_hosts_host_id_config_get_with_http_info(host_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_hosts_host_id_config_get ..."
      end
      
      # verify the required parameter 'host_id' is set
      fail "Missing the required parameter 'host_id' when calling api_v11_hosts_host_id_config_get" if host_id.nil?
      
      # resource path
      path = "/api/v11/hosts/{hostId}/config".sub('{format}','json').sub('{' + 'hostId' + '}', host_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_hosts_host_id_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates the host configuration with the given values.\n&lt;p&gt;\nIf a value is set in the given configuration, it will be added\nto the host&#39;s configuration, replacing any existing entries.\nIf a value is unset (its value is null), the existing\nconfiguration for the attribute will be erased, if any.\n&lt;p&gt;\nAttributes that are not listed in the input will maintain their\ncurrent values in the configuration.
    # @param host_id The ID of the host.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [nil]
    def api_v11_hosts_host_id_config_put(host_id, opts = {})
      api_v11_hosts_host_id_config_put_with_http_info(host_id, opts)
      return nil
    end

    # 
    # Updates the host configuration with the given values.\n&lt;p&gt;\nIf a value is set in the given configuration, it will be added\nto the host&#39;s configuration, replacing any existing entries.\nIf a value is unset (its value is null), the existing\nconfiguration for the attribute will be erased, if any.\n&lt;p&gt;\nAttributes that are not listed in the input will maintain their\ncurrent values in the configuration.
    # @param host_id The ID of the host.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Optional message describing the changes.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_hosts_host_id_config_put_with_http_info(host_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_hosts_host_id_config_put ..."
      end
      
      # verify the required parameter 'host_id' is set
      fail "Missing the required parameter 'host_id' when calling api_v11_hosts_host_id_config_put" if host_id.nil?
      
      # resource path
      path = "/api/v11/hosts/{hostId}/config".sub('{format}','json').sub('{' + 'hostId' + '}', host_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'message'] = opts[:'message'] if opts[:'message']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_hosts_host_id_config_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Fetch metric readings for a host.\n&lt;p&gt;\nBy default, this call will look up all metrics available for the host. If\nonly specific metrics are desired, use the &lt;i&gt;metrics&lt;/i&gt; parameter.\n&lt;p&gt;\nBy default, the returned results correspond to a 5 minute window based on\nthe provided end time (which defaults to the current server time). The\n&lt;i&gt;from&lt;/i&gt; and &lt;i&gt;to&lt;/i&gt; parameters can be used to control the window\nbeing queried. A maximum window of 3 hours is enforced.\n&lt;p&gt;\nWhen requesting a \&quot;full\&quot; view, aside from the extended properties of the\nreturned metric data, the collection will also contain information about\nall metrics available for the role, even if no readings are available\nin the requested window.\n&lt;p&gt;\nHost metrics also include per-network interface and per-storage device\nmetrics. Since collecting this data incurs in more overhead, query\nparameters can be used to choose which network interfaces and storage\ndevices to query, or to these metrics altogether.\n&lt;p&gt;\nStorage metrics are collected at different levels; for example, per-disk\nand per-partition metrics are available. The \&quot;storageIds\&quot; parameter can be\nused to filter specific storage IDs.\n&lt;p&gt;\nIn the returned data, the network interfaces and storage IDs can be\nidentified by looking at the \&quot;context\&quot; property of the metric objects.
    # @param host_id The host&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Start of the period to query.
    # @option opts [String] :to End of the period to query.
    # @option opts [String] :query_nw Whether to query for network interface metrics.
    # @option opts [String] :ifs Network interfaces to query for metrics (default = all).
    # @option opts [String] :query_storage Whether to query for storage metrics.
    # @option opts [String] :storage_ids Storage context IDs to query for metrics (default = all).
    # @option opts [String] :metrics Filter for which metrics to query.
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [nil]
    def api_v11_hosts_host_id_metrics_get(host_id, opts = {})
      api_v11_hosts_host_id_metrics_get_with_http_info(host_id, opts)
      return nil
    end

    # 
    # Fetch metric readings for a host.\n&lt;p&gt;\nBy default, this call will look up all metrics available for the host. If\nonly specific metrics are desired, use the &lt;i&gt;metrics&lt;/i&gt; parameter.\n&lt;p&gt;\nBy default, the returned results correspond to a 5 minute window based on\nthe provided end time (which defaults to the current server time). The\n&lt;i&gt;from&lt;/i&gt; and &lt;i&gt;to&lt;/i&gt; parameters can be used to control the window\nbeing queried. A maximum window of 3 hours is enforced.\n&lt;p&gt;\nWhen requesting a \&quot;full\&quot; view, aside from the extended properties of the\nreturned metric data, the collection will also contain information about\nall metrics available for the role, even if no readings are available\nin the requested window.\n&lt;p&gt;\nHost metrics also include per-network interface and per-storage device\nmetrics. Since collecting this data incurs in more overhead, query\nparameters can be used to choose which network interfaces and storage\ndevices to query, or to these metrics altogether.\n&lt;p&gt;\nStorage metrics are collected at different levels; for example, per-disk\nand per-partition metrics are available. The \&quot;storageIds\&quot; parameter can be\nused to filter specific storage IDs.\n&lt;p&gt;\nIn the returned data, the network interfaces and storage IDs can be\nidentified by looking at the \&quot;context\&quot; property of the metric objects.
    # @param host_id The host&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Start of the period to query.
    # @option opts [String] :to End of the period to query.
    # @option opts [String] :query_nw Whether to query for network interface metrics.
    # @option opts [String] :ifs Network interfaces to query for metrics (default = all).
    # @option opts [String] :query_storage Whether to query for storage metrics.
    # @option opts [String] :storage_ids Storage context IDs to query for metrics (default = all).
    # @option opts [String] :metrics Filter for which metrics to query.
    # @option opts [String] :view The view of the data to materialize,\neither \&quot;summary\&quot; or \&quot;full\&quot;.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_hosts_host_id_metrics_get_with_http_info(host_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_hosts_host_id_metrics_get ..."
      end
      
      # verify the required parameter 'host_id' is set
      fail "Missing the required parameter 'host_id' when calling api_v11_hosts_host_id_metrics_get" if host_id.nil?
      
      # resource path
      path = "/api/v11/hosts/{hostId}/metrics".sub('{format}','json').sub('{' + 'hostId' + '}', host_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'queryNw'] = opts[:'query_nw'] if opts[:'query_nw']
      query_params[:'ifs'] = opts[:'ifs'] if opts[:'ifs']
      query_params[:'queryStorage'] = opts[:'query_storage'] if opts[:'query_storage']
      query_params[:'storageIds'] = opts[:'storage_ids'] if opts[:'storage_ids']
      query_params[:'metrics'] = opts[:'metrics'] if opts[:'metrics']
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_hosts_host_id_metrics_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve time-series data from the Cloudera Manager (CM) time-series\ndata store using a tsquery.\n&lt;p&gt;\nPlease see the\n&lt;a href=\&quot;http://tiny.cloudera.com/tsquery_doc\&quot;&gt;\ntsquery language documentation&lt;/a&gt;.\n&lt;/p&gt;\nAvailable since API v4.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query Tsquery to run against the CM time-series data store.
    # @option opts [String] :from Start of the period to query in ISO 8601 format (defaults to 5 minutes before the\nend of the period).
    # @option opts [String] :to End of the period to query in ISO 8601 format (defaults to current time).
    # @return [nil]
    def api_v11_timeseries_get(opts = {})
      api_v11_timeseries_get_with_http_info(opts)
      return nil
    end

    # 
    # Retrieve time-series data from the Cloudera Manager (CM) time-series\ndata store using a tsquery.\n&lt;p&gt;\nPlease see the\n&lt;a href=\&quot;http://tiny.cloudera.com/tsquery_doc\&quot;&gt;\ntsquery language documentation&lt;/a&gt;.\n&lt;/p&gt;\nAvailable since API v4.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query Tsquery to run against the CM time-series data store.
    # @option opts [String] :from Start of the period to query in ISO 8601 format (defaults to 5 minutes before the\nend of the period).
    # @option opts [String] :to End of the period to query in ISO 8601 format (defaults to current time).
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_timeseries_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_timeseries_get ..."
      end
      
      # resource path
      path = "/api/v11/timeseries".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'query'] = opts[:'query'] if opts[:'query']
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_timeseries_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve time-series data from the Cloudera Manager (CM) time-series\ndata store accepting HTTP POST request. This method differs\nfrom queryTimeSeries() in v6 that this could accept query strings that are\nlonger than HTTP GET request limit.\n\nAvailable since API v11.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_timeseries_post(opts = {})
      api_v11_timeseries_post_with_http_info(opts)
      return nil
    end

    # 
    # Retrieve time-series data from the Cloudera Manager (CM) time-series\ndata store accepting HTTP POST request. This method differs\nfrom queryTimeSeries() in v6 that this could accept query strings that are\nlonger than HTTP GET request limit.\n\nAvailable since API v11.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_timeseries_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_timeseries_post ..."
      end
      
      # resource path
      path = "/api/v11/timeseries".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_timeseries_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the list of all user-customized dashboards. This includes both the\nnew dashboards created by users as well as any user customizations to\nbuilt-in dashboards.\n&lt;p&gt;\nAvailable since API v6.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_timeseries_dashboards_get(opts = {})
      api_v11_timeseries_dashboards_get_with_http_info(opts)
      return nil
    end

    # 
    # Returns the list of all user-customized dashboards. This includes both the\nnew dashboards created by users as well as any user customizations to\nbuilt-in dashboards.\n&lt;p&gt;\nAvailable since API v6.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_timeseries_dashboards_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_timeseries_dashboards_get ..."
      end
      
      # resource path
      path = "/api/v11/timeseries/dashboards".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_timeseries_dashboards_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates the list of dashboards. If any of the dashboards already exist\nthis whole command will fail and no dashboards will be created.\n&lt;p&gt;\nAvailable since API v6.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_timeseries_dashboards_post(opts = {})
      api_v11_timeseries_dashboards_post_with_http_info(opts)
      return nil
    end

    # 
    # Creates the list of dashboards. If any of the dashboards already exist\nthis whole command will fail and no dashboards will be created.\n&lt;p&gt;\nAvailable since API v6.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_timeseries_dashboards_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_timeseries_dashboards_post ..."
      end
      
      # resource path
      path = "/api/v11/timeseries/dashboards".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_timeseries_dashboards_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a dashboard definition for the specified name. This dashboard\ncan be imported with the createDashboards API.\n&lt;p&gt;\nAvailable since API v6.
    # @param dashboard_name The name of the dashboard.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_timeseries_dashboards_dashboard_name_get(dashboard_name, opts = {})
      api_v11_timeseries_dashboards_dashboard_name_get_with_http_info(dashboard_name, opts)
      return nil
    end

    # 
    # Returns a dashboard definition for the specified name. This dashboard\ncan be imported with the createDashboards API.\n&lt;p&gt;\nAvailable since API v6.
    # @param dashboard_name The name of the dashboard.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_timeseries_dashboards_dashboard_name_get_with_http_info(dashboard_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_timeseries_dashboards_dashboard_name_get ..."
      end
      
      # verify the required parameter 'dashboard_name' is set
      fail "Missing the required parameter 'dashboard_name' when calling api_v11_timeseries_dashboards_dashboard_name_get" if dashboard_name.nil?
      
      # resource path
      path = "/api/v11/timeseries/dashboards/{dashboardName}".sub('{format}','json').sub('{' + 'dashboardName' + '}', dashboard_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_timeseries_dashboards_dashboard_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Deletes a dashboard.\n\n&lt;p&gt;\nAvailable since API v6.
    # @param dashboard_name The name of the dashboard.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_timeseries_dashboards_dashboard_name_delete(dashboard_name, opts = {})
      api_v11_timeseries_dashboards_dashboard_name_delete_with_http_info(dashboard_name, opts)
      return nil
    end

    # 
    # Deletes a dashboard.\n\n&lt;p&gt;\nAvailable since API v6.
    # @param dashboard_name The name of the dashboard.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_timeseries_dashboards_dashboard_name_delete_with_http_info(dashboard_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_timeseries_dashboards_dashboard_name_delete ..."
      end
      
      # verify the required parameter 'dashboard_name' is set
      fail "Missing the required parameter 'dashboard_name' when calling api_v11_timeseries_dashboards_dashboard_name_delete" if dashboard_name.nil?
      
      # resource path
      path = "/api/v11/timeseries/dashboards/{dashboardName}".sub('{format}','json').sub('{' + 'dashboardName' + '}', dashboard_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_timeseries_dashboards_dashboard_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve all metric entity type attributes monitored by Cloudera Manager.\n&lt;p/&gt;\nAvailable since API v11.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_timeseries_entity_type_attributes_get(opts = {})
      api_v11_timeseries_entity_type_attributes_get_with_http_info(opts)
      return nil
    end

    # 
    # Retrieve all metric entity type attributes monitored by Cloudera Manager.\n&lt;p/&gt;\nAvailable since API v11.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_timeseries_entity_type_attributes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_timeseries_entity_type_attributes_get ..."
      end
      
      # resource path
      path = "/api/v11/timeseries/entityTypeAttributes".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_timeseries_entity_type_attributes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve all metric entity types monitored by Cloudera Manager.\nIt is guaranteed that parent types appear before their children.\n&lt;p/&gt;\nAvailable since API v11.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_timeseries_entity_types_get(opts = {})
      api_v11_timeseries_entity_types_get_with_http_info(opts)
      return nil
    end

    # 
    # Retrieve all metric entity types monitored by Cloudera Manager.\nIt is guaranteed that parent types appear before their children.\n&lt;p/&gt;\nAvailable since API v11.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_timeseries_entity_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_timeseries_entity_types_get ..."
      end
      
      # resource path
      path = "/api/v11/timeseries/entityTypes".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_timeseries_entity_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve schema for all metrics\n&lt;p/&gt;\nThe schema is fixed for a product version.\nThe schema may change for an API versions\n&lt;p/&gt;\nAvailable since API v4.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_timeseries_schema_get(opts = {})
      api_v11_timeseries_schema_get_with_http_info(opts)
      return nil
    end

    # 
    # Retrieve schema for all metrics\n&lt;p/&gt;\nThe schema is fixed for a product version.\nThe schema may change for an API versions\n&lt;p/&gt;\nAvailable since API v4.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_timeseries_schema_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_timeseries_schema_get ..."
      end
      
      # resource path
      path = "/api/v11/timeseries/schema".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_timeseries_schema_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Echoes the provided message back to the caller.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message The message to echo back
    # @return [nil]
    def api_v11_tools_echo_get(opts = {})
      api_v11_tools_echo_get_with_http_info(opts)
      return nil
    end

    # 
    # Echoes the provided message back to the caller.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message The message to echo back
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_tools_echo_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_tools_echo_get ..."
      end
      
      # resource path
      path = "/api/v11/tools/echo".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'message'] = opts[:'message'] if opts[:'message']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_tools_echo_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Throws an error containing the given input message. This is\nwhat an error response looks like.\n\n&lt;pre&gt;\n{\n\&quot;message\&quot;: \&quot;An error message\&quot;,\n\&quot;causes\&quot;: [ \&quot;A list of causes\&quot;, \&quot;Potentially null\&quot; ]\n}\n&lt;/pre&gt;\n\n&lt;p&gt;The &lt;em&gt;message&lt;/em&gt; field contains a description of the error.\nThe &lt;em&gt;causes&lt;/em&gt; field, if not null, contains a list of causes\nfor the error.\n&lt;/p&gt;\n\n&lt;p&gt;Note that this &lt;strong&gt;never&lt;/strong&gt; returns an echoMessage.\nInstead, the result (and all error results) has the above structure.\n&lt;/p&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message The error message to echo
    # @return [nil]
    def api_v11_tools_echo_error_get(opts = {})
      api_v11_tools_echo_error_get_with_http_info(opts)
      return nil
    end

    # 
    # Throws an error containing the given input message. This is\nwhat an error response looks like.\n\n&lt;pre&gt;\n{\n\&quot;message\&quot;: \&quot;An error message\&quot;,\n\&quot;causes\&quot;: [ \&quot;A list of causes\&quot;, \&quot;Potentially null\&quot; ]\n}\n&lt;/pre&gt;\n\n&lt;p&gt;The &lt;em&gt;message&lt;/em&gt; field contains a description of the error.\nThe &lt;em&gt;causes&lt;/em&gt; field, if not null, contains a list of causes\nfor the error.\n&lt;/p&gt;\n\n&lt;p&gt;Note that this &lt;strong&gt;never&lt;/strong&gt; returns an echoMessage.\nInstead, the result (and all error results) has the above structure.\n&lt;/p&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message The error message to echo
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_tools_echo_error_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_tools_echo_error_get ..."
      end
      
      # resource path
      path = "/api/v11/tools/echoError".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'message'] = opts[:'message'] if opts[:'message']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_tools_echo_error_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a list of the user names configured in the system.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view 
    # @return [nil]
    def api_v11_users_get(opts = {})
      api_v11_users_get_with_http_info(opts)
      return nil
    end

    # 
    # Returns a list of the user names configured in the system.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_users_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_users_get ..."
      end
      
      # resource path
      path = "/api/v11/users".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'view'] = opts[:'view'] if opts[:'view']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates a list of users.\n&lt;p&gt;\nWhen creating new users, the &lt;i&gt;password&lt;/i&gt; property of each user should\nbe their plain text password. The returned user information will not\ncontain any password information.\n&lt;p/&gt;
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_users_post(opts = {})
      api_v11_users_post_with_http_info(opts)
      return nil
    end

    # 
    # Creates a list of users.\n&lt;p&gt;\nWhen creating new users, the &lt;i&gt;password&lt;/i&gt; property of each user should\nbe their plain text password. The returned user information will not\ncontain any password information.\n&lt;p/&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_users_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_users_post ..."
      end
      
      # resource path
      path = "/api/v11/users".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_users_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Return a list of the sessions associated with interactive authenticated\nusers in Cloudera Manager.\n&lt;p&gt;\nNote that these sessions are only associated with users who log into the\nweb interface. API users will not appear.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_users_sessions_get(opts = {})
      api_v11_users_sessions_get_with_http_info(opts)
      return nil
    end

    # 
    # Return a list of the sessions associated with interactive authenticated\nusers in Cloudera Manager.\n&lt;p&gt;\nNote that these sessions are only associated with users who log into the\nweb interface. API users will not appear.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_users_sessions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_users_sessions_get ..."
      end
      
      # resource path
      path = "/api/v11/users/sessions".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_users_sessions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns detailed information about a user.
    # @param user_name The name of the user to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_users_user_name_get(user_name, opts = {})
      api_v11_users_user_name_get_with_http_info(user_name, opts)
      return nil
    end

    # 
    # Returns detailed information about a user.
    # @param user_name The name of the user to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_users_user_name_get_with_http_info(user_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_users_user_name_get ..."
      end
      
      # verify the required parameter 'user_name' is set
      fail "Missing the required parameter 'user_name' when calling api_v11_users_user_name_get" if user_name.nil?
      
      # resource path
      path = "/api/v11/users/{userName}".sub('{format}','json').sub('{' + 'userName' + '}', user_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_users_user_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates the given user&#39;s information. Note that the user&#39;s name cannot\nbe changed.
    # @param user_name The name of the user to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_users_user_name_put(user_name, opts = {})
      api_v11_users_user_name_put_with_http_info(user_name, opts)
      return nil
    end

    # 
    # Updates the given user&#39;s information. Note that the user&#39;s name cannot\nbe changed.
    # @param user_name The name of the user to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_users_user_name_put_with_http_info(user_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_users_user_name_put ..."
      end
      
      # verify the required parameter 'user_name' is set
      fail "Missing the required parameter 'user_name' when calling api_v11_users_user_name_put" if user_name.nil?
      
      # resource path
      path = "/api/v11/users/{userName}".sub('{format}','json').sub('{' + 'userName' + '}', user_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_users_user_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Deletes a user from the system.\n&lt;p/&gt;
    # @param user_name The name of the user to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v11_users_user_name_delete(user_name, opts = {})
      api_v11_users_user_name_delete_with_http_info(user_name, opts)
      return nil
    end

    # 
    # Deletes a user from the system.\n&lt;p/&gt;
    # @param user_name The name of the user to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_v11_users_user_name_delete_with_http_info(user_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#api_v11_users_user_name_delete ..."
      end
      
      # verify the required parameter 'user_name' is set
      fail "Missing the required parameter 'user_name' when calling api_v11_users_user_name_delete" if user_name.nil?
      
      # resource path
      path = "/api/v11/users/{userName}".sub('{format}','json').sub('{' + 'userName' + '}', user_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      

      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v11_users_user_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end




